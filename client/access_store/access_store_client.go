// Code generated by go-swagger; DO NOT EDIT.

package access_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new access store API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access store API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccessStoreListDefaultAccess(params *AccessStoreListDefaultAccessParams, opts ...ClientOption) (*AccessStoreListDefaultAccessOK, error)

	AccessStoreListObjectAccess(params *AccessStoreListObjectAccessParams, opts ...ClientOption) (*AccessStoreListObjectAccessOK, error)

	AccessStoreToggleDefaultAccess(params *AccessStoreToggleDefaultAccessParams, opts ...ClientOption) (*AccessStoreToggleDefaultAccessOK, error)

	AccessStoreToggleObjectAccess(params *AccessStoreToggleObjectAccessParams, opts ...ClientOption) (*AccessStoreToggleObjectAccessOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccessStoreListDefaultAccess defaults t o d o indicate objclass default as a default rights repo
*/

func (a *Client) AccessStoreListDefaultAccess(params *AccessStoreListDefaultAccessParams, opts ...ClientOption) (*AccessStoreListDefaultAccessOK, error) {
	if params == nil {
		params = NewAccessStoreListDefaultAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccessStore_ListDefaultAccess",
		Method:             "GET",
		PathPattern:        "/acl/{object.name}/{object.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccessStoreListDefaultAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccessStoreListDefaultAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccessStore_ListDefaultAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccessStoreListObjectAccess access store list object access API
*/

func (a *Client) AccessStoreListObjectAccess(params *AccessStoreListObjectAccessParams, opts ...ClientOption) (*AccessStoreListObjectAccessOK, error) {
	if params == nil {
		params = NewAccessStoreListObjectAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccessStore_ListObjectAccess",
		Method:             "GET",
		PathPattern:        "/{object.name}/{object.id}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccessStoreListObjectAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccessStoreListObjectAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccessStore_ListObjectAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccessStoreToggleDefaultAccess sames as update access except for d e f a u l t access control system
*/

func (a *Client) AccessStoreToggleDefaultAccess(params *AccessStoreToggleDefaultAccessParams, opts ...ClientOption) (*AccessStoreToggleDefaultAccessOK, error) {
	if params == nil {
		params = NewAccessStoreToggleDefaultAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccessStore_ToggleDefaultAccess",
		Method:             "PATCH",
		PathPattern:        "/acl/{object.name}/{object.id}/grantor/{grantor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccessStoreToggleDefaultAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccessStoreToggleDefaultAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccessStore_ToggleDefaultAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccessStoreToggleObjectAccess ts o d o replace with grant access API to become command like g r a n t r e v OK e with empty access rights string
*/

func (a *Client) AccessStoreToggleObjectAccess(params *AccessStoreToggleObjectAccessParams, opts ...ClientOption) (*AccessStoreToggleObjectAccessOK, error) {
	if params == nil {
		params = NewAccessStoreToggleObjectAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccessStore_ToggleObjectAccess",
		Method:             "PATCH",
		PathPattern:        "/{object.name}/{object.id}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccessStoreToggleObjectAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccessStoreToggleObjectAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccessStore_ToggleObjectAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
