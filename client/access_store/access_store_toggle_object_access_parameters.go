// Code generated by go-swagger; DO NOT EDIT.

package access_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// NewAccessStoreToggleObjectAccessParams creates a new AccessStoreToggleObjectAccessParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccessStoreToggleObjectAccessParams() *AccessStoreToggleObjectAccessParams {
	return &AccessStoreToggleObjectAccessParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccessStoreToggleObjectAccessParamsWithTimeout creates a new AccessStoreToggleObjectAccessParams object
// with the ability to set a timeout on a request.
func NewAccessStoreToggleObjectAccessParamsWithTimeout(timeout time.Duration) *AccessStoreToggleObjectAccessParams {
	return &AccessStoreToggleObjectAccessParams{
		timeout: timeout,
	}
}

// NewAccessStoreToggleObjectAccessParamsWithContext creates a new AccessStoreToggleObjectAccessParams object
// with the ability to set a context for a request.
func NewAccessStoreToggleObjectAccessParamsWithContext(ctx context.Context) *AccessStoreToggleObjectAccessParams {
	return &AccessStoreToggleObjectAccessParams{
		Context: ctx,
	}
}

// NewAccessStoreToggleObjectAccessParamsWithHTTPClient creates a new AccessStoreToggleObjectAccessParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccessStoreToggleObjectAccessParamsWithHTTPClient(client *http.Client) *AccessStoreToggleObjectAccessParams {
	return &AccessStoreToggleObjectAccessParams{
		HTTPClient: client,
	}
}

/*
AccessStoreToggleObjectAccessParams contains all the parameters to send to the API endpoint

	for the access store toggle object access operation.

	Typically these are written to a http.Request.
*/
type AccessStoreToggleObjectAccessParams struct {

	// List.
	List []*models.APIGrantAccessRequestV1

	/* ObjectID.

	   identifier

	   Format: int64
	*/
	ObjectID string

	/* ObjectName.

	   display name
	*/
	ObjectName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the access store toggle object access params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccessStoreToggleObjectAccessParams) WithDefaults() *AccessStoreToggleObjectAccessParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the access store toggle object access params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccessStoreToggleObjectAccessParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithTimeout(timeout time.Duration) *AccessStoreToggleObjectAccessParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithContext(ctx context.Context) *AccessStoreToggleObjectAccessParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithHTTPClient(client *http.Client) *AccessStoreToggleObjectAccessParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithList adds the list to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithList(list []*models.APIGrantAccessRequestV1) *AccessStoreToggleObjectAccessParams {
	o.SetList(list)
	return o
}

// SetList adds the list to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetList(list []*models.APIGrantAccessRequestV1) {
	o.List = list
}

// WithObjectID adds the objectID to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithObjectID(objectID string) *AccessStoreToggleObjectAccessParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetObjectID(objectID string) {
	o.ObjectID = objectID
}

// WithObjectName adds the objectName to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) WithObjectName(objectName string) *AccessStoreToggleObjectAccessParams {
	o.SetObjectName(objectName)
	return o
}

// SetObjectName adds the objectName to the access store toggle object access params
func (o *AccessStoreToggleObjectAccessParams) SetObjectName(objectName string) {
	o.ObjectName = objectName
}

// WriteToRequest writes these params to a swagger request
func (o *AccessStoreToggleObjectAccessParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.List != nil {
		if err := r.SetBodyParam(o.List); err != nil {
			return err
		}
	}

	// path param object.id
	if err := r.SetPathParam("object.id", o.ObjectID); err != nil {
		return err
	}

	// path param object.name
	if err := r.SetPathParam("object.name", o.ObjectName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
