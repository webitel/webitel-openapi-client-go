// Code generated by go-swagger; DO NOT EDIT.

package agent_absence_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new agent absence service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent absence service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AgentAbsenceServiceCreateAgentAbsence(itemAgentID string, body *models.AgentAbsenceServiceCreateAgentAbsenceParamsBody, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentAbsenceOK, error)
	AgentAbsenceServiceCreateAgentAbsenceWithParams(params *AgentAbsenceServiceCreateAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentAbsenceOK, error)

	AgentAbsenceServiceCreateAgentsAbsencesBulk(body *models.WfmCreateAgentsAbsencesBulkRequest, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentsAbsencesBulkOK, error)
	AgentAbsenceServiceCreateAgentsAbsencesBulkWithParams(params *AgentAbsenceServiceCreateAgentsAbsencesBulkParams, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentsAbsencesBulkOK, error)

	AgentAbsenceServiceDeleteAgentAbsence(id string, agentID string, opts ...ClientOption) (*AgentAbsenceServiceDeleteAgentAbsenceOK, error)
	AgentAbsenceServiceDeleteAgentAbsenceWithParams(params *AgentAbsenceServiceDeleteAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceDeleteAgentAbsenceOK, error)

	AgentAbsenceServiceReadAgentAbsences(params *AgentAbsenceServiceReadAgentAbsencesParams, opts ...ClientOption) (*AgentAbsenceServiceReadAgentAbsencesOK, error)

	AgentAbsenceServiceSearchAgentsAbsences(params *AgentAbsenceServiceSearchAgentsAbsencesParams, opts ...ClientOption) (*AgentAbsenceServiceSearchAgentsAbsencesOK, error)

	AgentAbsenceServiceUpdateAgentAbsence(params *AgentAbsenceServiceUpdateAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceUpdateAgentAbsenceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AgentAbsenceServiceCreateAgentAbsence agent absence service create agent absence API
*/
func (a *Client) AgentAbsenceServiceCreateAgentAbsence(itemAgentID string, body *models.AgentAbsenceServiceCreateAgentAbsenceParamsBody, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentAbsenceOK, error) {
	params := NewAgentAbsenceServiceCreateAgentAbsenceParams().WithBody(body).WithItemAgentID(itemAgentID)
	return a.AgentAbsenceServiceCreateAgentAbsenceWithParams(params, opts...)
}

func (a *Client) AgentAbsenceServiceCreateAgentAbsenceWithParams(params *AgentAbsenceServiceCreateAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentAbsenceOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceCreateAgentAbsenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_CreateAgentAbsence",
		Method:             "POST",
		PathPattern:        "/wfm/agents/{item.agent.id}/absences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceCreateAgentAbsenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceCreateAgentAbsenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceCreateAgentAbsenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentAbsenceServiceCreateAgentsAbsencesBulk agent absence service create agents absences bulk API
*/
func (a *Client) AgentAbsenceServiceCreateAgentsAbsencesBulk(body *models.WfmCreateAgentsAbsencesBulkRequest, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentsAbsencesBulkOK, error) {
	params := NewAgentAbsenceServiceCreateAgentsAbsencesBulkParams().WithBody(body)
	return a.AgentAbsenceServiceCreateAgentsAbsencesBulkWithParams(params, opts...)
}

func (a *Client) AgentAbsenceServiceCreateAgentsAbsencesBulkWithParams(params *AgentAbsenceServiceCreateAgentsAbsencesBulkParams, opts ...ClientOption) (*AgentAbsenceServiceCreateAgentsAbsencesBulkOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceCreateAgentsAbsencesBulkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_CreateAgentsAbsencesBulk",
		Method:             "POST",
		PathPattern:        "/wfm/agents/absences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceCreateAgentsAbsencesBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceCreateAgentsAbsencesBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceCreateAgentsAbsencesBulkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentAbsenceServiceDeleteAgentAbsence agent absence service delete agent absence API
*/
func (a *Client) AgentAbsenceServiceDeleteAgentAbsence(id string, agentID string, opts ...ClientOption) (*AgentAbsenceServiceDeleteAgentAbsenceOK, error) {
	params := NewAgentAbsenceServiceDeleteAgentAbsenceParams().WithAgentID(agentID).WithID(id)
	return a.AgentAbsenceServiceDeleteAgentAbsenceWithParams(params, opts...)
}

func (a *Client) AgentAbsenceServiceDeleteAgentAbsenceWithParams(params *AgentAbsenceServiceDeleteAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceDeleteAgentAbsenceOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceDeleteAgentAbsenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_DeleteAgentAbsence",
		Method:             "DELETE",
		PathPattern:        "/wfm/agents/{agent_id}/absences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceDeleteAgentAbsenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceDeleteAgentAbsenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceDeleteAgentAbsenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentAbsenceServiceReadAgentAbsences agent absence service read agent absences API
*/

func (a *Client) AgentAbsenceServiceReadAgentAbsences(params *AgentAbsenceServiceReadAgentAbsencesParams, opts ...ClientOption) (*AgentAbsenceServiceReadAgentAbsencesOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceReadAgentAbsencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_ReadAgentAbsences",
		Method:             "GET",
		PathPattern:        "/wfm/agents/{agent_id}/absences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceReadAgentAbsencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceReadAgentAbsencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceReadAgentAbsencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentAbsenceServiceSearchAgentsAbsences agent absence service search agents absences API
*/

func (a *Client) AgentAbsenceServiceSearchAgentsAbsences(params *AgentAbsenceServiceSearchAgentsAbsencesParams, opts ...ClientOption) (*AgentAbsenceServiceSearchAgentsAbsencesOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceSearchAgentsAbsencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_SearchAgentsAbsences",
		Method:             "GET",
		PathPattern:        "/wfm/agents/absences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceSearchAgentsAbsencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceSearchAgentsAbsencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceSearchAgentsAbsencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentAbsenceServiceUpdateAgentAbsence agent absence service update agent absence API
*/

func (a *Client) AgentAbsenceServiceUpdateAgentAbsence(params *AgentAbsenceServiceUpdateAgentAbsenceParams, opts ...ClientOption) (*AgentAbsenceServiceUpdateAgentAbsenceOK, error) {
	if params == nil {
		params = NewAgentAbsenceServiceUpdateAgentAbsenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentAbsenceService_UpdateAgentAbsence",
		Method:             "PUT",
		PathPattern:        "/wfm/agents/{item.agent.id}/absences/{item.absence.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentAbsenceServiceUpdateAgentAbsenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentAbsenceServiceUpdateAgentAbsenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentAbsenceServiceUpdateAgentAbsenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
