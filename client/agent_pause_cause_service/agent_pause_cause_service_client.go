// Code generated by go-swagger; DO NOT EDIT.

package agent_pause_cause_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new agent pause cause service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent pause cause service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAgentPauseCause(body *models.EngineCreateAgentPauseCauseRequest, opts ...ClientOption) (*CreateAgentPauseCauseOK, error)
	CreateAgentPauseCauseWithParams(params *CreateAgentPauseCauseParams, opts ...ClientOption) (*CreateAgentPauseCauseOK, error)

	DeleteAgentPauseCause(id int64, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error)
	DeleteAgentPauseCauseWithParams(params *DeleteAgentPauseCauseParams, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error)

	PatchAgentPauseCause(id int64, body *models.EnginePatchAgentPauseCauseRequest, opts ...ClientOption) (*PatchAgentPauseCauseOK, error)
	PatchAgentPauseCauseWithParams(params *PatchAgentPauseCauseParams, opts ...ClientOption) (*PatchAgentPauseCauseOK, error)

	ReadAgentPauseCause(id int64, opts ...ClientOption) (*ReadAgentPauseCauseOK, error)
	ReadAgentPauseCauseWithParams(params *ReadAgentPauseCauseParams, opts ...ClientOption) (*ReadAgentPauseCauseOK, error)

	SearchAgentPauseCause(params *SearchAgentPauseCauseParams, opts ...ClientOption) (*SearchAgentPauseCauseOK, error)

	UpdateAgentPauseCause(id int64, body *models.EngineUpdateAgentPauseCauseRequest, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error)
	UpdateAgentPauseCauseWithParams(params *UpdateAgentPauseCauseParams, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAgentPauseCause create agent pause cause API
*/
func (a *Client) CreateAgentPauseCause(body *models.EngineCreateAgentPauseCauseRequest, opts ...ClientOption) (*CreateAgentPauseCauseOK, error) {
	params := NewCreateAgentPauseCauseParams().WithBody(body)
	return a.CreateAgentPauseCauseWithParams(params, opts...)
}

func (a *Client) CreateAgentPauseCauseWithParams(params *CreateAgentPauseCauseParams, opts ...ClientOption) (*CreateAgentPauseCauseOK, error) {
	if params == nil {
		params = NewCreateAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgentPauseCause",
		Method:             "POST",
		PathPattern:        "/call_center/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAgentPauseCause delete agent pause cause API
*/
func (a *Client) DeleteAgentPauseCause(id int64, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error) {
	params := NewDeleteAgentPauseCauseParams().WithID(id)
	return a.DeleteAgentPauseCauseWithParams(params, opts...)
}

func (a *Client) DeleteAgentPauseCauseWithParams(params *DeleteAgentPauseCauseParams, opts ...ClientOption) (*DeleteAgentPauseCauseOK, error) {
	if params == nil {
		params = NewDeleteAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgentPauseCause",
		Method:             "DELETE",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAgentPauseCause patch agent pause cause API
*/
func (a *Client) PatchAgentPauseCause(id int64, body *models.EnginePatchAgentPauseCauseRequest, opts ...ClientOption) (*PatchAgentPauseCauseOK, error) {
	params := NewPatchAgentPauseCauseParams().WithBody(body).WithID(id)
	return a.PatchAgentPauseCauseWithParams(params, opts...)
}

func (a *Client) PatchAgentPauseCauseWithParams(params *PatchAgentPauseCauseParams, opts ...ClientOption) (*PatchAgentPauseCauseOK, error) {
	if params == nil {
		params = NewPatchAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgentPauseCause",
		Method:             "PATCH",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadAgentPauseCause read agent pause cause API
*/
func (a *Client) ReadAgentPauseCause(id int64, opts ...ClientOption) (*ReadAgentPauseCauseOK, error) {
	params := NewReadAgentPauseCauseParams().WithID(id)
	return a.ReadAgentPauseCauseWithParams(params, opts...)
}

func (a *Client) ReadAgentPauseCauseWithParams(params *ReadAgentPauseCauseParams, opts ...ClientOption) (*ReadAgentPauseCauseOK, error) {
	if params == nil {
		params = NewReadAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgentPauseCause",
		Method:             "GET",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentPauseCause search agent pause cause API
*/

func (a *Client) SearchAgentPauseCause(params *SearchAgentPauseCauseParams, opts ...ClientOption) (*SearchAgentPauseCauseOK, error) {
	if params == nil {
		params = NewSearchAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentPauseCause",
		Method:             "GET",
		PathPattern:        "/call_center/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAgentPauseCause update agent pause cause API
*/
func (a *Client) UpdateAgentPauseCause(id int64, body *models.EngineUpdateAgentPauseCauseRequest, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error) {
	params := NewUpdateAgentPauseCauseParams().WithBody(body).WithID(id)
	return a.UpdateAgentPauseCauseWithParams(params, opts...)
}

func (a *Client) UpdateAgentPauseCauseWithParams(params *UpdateAgentPauseCauseParams, opts ...ClientOption) (*UpdateAgentPauseCauseOK, error) {
	if params == nil {
		params = NewUpdateAgentPauseCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentPauseCause",
		Method:             "PUT",
		PathPattern:        "/call_center/pause_causes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAgentPauseCauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentPauseCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAgentPauseCauseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
