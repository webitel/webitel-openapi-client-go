// Code generated by go-swagger; DO NOT EDIT.

package agent_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new agent service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AgentSetState(agentID int32, body *models.EngineAgentSetStateRequest, opts ...ClientOption) (*AgentSetStateOK, error)
	AgentSetStateWithParams(params *AgentSetStateParams, opts ...ClientOption) (*AgentSetStateOK, error)

	AgentStateHistory(params *AgentStateHistoryParams, opts ...ClientOption) (*AgentStateHistoryOK, error)

	AgentTodayStatistics(params *AgentTodayStatisticsParams, opts ...ClientOption) (*AgentTodayStatisticsOK, error)

	CreateAgent(body *models.EngineCreateAgentRequest, opts ...ClientOption) (*CreateAgentOK, error)
	CreateAgentWithParams(params *CreateAgentParams, opts ...ClientOption) (*CreateAgentOK, error)

	DeleteAgent(params *DeleteAgentParams, opts ...ClientOption) (*DeleteAgentOK, error)

	PatchAgent(id string, body *models.EnginePatchAgentRequest, opts ...ClientOption) (*PatchAgentOK, error)
	PatchAgentWithParams(params *PatchAgentParams, opts ...ClientOption) (*PatchAgentOK, error)

	ReadAgent(params *ReadAgentParams, opts ...ClientOption) (*ReadAgentOK, error)

	SearchAgent(params *SearchAgentParams, opts ...ClientOption) (*SearchAgentOK, error)

	SearchAgentCallStatistics(params *SearchAgentCallStatisticsParams, opts ...ClientOption) (*SearchAgentCallStatisticsOK, error)

	SearchAgentInQueue(params *SearchAgentInQueueParams, opts ...ClientOption) (*SearchAgentInQueueOK, error)

	SearchAgentInQueueStatistics(params *SearchAgentInQueueStatisticsParams, opts ...ClientOption) (*SearchAgentInQueueStatisticsOK, error)

	SearchAgentInTeam(params *SearchAgentInTeamParams, opts ...ClientOption) (*SearchAgentInTeamOK, error)

	SearchAgentStateHistory(params *SearchAgentStateHistoryParams, opts ...ClientOption) (*SearchAgentStateHistoryOK, error)

	SearchAgentStatusStatistic(params *SearchAgentStatusStatisticParams, opts ...ClientOption) (*SearchAgentStatusStatisticOK, error)

	SearchAgentStatusStatisticItem(params *SearchAgentStatusStatisticItemParams, opts ...ClientOption) (*SearchAgentStatusStatisticItemOK, error)

	SearchLookupUsersAgentNotExists(params *SearchLookupUsersAgentNotExistsParams, opts ...ClientOption) (*SearchLookupUsersAgentNotExistsOK, error)

	SearchPauseCauseForAgent(params *SearchPauseCauseForAgentParams, opts ...ClientOption) (*SearchPauseCauseForAgentOK, error)

	SearchUserStatus(params *SearchUserStatusParams, opts ...ClientOption) (*SearchUserStatusOK, error)

	UpdateAgent(id string, body *models.EngineUpdateAgentRequest, opts ...ClientOption) (*UpdateAgentOK, error)
	UpdateAgentWithParams(params *UpdateAgentParams, opts ...ClientOption) (*UpdateAgentOK, error)

	UpdateAgentStatus(id string, body *models.EngineAgentStatusRequest, opts ...ClientOption) (*UpdateAgentStatusOK, error)
	UpdateAgentStatusWithParams(params *UpdateAgentStatusParams, opts ...ClientOption) (*UpdateAgentStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AgentSetState agent set state API
*/
func (a *Client) AgentSetState(agentID int32, body *models.EngineAgentSetStateRequest, opts ...ClientOption) (*AgentSetStateOK, error) {
	params := NewAgentSetStateParams().WithAgentID(agentID).WithBody(body)
	return a.AgentSetStateWithParams(params, opts...)
}

func (a *Client) AgentSetStateWithParams(params *AgentSetStateParams, opts ...ClientOption) (*AgentSetStateOK, error) {
	if params == nil {
		params = NewAgentSetStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentSetState",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{agent_id}/states/waiting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentSetStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentSetStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentSetStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentStateHistory agent state history API
*/

func (a *Client) AgentStateHistory(params *AgentStateHistoryParams, opts ...ClientOption) (*AgentStateHistoryOK, error) {
	if params == nil {
		params = NewAgentStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentStateHistory",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/states/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentStateHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentStateHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentTodayStatistics agent today statistics API
*/

func (a *Client) AgentTodayStatistics(params *AgentTodayStatisticsParams, opts ...ClientOption) (*AgentTodayStatisticsOK, error) {
	if params == nil {
		params = NewAgentTodayStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentTodayStatistics",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/statistics/today",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentTodayStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentTodayStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentTodayStatisticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAgent creates agent
*/
func (a *Client) CreateAgent(body *models.EngineCreateAgentRequest, opts ...ClientOption) (*CreateAgentOK, error) {
	params := NewCreateAgentParams().WithBody(body)
	return a.CreateAgentWithParams(params, opts...)
}

func (a *Client) CreateAgentWithParams(params *CreateAgentParams, opts ...ClientOption) (*CreateAgentOK, error) {
	if params == nil {
		params = NewCreateAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgent",
		Method:             "POST",
		PathPattern:        "/call_center/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAgent removes agent
*/

func (a *Client) DeleteAgent(params *DeleteAgentParams, opts ...ClientOption) (*DeleteAgentOK, error) {
	if params == nil {
		params = NewDeleteAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgent",
		Method:             "DELETE",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAgent updates agent
*/
func (a *Client) PatchAgent(id string, body *models.EnginePatchAgentRequest, opts ...ClientOption) (*PatchAgentOK, error) {
	params := NewPatchAgentParams().WithBody(body).WithID(id)
	return a.PatchAgentWithParams(params, opts...)
}

func (a *Client) PatchAgentWithParams(params *PatchAgentParams, opts ...ClientOption) (*PatchAgentOK, error) {
	if params == nil {
		params = NewPatchAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgent",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadAgent agents item
*/

func (a *Client) ReadAgent(params *ReadAgentParams, opts ...ClientOption) (*ReadAgentOK, error) {
	if params == nil {
		params = NewReadAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgent lists of agent
*/

func (a *Client) SearchAgent(params *SearchAgentParams, opts ...ClientOption) (*SearchAgentOK, error) {
	if params == nil {
		params = NewSearchAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentCallStatistics search agent call statistics API
*/

func (a *Client) SearchAgentCallStatistics(params *SearchAgentCallStatisticsParams, opts ...ClientOption) (*SearchAgentCallStatisticsOK, error) {
	if params == nil {
		params = NewSearchAgentCallStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentCallStatistics",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentCallStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentCallStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentCallStatisticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentInQueue search agent in queue API
*/

func (a *Client) SearchAgentInQueue(params *SearchAgentInQueueParams, opts ...ClientOption) (*SearchAgentInQueueOK, error) {
	if params == nil {
		params = NewSearchAgentInQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInQueue",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentInQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentInQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentInQueueStatistics search agent in queue statistics API
*/

func (a *Client) SearchAgentInQueueStatistics(params *SearchAgentInQueueStatisticsParams, opts ...ClientOption) (*SearchAgentInQueueStatisticsOK, error) {
	if params == nil {
		params = NewSearchAgentInQueueStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInQueueStatistics",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/statistics/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentInQueueStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInQueueStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentInQueueStatisticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentInTeam todos deprecated
*/

func (a *Client) SearchAgentInTeam(params *SearchAgentInTeamParams, opts ...ClientOption) (*SearchAgentInTeamOK, error) {
	if params == nil {
		params = NewSearchAgentInTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentInTeam",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{id}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentInTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentInTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentInTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentStateHistory search agent state history API
*/

func (a *Client) SearchAgentStateHistory(params *SearchAgentStateHistoryParams, opts ...ClientOption) (*SearchAgentStateHistoryOK, error) {
	if params == nil {
		params = NewSearchAgentStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStateHistory",
		Method:             "GET",
		PathPattern:        "/call_center/agents/states/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentStateHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentStateHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentStatusStatistic search agent status statistic API
*/

func (a *Client) SearchAgentStatusStatistic(params *SearchAgentStatusStatisticParams, opts ...ClientOption) (*SearchAgentStatusStatisticOK, error) {
	if params == nil {
		params = NewSearchAgentStatusStatisticParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStatusStatistic",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentStatusStatisticReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStatusStatisticOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentStatusStatisticDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentStatusStatisticItem search agent status statistic item API
*/

func (a *Client) SearchAgentStatusStatisticItem(params *SearchAgentStatusStatisticItemParams, opts ...ClientOption) (*SearchAgentStatusStatisticItemOK, error) {
	if params == nil {
		params = NewSearchAgentStatusStatisticItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentStatusStatisticItem",
		Method:             "GET",
		PathPattern:        "/call_center/agents/reports/status/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentStatusStatisticItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentStatusStatisticItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentStatusStatisticItemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchLookupUsersAgentNotExists searches lookup agent not exists user
*/

func (a *Client) SearchLookupUsersAgentNotExists(params *SearchLookupUsersAgentNotExistsParams, opts ...ClientOption) (*SearchLookupUsersAgentNotExistsOK, error) {
	if params == nil {
		params = NewSearchLookupUsersAgentNotExistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchLookupUsersAgentNotExists",
		Method:             "GET",
		PathPattern:        "/call_center/lookups/agents/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLookupUsersAgentNotExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLookupUsersAgentNotExistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchLookupUsersAgentNotExistsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchPauseCauseForAgent search pause cause for agent API
*/

func (a *Client) SearchPauseCauseForAgent(params *SearchPauseCauseForAgentParams, opts ...ClientOption) (*SearchPauseCauseForAgentOK, error) {
	if params == nil {
		params = NewSearchPauseCauseForAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchPauseCauseForAgent",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/pause_causes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchPauseCauseForAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPauseCauseForAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchPauseCauseForAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchUserStatus lists of user status
*/

func (a *Client) SearchUserStatus(params *SearchUserStatusParams, opts ...ClientOption) (*SearchUserStatusOK, error) {
	if params == nil {
		params = NewSearchUserStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchUserStatus",
		Method:             "GET",
		PathPattern:        "/call_center/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUserStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchUserStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAgent updates agent
*/
func (a *Client) UpdateAgent(id string, body *models.EngineUpdateAgentRequest, opts ...ClientOption) (*UpdateAgentOK, error) {
	params := NewUpdateAgentParams().WithBody(body).WithID(id)
	return a.UpdateAgentWithParams(params, opts...)
}

func (a *Client) UpdateAgentWithParams(params *UpdateAgentParams, opts ...ClientOption) (*UpdateAgentOK, error) {
	if params == nil {
		params = NewUpdateAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgent",
		Method:             "PUT",
		PathPattern:        "/call_center/agents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAgentStatus changes agent status
*/
func (a *Client) UpdateAgentStatus(id string, body *models.EngineAgentStatusRequest, opts ...ClientOption) (*UpdateAgentStatusOK, error) {
	params := NewUpdateAgentStatusParams().WithBody(body).WithID(id)
	return a.UpdateAgentStatusWithParams(params, opts...)
}

func (a *Client) UpdateAgentStatusWithParams(params *UpdateAgentStatusParams, opts ...ClientOption) (*UpdateAgentStatusOK, error) {
	if params == nil {
		params = NewUpdateAgentStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentStatus",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAgentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAgentStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
