// Code generated by go-swagger; DO NOT EDIT.

package agent_skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new agent skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAgentSkill(agentID string, body *models.EngineCreateAgentSkillRequest, opts ...ClientOption) (*CreateAgentSkillOK, error)
	CreateAgentSkillWithParams(params *CreateAgentSkillParams, opts ...ClientOption) (*CreateAgentSkillOK, error)

	CreateAgentSkills(agentID string, body *models.EngineCreateAgentSkillsRequest, opts ...ClientOption) (*CreateAgentSkillsOK, error)
	CreateAgentSkillsWithParams(params *CreateAgentSkillsParams, opts ...ClientOption) (*CreateAgentSkillsOK, error)

	DeleteAgentSkill(params *DeleteAgentSkillParams, opts ...ClientOption) (*DeleteAgentSkillOK, error)

	DeleteAgentSkills(params *DeleteAgentSkillsParams, opts ...ClientOption) (*DeleteAgentSkillsOK, error)

	PatchAgentSkill(params *PatchAgentSkillParams, opts ...ClientOption) (*PatchAgentSkillOK, error)

	PatchAgentSkills(agentID string, body *models.EnginePatchAgentSkillsRequest, opts ...ClientOption) (*PatchAgentSkillsOK, error)
	PatchAgentSkillsWithParams(params *PatchAgentSkillsParams, opts ...ClientOption) (*PatchAgentSkillsOK, error)

	ReadAgentSkill(params *ReadAgentSkillParams, opts ...ClientOption) (*ReadAgentSkillOK, error)

	SearchAgentSkill(params *SearchAgentSkillParams, opts ...ClientOption) (*SearchAgentSkillOK, error)

	SearchLookupAgentNotExistsSkill(params *SearchLookupAgentNotExistsSkillParams, opts ...ClientOption) (*SearchLookupAgentNotExistsSkillOK, error)

	UpdateAgentSkill(params *UpdateAgentSkillParams, opts ...ClientOption) (*UpdateAgentSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAgentSkill creates agent skill
*/
func (a *Client) CreateAgentSkill(agentID string, body *models.EngineCreateAgentSkillRequest, opts ...ClientOption) (*CreateAgentSkillOK, error) {
	params := NewCreateAgentSkillParams().WithAgentID(agentID).WithBody(body)
	return a.CreateAgentSkillWithParams(params, opts...)
}

func (a *Client) CreateAgentSkillWithParams(params *CreateAgentSkillParams, opts ...ClientOption) (*CreateAgentSkillOK, error) {
	if params == nil {
		params = NewCreateAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgentSkill",
		Method:             "POST",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAgentSkills create agent skills API
*/
func (a *Client) CreateAgentSkills(agentID string, body *models.EngineCreateAgentSkillsRequest, opts ...ClientOption) (*CreateAgentSkillsOK, error) {
	params := NewCreateAgentSkillsParams().WithAgentID(agentID).WithBody(body)
	return a.CreateAgentSkillsWithParams(params, opts...)
}

func (a *Client) CreateAgentSkillsWithParams(params *CreateAgentSkillsParams, opts ...ClientOption) (*CreateAgentSkillsOK, error) {
	if params == nil {
		params = NewCreateAgentSkillsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAgentSkills",
		Method:             "POST",
		PathPattern:        "/call_center/agents/{agent_id}/skills/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAgentSkillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentSkillsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAgentSkillsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAgentSkill removes agent skill
*/

func (a *Client) DeleteAgentSkill(params *DeleteAgentSkillParams, opts ...ClientOption) (*DeleteAgentSkillOK, error) {
	if params == nil {
		params = NewDeleteAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgentSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAgentSkills delete agent skills API
*/

func (a *Client) DeleteAgentSkills(params *DeleteAgentSkillsParams, opts ...ClientOption) (*DeleteAgentSkillsOK, error) {
	if params == nil {
		params = NewDeleteAgentSkillsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAgentSkills",
		Method:             "DELETE",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentSkillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAgentSkillsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAgentSkillsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAgentSkill patch agent skill API
*/

func (a *Client) PatchAgentSkill(params *PatchAgentSkillParams, opts ...ClientOption) (*PatchAgentSkillOK, error) {
	if params == nil {
		params = NewPatchAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgentSkill",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAgentSkills patch agent skills API
*/
func (a *Client) PatchAgentSkills(agentID string, body *models.EnginePatchAgentSkillsRequest, opts ...ClientOption) (*PatchAgentSkillsOK, error) {
	params := NewPatchAgentSkillsParams().WithAgentID(agentID).WithBody(body)
	return a.PatchAgentSkillsWithParams(params, opts...)
}

func (a *Client) PatchAgentSkillsWithParams(params *PatchAgentSkillsParams, opts ...ClientOption) (*PatchAgentSkillsOK, error) {
	if params == nil {
		params = NewPatchAgentSkillsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAgentSkills",
		Method:             "PATCH",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAgentSkillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAgentSkillsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAgentSkillsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadAgentSkill agents skill item
*/

func (a *Client) ReadAgentSkill(params *ReadAgentSkillParams, opts ...ClientOption) (*ReadAgentSkillOK, error) {
	if params == nil {
		params = NewReadAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAgentSkill",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAgentSkill lists of agent skill
*/

func (a *Client) SearchAgentSkill(params *SearchAgentSkillParams, opts ...ClientOption) (*SearchAgentSkillOK, error) {
	if params == nil {
		params = NewSearchAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAgentSkill",
		Method:             "GET",
		PathPattern:        "/call_center/agents/{agent_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchLookupAgentNotExistsSkill searches lookup agent not exists skill
*/

func (a *Client) SearchLookupAgentNotExistsSkill(params *SearchLookupAgentNotExistsSkillParams, opts ...ClientOption) (*SearchLookupAgentNotExistsSkillOK, error) {
	if params == nil {
		params = NewSearchLookupAgentNotExistsSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchLookupAgentNotExistsSkill",
		Method:             "GET",
		PathPattern:        "/call_center/lookups/agents/skills/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLookupAgentNotExistsSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLookupAgentNotExistsSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchLookupAgentNotExistsSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAgentSkill updates agent skill
*/

func (a *Client) UpdateAgentSkill(params *UpdateAgentSkillParams, opts ...ClientOption) (*UpdateAgentSkillOK, error) {
	if params == nil {
		params = NewUpdateAgentSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAgentSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/agents/{agent_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAgentSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAgentSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAgentSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
