// Code generated by go-swagger; DO NOT EDIT.

package agent_working_conditions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new agent working conditions service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent working conditions service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AgentWorkingConditionsServiceReadAgentWorkingConditions(agentID string, opts ...ClientOption) (*AgentWorkingConditionsServiceReadAgentWorkingConditionsOK, error)
	AgentWorkingConditionsServiceReadAgentWorkingConditionsWithParams(params *AgentWorkingConditionsServiceReadAgentWorkingConditionsParams, opts ...ClientOption) (*AgentWorkingConditionsServiceReadAgentWorkingConditionsOK, error)

	AgentWorkingConditionsServiceUpdateAgentWorkingConditions(agentID string, body *models.AgentWorkingConditionsServiceUpdateAgentWorkingConditionsParamsBody, opts ...ClientOption) (*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsOK, error)
	AgentWorkingConditionsServiceUpdateAgentWorkingConditionsWithParams(params *AgentWorkingConditionsServiceUpdateAgentWorkingConditionsParams, opts ...ClientOption) (*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AgentWorkingConditionsServiceReadAgentWorkingConditions agent working conditions service read agent working conditions API
*/
func (a *Client) AgentWorkingConditionsServiceReadAgentWorkingConditions(agentID string, opts ...ClientOption) (*AgentWorkingConditionsServiceReadAgentWorkingConditionsOK, error) {
	params := NewAgentWorkingConditionsServiceReadAgentWorkingConditionsParams().WithAgentID(agentID)
	return a.AgentWorkingConditionsServiceReadAgentWorkingConditionsWithParams(params, opts...)
}

func (a *Client) AgentWorkingConditionsServiceReadAgentWorkingConditionsWithParams(params *AgentWorkingConditionsServiceReadAgentWorkingConditionsParams, opts ...ClientOption) (*AgentWorkingConditionsServiceReadAgentWorkingConditionsOK, error) {
	if params == nil {
		params = NewAgentWorkingConditionsServiceReadAgentWorkingConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentWorkingConditionsService_ReadAgentWorkingConditions",
		Method:             "GET",
		PathPattern:        "/wfm/agents/{agent_id}/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentWorkingConditionsServiceReadAgentWorkingConditionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentWorkingConditionsServiceReadAgentWorkingConditionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentWorkingConditionsServiceReadAgentWorkingConditionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AgentWorkingConditionsServiceUpdateAgentWorkingConditions agent working conditions service update agent working conditions API
*/
func (a *Client) AgentWorkingConditionsServiceUpdateAgentWorkingConditions(agentID string, body *models.AgentWorkingConditionsServiceUpdateAgentWorkingConditionsParamsBody, opts ...ClientOption) (*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsOK, error) {
	params := NewAgentWorkingConditionsServiceUpdateAgentWorkingConditionsParams().WithAgentID(agentID).WithBody(body)
	return a.AgentWorkingConditionsServiceUpdateAgentWorkingConditionsWithParams(params, opts...)
}

func (a *Client) AgentWorkingConditionsServiceUpdateAgentWorkingConditionsWithParams(params *AgentWorkingConditionsServiceUpdateAgentWorkingConditionsParams, opts ...ClientOption) (*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsOK, error) {
	if params == nil {
		params = NewAgentWorkingConditionsServiceUpdateAgentWorkingConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AgentWorkingConditionsService_UpdateAgentWorkingConditions",
		Method:             "PUT",
		PathPattern:        "/wfm/agents/{agent_id}/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AgentWorkingConditionsServiceUpdateAgentWorkingConditionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentWorkingConditionsServiceUpdateAgentWorkingConditionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
