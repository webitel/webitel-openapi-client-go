// Code generated by go-swagger; DO NOT EDIT.

package audit_form_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new audit form service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for audit form service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuditForm(body *models.EngineCreateAuditFormRequest, opts ...ClientOption) (*CreateAuditFormOK, error)
	CreateAuditFormWithParams(params *CreateAuditFormParams, opts ...ClientOption) (*CreateAuditFormOK, error)

	CreateAuditFormRate(body *models.EngineCreateAuditFormRateRequest, opts ...ClientOption) (*CreateAuditFormRateOK, error)
	CreateAuditFormRateWithParams(params *CreateAuditFormRateParams, opts ...ClientOption) (*CreateAuditFormRateOK, error)

	DeleteAuditForm(id int32, opts ...ClientOption) (*DeleteAuditFormOK, error)
	DeleteAuditFormWithParams(params *DeleteAuditFormParams, opts ...ClientOption) (*DeleteAuditFormOK, error)

	PatchAuditForm(id int32, body *models.EnginePatchAuditFormRequest, opts ...ClientOption) (*PatchAuditFormOK, error)
	PatchAuditFormWithParams(params *PatchAuditFormParams, opts ...ClientOption) (*PatchAuditFormOK, error)

	ReadAuditForm(id int32, opts ...ClientOption) (*ReadAuditFormOK, error)
	ReadAuditFormWithParams(params *ReadAuditFormParams, opts ...ClientOption) (*ReadAuditFormOK, error)

	ReadAuditRate(id string, opts ...ClientOption) (*ReadAuditRateOK, error)
	ReadAuditRateWithParams(params *ReadAuditRateParams, opts ...ClientOption) (*ReadAuditRateOK, error)

	SearchAuditForm(params *SearchAuditFormParams, opts ...ClientOption) (*SearchAuditFormOK, error)

	SearchAuditRate(params *SearchAuditRateParams, opts ...ClientOption) (*SearchAuditRateOK, error)

	UpdateAuditForm(id int32, body *models.EngineUpdateAuditFormRequest, opts ...ClientOption) (*UpdateAuditFormOK, error)
	UpdateAuditFormWithParams(params *UpdateAuditFormParams, opts ...ClientOption) (*UpdateAuditFormOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAuditForm create audit form API
*/
func (a *Client) CreateAuditForm(body *models.EngineCreateAuditFormRequest, opts ...ClientOption) (*CreateAuditFormOK, error) {
	params := NewCreateAuditFormParams().WithBody(body)
	return a.CreateAuditFormWithParams(params, opts...)
}

func (a *Client) CreateAuditFormWithParams(params *CreateAuditFormParams, opts ...ClientOption) (*CreateAuditFormOK, error) {
	if params == nil {
		params = NewCreateAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAuditForm",
		Method:             "POST",
		PathPattern:        "/call_center/audit/forms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAuditFormRate create audit form rate API
*/
func (a *Client) CreateAuditFormRate(body *models.EngineCreateAuditFormRateRequest, opts ...ClientOption) (*CreateAuditFormRateOK, error) {
	params := NewCreateAuditFormRateParams().WithBody(body)
	return a.CreateAuditFormRateWithParams(params, opts...)
}

func (a *Client) CreateAuditFormRateWithParams(params *CreateAuditFormRateParams, opts ...ClientOption) (*CreateAuditFormRateOK, error) {
	if params == nil {
		params = NewCreateAuditFormRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAuditFormRate",
		Method:             "POST",
		PathPattern:        "/call_center/audit/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuditFormRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuditFormRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAuditFormRateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAuditForm delete audit form API
*/
func (a *Client) DeleteAuditForm(id int32, opts ...ClientOption) (*DeleteAuditFormOK, error) {
	params := NewDeleteAuditFormParams().WithID(id)
	return a.DeleteAuditFormWithParams(params, opts...)
}

func (a *Client) DeleteAuditFormWithParams(params *DeleteAuditFormParams, opts ...ClientOption) (*DeleteAuditFormOK, error) {
	if params == nil {
		params = NewDeleteAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAuditForm",
		Method:             "DELETE",
		PathPattern:        "/call_center/audit/forms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAuditForm patch audit form API
*/
func (a *Client) PatchAuditForm(id int32, body *models.EnginePatchAuditFormRequest, opts ...ClientOption) (*PatchAuditFormOK, error) {
	params := NewPatchAuditFormParams().WithBody(body).WithID(id)
	return a.PatchAuditFormWithParams(params, opts...)
}

func (a *Client) PatchAuditFormWithParams(params *PatchAuditFormParams, opts ...ClientOption) (*PatchAuditFormOK, error) {
	if params == nil {
		params = NewPatchAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAuditForm",
		Method:             "PATCH",
		PathPattern:        "/call_center/audit/forms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadAuditForm read audit form API
*/
func (a *Client) ReadAuditForm(id int32, opts ...ClientOption) (*ReadAuditFormOK, error) {
	params := NewReadAuditFormParams().WithID(id)
	return a.ReadAuditFormWithParams(params, opts...)
}

func (a *Client) ReadAuditFormWithParams(params *ReadAuditFormParams, opts ...ClientOption) (*ReadAuditFormOK, error) {
	if params == nil {
		params = NewReadAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAuditForm",
		Method:             "GET",
		PathPattern:        "/call_center/audit/forms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadAuditRate read audit rate API
*/
func (a *Client) ReadAuditRate(id string, opts ...ClientOption) (*ReadAuditRateOK, error) {
	params := NewReadAuditRateParams().WithID(id)
	return a.ReadAuditRateWithParams(params, opts...)
}

func (a *Client) ReadAuditRateWithParams(params *ReadAuditRateParams, opts ...ClientOption) (*ReadAuditRateOK, error) {
	if params == nil {
		params = NewReadAuditRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadAuditRate",
		Method:             "GET",
		PathPattern:        "/call_center/audit/rate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadAuditRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAuditRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadAuditRateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAuditForm search audit form API
*/

func (a *Client) SearchAuditForm(params *SearchAuditFormParams, opts ...ClientOption) (*SearchAuditFormOK, error) {
	if params == nil {
		params = NewSearchAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAuditForm",
		Method:             "GET",
		PathPattern:        "/call_center/audit/forms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchAuditRate search audit rate API
*/

func (a *Client) SearchAuditRate(params *SearchAuditRateParams, opts ...ClientOption) (*SearchAuditRateOK, error) {
	if params == nil {
		params = NewSearchAuditRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAuditRate",
		Method:             "GET",
		PathPattern:        "/call_center/audit/forms/{form_id}/rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAuditRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAuditRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAuditRateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAuditForm update audit form API
*/
func (a *Client) UpdateAuditForm(id int32, body *models.EngineUpdateAuditFormRequest, opts ...ClientOption) (*UpdateAuditFormOK, error) {
	params := NewUpdateAuditFormParams().WithBody(body).WithID(id)
	return a.UpdateAuditFormWithParams(params, opts...)
}

func (a *Client) UpdateAuditFormWithParams(params *UpdateAuditFormParams, opts ...ClientOption) (*UpdateAuditFormOK, error) {
	if params == nil {
		params = NewUpdateAuditFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAuditForm",
		Method:             "PUT",
		PathPattern:        "/call_center/audit/forms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuditFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuditFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAuditFormDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
