// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAuthSignupParams creates a new AuthSignupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAuthSignupParams() *AuthSignupParams {
	return &AuthSignupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAuthSignupParamsWithTimeout creates a new AuthSignupParams object
// with the ability to set a timeout on a request.
func NewAuthSignupParamsWithTimeout(timeout time.Duration) *AuthSignupParams {
	return &AuthSignupParams{
		timeout: timeout,
	}
}

// NewAuthSignupParamsWithContext creates a new AuthSignupParams object
// with the ability to set a context for a request.
func NewAuthSignupParamsWithContext(ctx context.Context) *AuthSignupParams {
	return &AuthSignupParams{
		Context: ctx,
	}
}

// NewAuthSignupParamsWithHTTPClient creates a new AuthSignupParams object
// with the ability to set a custom HTTPClient for a request.
func NewAuthSignupParamsWithHTTPClient(client *http.Client) *AuthSignupParams {
	return &AuthSignupParams{
		HTTPClient: client,
	}
}

/*
AuthSignupParams contains all the parameters to send to the API endpoint

	for the auth signup operation.

	Typically these are written to a http.Request.
*/
type AuthSignupParams struct {

	/* Certificate.

	   license/certificate

	   Format: byte
	*/
	Certificate *strfmt.Base64

	/* Domain.

	   domain name
	*/
	Domain *string

	/* Mobile.

	   OPTIONAL. Mobile device /login request ?
	*/
	Mobile *bool

	/* Password.

	   user password
	*/
	Password *string

	/* Scope.

	   scope request control
	*/
	Scope []string

	/* Username.

	   username
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the auth signup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthSignupParams) WithDefaults() *AuthSignupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the auth signup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthSignupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the auth signup params
func (o *AuthSignupParams) WithTimeout(timeout time.Duration) *AuthSignupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the auth signup params
func (o *AuthSignupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the auth signup params
func (o *AuthSignupParams) WithContext(ctx context.Context) *AuthSignupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the auth signup params
func (o *AuthSignupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the auth signup params
func (o *AuthSignupParams) WithHTTPClient(client *http.Client) *AuthSignupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the auth signup params
func (o *AuthSignupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertificate adds the certificate to the auth signup params
func (o *AuthSignupParams) WithCertificate(certificate *strfmt.Base64) *AuthSignupParams {
	o.SetCertificate(certificate)
	return o
}

// SetCertificate adds the certificate to the auth signup params
func (o *AuthSignupParams) SetCertificate(certificate *strfmt.Base64) {
	o.Certificate = certificate
}

// WithDomain adds the domain to the auth signup params
func (o *AuthSignupParams) WithDomain(domain *string) *AuthSignupParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the auth signup params
func (o *AuthSignupParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithMobile adds the mobile to the auth signup params
func (o *AuthSignupParams) WithMobile(mobile *bool) *AuthSignupParams {
	o.SetMobile(mobile)
	return o
}

// SetMobile adds the mobile to the auth signup params
func (o *AuthSignupParams) SetMobile(mobile *bool) {
	o.Mobile = mobile
}

// WithPassword adds the password to the auth signup params
func (o *AuthSignupParams) WithPassword(password *string) *AuthSignupParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the auth signup params
func (o *AuthSignupParams) SetPassword(password *string) {
	o.Password = password
}

// WithScope adds the scope to the auth signup params
func (o *AuthSignupParams) WithScope(scope []string) *AuthSignupParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the auth signup params
func (o *AuthSignupParams) SetScope(scope []string) {
	o.Scope = scope
}

// WithUsername adds the username to the auth signup params
func (o *AuthSignupParams) WithUsername(username *string) *AuthSignupParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the auth signup params
func (o *AuthSignupParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *AuthSignupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Certificate != nil {

		// query param certificate
		var qrCertificate strfmt.Base64

		if o.Certificate != nil {
			qrCertificate = *o.Certificate
		}
		qCertificate := qrCertificate.String()
		if qCertificate != "" {

			if err := r.SetQueryParam("certificate", qCertificate); err != nil {
				return err
			}
		}
	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.Mobile != nil {

		// query param mobile
		var qrMobile bool

		if o.Mobile != nil {
			qrMobile = *o.Mobile
		}
		qMobile := swag.FormatBool(qrMobile)
		if qMobile != "" {

			if err := r.SetQueryParam("mobile", qMobile); err != nil {
				return err
			}
		}
	}

	if o.Password != nil {

		// query param password
		var qrPassword string

		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {

			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// binding items for scope
		joinedScope := o.bindParamScope(reg)

		// query array param scope
		if err := r.SetQueryParam("scope", joinedScope...); err != nil {
			return err
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamAuthSignup binds the parameter scope
func (o *AuthSignupParams) bindParamScope(formats strfmt.Registry) []string {
	scopeIR := o.Scope

	var scopeIC []string
	for _, scopeIIR := range scopeIR { // explode []string

		scopeIIV := scopeIIR // string as string
		scopeIC = append(scopeIC, scopeIIV)
	}

	// items.CollectionFormat: "multi"
	scopeIS := swag.JoinByFormat(scopeIC, "multi")

	return scopeIS
}
