// Code generated by go-swagger; DO NOT EDIT.

package call_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new call service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for call service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregateHistoryCall(body *models.EngineAggregateHistoryCallRequest, opts ...ClientOption) (*AggregateHistoryCallOK, error)
	AggregateHistoryCallWithParams(params *AggregateHistoryCallParams, opts ...ClientOption) (*AggregateHistoryCallOK, error)

	BlindTransferCall(id string, body *models.EngineBlindTransferCallRequest, opts ...ClientOption) (*BlindTransferCallOK, error)
	BlindTransferCallWithParams(params *BlindTransferCallParams, opts ...ClientOption) (*BlindTransferCallOK, error)

	ConfirmPush(id string, opts ...ClientOption) (*ConfirmPushOK, error)
	ConfirmPushWithParams(params *ConfirmPushParams, opts ...ClientOption) (*ConfirmPushOK, error)

	CreateCall(body *models.EngineCreateCallRequest, opts ...ClientOption) (*CreateCallOK, error)
	CreateCallWithParams(params *CreateCallParams, opts ...ClientOption) (*CreateCallOK, error)

	CreateCallAnnotation(callID string, body *models.EngineCreateCallAnnotationRequest, opts ...ClientOption) (*CreateCallAnnotationOK, error)
	CreateCallAnnotationWithParams(params *CreateCallAnnotationParams, opts ...ClientOption) (*CreateCallAnnotationOK, error)

	DeleteCallAnnotation(id string, callID string, opts ...ClientOption) (*DeleteCallAnnotationOK, error)
	DeleteCallAnnotationWithParams(params *DeleteCallAnnotationParams, opts ...ClientOption) (*DeleteCallAnnotationOK, error)

	DtmfCall(id string, body *models.EngineDtmfCallRequest, opts ...ClientOption) (*DtmfCallOK, error)
	DtmfCallWithParams(params *DtmfCallParams, opts ...ClientOption) (*DtmfCallOK, error)

	EavesdropCall(id string, body *models.EngineEavesdropCallRequest, opts ...ClientOption) (*EavesdropCallOK, error)
	EavesdropCallWithParams(params *EavesdropCallParams, opts ...ClientOption) (*EavesdropCallOK, error)

	HangupCall(id string, body *models.EngineHangupCallRequest, opts ...ClientOption) (*HangupCallOK, error)
	HangupCallWithParams(params *HangupCallParams, opts ...ClientOption) (*HangupCallOK, error)

	HoldCall(id string, body *models.EngineUserCallRequest, opts ...ClientOption) (*HoldCallOK, error)
	HoldCallWithParams(params *HoldCallParams, opts ...ClientOption) (*HoldCallOK, error)

	PatchHistoryCall(id string, body *models.EnginePatchHistoryCallRequest, opts ...ClientOption) (*PatchHistoryCallOK, error)
	PatchHistoryCallWithParams(params *PatchHistoryCallParams, opts ...ClientOption) (*PatchHistoryCallOK, error)

	ReadCall(params *ReadCallParams, opts ...ClientOption) (*ReadCallOK, error)

	RedialCall(callID string, body *models.EngineRedialCallRequest, opts ...ClientOption) (*RedialCallOK, error)
	RedialCallWithParams(params *RedialCallParams, opts ...ClientOption) (*RedialCallOK, error)

	SearchActiveCall(params *SearchActiveCallParams, opts ...ClientOption) (*SearchActiveCallOK, error)

	SearchHistoryCall(params *SearchHistoryCallParams, opts ...ClientOption) (*SearchHistoryCallOK, error)

	SearchHistoryCallPost(body *models.EngineSearchHistoryCallRequest, opts ...ClientOption) (*SearchHistoryCallPostOK, error)
	SearchHistoryCallPostWithParams(params *SearchHistoryCallPostParams, opts ...ClientOption) (*SearchHistoryCallPostOK, error)

	SetVariablesCall(id string, body *models.EngineSetVariablesCallRequest, opts ...ClientOption) (*SetVariablesCallOK, error)
	SetVariablesCallWithParams(params *SetVariablesCallParams, opts ...ClientOption) (*SetVariablesCallOK, error)

	UnHoldCall(id string, body *models.EngineUserCallRequest, opts ...ClientOption) (*UnHoldCallOK, error)
	UnHoldCallWithParams(params *UnHoldCallParams, opts ...ClientOption) (*UnHoldCallOK, error)

	UpdateCallAnnotation(params *UpdateCallAnnotationParams, opts ...ClientOption) (*UpdateCallAnnotationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregateHistoryCall aggregate history call API
*/
func (a *Client) AggregateHistoryCall(body *models.EngineAggregateHistoryCallRequest, opts ...ClientOption) (*AggregateHistoryCallOK, error) {
	params := NewAggregateHistoryCallParams().WithBody(body)
	return a.AggregateHistoryCallWithParams(params, opts...)
}

func (a *Client) AggregateHistoryCallWithParams(params *AggregateHistoryCallParams, opts ...ClientOption) (*AggregateHistoryCallOK, error) {
	if params == nil {
		params = NewAggregateHistoryCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateHistoryCall",
		Method:             "POST",
		PathPattern:        "/calls/history/aggregate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateHistoryCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateHistoryCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregateHistoryCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BlindTransferCall blind transfer call API
*/
func (a *Client) BlindTransferCall(id string, body *models.EngineBlindTransferCallRequest, opts ...ClientOption) (*BlindTransferCallOK, error) {
	params := NewBlindTransferCallParams().WithBody(body).WithID(id)
	return a.BlindTransferCallWithParams(params, opts...)
}

func (a *Client) BlindTransferCallWithParams(params *BlindTransferCallParams, opts ...ClientOption) (*BlindTransferCallOK, error) {
	if params == nil {
		params = NewBlindTransferCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BlindTransferCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BlindTransferCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BlindTransferCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BlindTransferCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfirmPush calls item
*/
func (a *Client) ConfirmPush(id string, opts ...ClientOption) (*ConfirmPushOK, error) {
	params := NewConfirmPushParams().WithID(id)
	return a.ConfirmPushWithParams(params, opts...)
}

func (a *Client) ConfirmPushWithParams(params *ConfirmPushParams, opts ...ClientOption) (*ConfirmPushOK, error) {
	if params == nil {
		params = NewConfirmPushParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfirmPush",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/confirm_push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPushOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfirmPushDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCall create call API
*/
func (a *Client) CreateCall(body *models.EngineCreateCallRequest, opts ...ClientOption) (*CreateCallOK, error) {
	params := NewCreateCallParams().WithBody(body)
	return a.CreateCallWithParams(params, opts...)
}

func (a *Client) CreateCallWithParams(params *CreateCallParams, opts ...ClientOption) (*CreateCallOK, error) {
	if params == nil {
		params = NewCreateCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCall",
		Method:             "POST",
		PathPattern:        "/calls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCallAnnotation create call annotation API
*/
func (a *Client) CreateCallAnnotation(callID string, body *models.EngineCreateCallAnnotationRequest, opts ...ClientOption) (*CreateCallAnnotationOK, error) {
	params := NewCreateCallAnnotationParams().WithBody(body).WithCallID(callID)
	return a.CreateCallAnnotationWithParams(params, opts...)
}

func (a *Client) CreateCallAnnotationWithParams(params *CreateCallAnnotationParams, opts ...ClientOption) (*CreateCallAnnotationOK, error) {
	if params == nil {
		params = NewCreateCallAnnotationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCallAnnotation",
		Method:             "POST",
		PathPattern:        "/calls/history/{call_id}/annotation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCallAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCallAnnotationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCallAnnotationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCallAnnotation delete call annotation API
*/
func (a *Client) DeleteCallAnnotation(id string, callID string, opts ...ClientOption) (*DeleteCallAnnotationOK, error) {
	params := NewDeleteCallAnnotationParams().WithCallID(callID).WithID(id)
	return a.DeleteCallAnnotationWithParams(params, opts...)
}

func (a *Client) DeleteCallAnnotationWithParams(params *DeleteCallAnnotationParams, opts ...ClientOption) (*DeleteCallAnnotationOK, error) {
	if params == nil {
		params = NewDeleteCallAnnotationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCallAnnotation",
		Method:             "DELETE",
		PathPattern:        "/calls/history/{call_id}/annotation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCallAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCallAnnotationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCallAnnotationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DtmfCall dtmf call API
*/
func (a *Client) DtmfCall(id string, body *models.EngineDtmfCallRequest, opts ...ClientOption) (*DtmfCallOK, error) {
	params := NewDtmfCallParams().WithBody(body).WithID(id)
	return a.DtmfCallWithParams(params, opts...)
}

func (a *Client) DtmfCallWithParams(params *DtmfCallParams, opts ...ClientOption) (*DtmfCallOK, error) {
	if params == nil {
		params = NewDtmfCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DtmfCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/dtmf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DtmfCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DtmfCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DtmfCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EavesdropCall eavesdrop call API
*/
func (a *Client) EavesdropCall(id string, body *models.EngineEavesdropCallRequest, opts ...ClientOption) (*EavesdropCallOK, error) {
	params := NewEavesdropCallParams().WithBody(body).WithID(id)
	return a.EavesdropCallWithParams(params, opts...)
}

func (a *Client) EavesdropCallWithParams(params *EavesdropCallParams, opts ...ClientOption) (*EavesdropCallOK, error) {
	if params == nil {
		params = NewEavesdropCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EavesdropCall",
		Method:             "POST",
		PathPattern:        "/calls/active/{id}/eavesdrop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EavesdropCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EavesdropCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EavesdropCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HangupCall hangup call API
*/
func (a *Client) HangupCall(id string, body *models.EngineHangupCallRequest, opts ...ClientOption) (*HangupCallOK, error) {
	params := NewHangupCallParams().WithBody(body).WithID(id)
	return a.HangupCallWithParams(params, opts...)
}

func (a *Client) HangupCallWithParams(params *HangupCallParams, opts ...ClientOption) (*HangupCallOK, error) {
	if params == nil {
		params = NewHangupCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HangupCall",
		Method:             "DELETE",
		PathPattern:        "/calls/active/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HangupCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HangupCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HangupCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HoldCall hold call API
*/
func (a *Client) HoldCall(id string, body *models.EngineUserCallRequest, opts ...ClientOption) (*HoldCallOK, error) {
	params := NewHoldCallParams().WithBody(body).WithID(id)
	return a.HoldCallWithParams(params, opts...)
}

func (a *Client) HoldCallWithParams(params *HoldCallParams, opts ...ClientOption) (*HoldCallOK, error) {
	if params == nil {
		params = NewHoldCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HoldCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/hold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HoldCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HoldCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HoldCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHistoryCall patch history call API
*/
func (a *Client) PatchHistoryCall(id string, body *models.EnginePatchHistoryCallRequest, opts ...ClientOption) (*PatchHistoryCallOK, error) {
	params := NewPatchHistoryCallParams().WithBody(body).WithID(id)
	return a.PatchHistoryCallWithParams(params, opts...)
}

func (a *Client) PatchHistoryCallWithParams(params *PatchHistoryCallParams, opts ...ClientOption) (*PatchHistoryCallOK, error) {
	if params == nil {
		params = NewPatchHistoryCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchHistoryCall",
		Method:             "PATCH",
		PathPattern:        "/calls/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHistoryCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHistoryCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHistoryCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadCall calls item
*/

func (a *Client) ReadCall(params *ReadCallParams, opts ...ClientOption) (*ReadCallOK, error) {
	if params == nil {
		params = NewReadCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCall",
		Method:             "GET",
		PathPattern:        "/calls/active/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RedialCall redial call API
*/
func (a *Client) RedialCall(callID string, body *models.EngineRedialCallRequest, opts ...ClientOption) (*RedialCallOK, error) {
	params := NewRedialCallParams().WithBody(body).WithCallID(callID)
	return a.RedialCallWithParams(params, opts...)
}

func (a *Client) RedialCallWithParams(params *RedialCallParams, opts ...ClientOption) (*RedialCallOK, error) {
	if params == nil {
		params = NewRedialCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RedialCall",
		Method:             "POST",
		PathPattern:        "/calls/history/{call_id}/redial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedialCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedialCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RedialCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchActiveCall search active call API
*/

func (a *Client) SearchActiveCall(params *SearchActiveCallParams, opts ...ClientOption) (*SearchActiveCallOK, error) {
	if params == nil {
		params = NewSearchActiveCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchActiveCall",
		Method:             "GET",
		PathPattern:        "/calls/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchActiveCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchActiveCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchActiveCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchHistoryCall lists of call
*/

func (a *Client) SearchHistoryCall(params *SearchHistoryCallParams, opts ...ClientOption) (*SearchHistoryCallOK, error) {
	if params == nil {
		params = NewSearchHistoryCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchHistoryCall",
		Method:             "GET",
		PathPattern:        "/calls/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchHistoryCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchHistoryCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchHistoryCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchHistoryCallPost lists of call
*/
func (a *Client) SearchHistoryCallPost(body *models.EngineSearchHistoryCallRequest, opts ...ClientOption) (*SearchHistoryCallPostOK, error) {
	params := NewSearchHistoryCallPostParams().WithBody(body)
	return a.SearchHistoryCallPostWithParams(params, opts...)
}

func (a *Client) SearchHistoryCallPostWithParams(params *SearchHistoryCallPostParams, opts ...ClientOption) (*SearchHistoryCallPostOK, error) {
	if params == nil {
		params = NewSearchHistoryCallPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchHistoryCallPost",
		Method:             "POST",
		PathPattern:        "/calls/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchHistoryCallPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchHistoryCallPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchHistoryCallPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetVariablesCall set variables call API
*/
func (a *Client) SetVariablesCall(id string, body *models.EngineSetVariablesCallRequest, opts ...ClientOption) (*SetVariablesCallOK, error) {
	params := NewSetVariablesCallParams().WithBody(body).WithID(id)
	return a.SetVariablesCallWithParams(params, opts...)
}

func (a *Client) SetVariablesCallWithParams(params *SetVariablesCallParams, opts ...ClientOption) (*SetVariablesCallOK, error) {
	if params == nil {
		params = NewSetVariablesCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SetVariablesCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVariablesCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVariablesCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetVariablesCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnHoldCall un hold call API
*/
func (a *Client) UnHoldCall(id string, body *models.EngineUserCallRequest, opts ...ClientOption) (*UnHoldCallOK, error) {
	params := NewUnHoldCallParams().WithBody(body).WithID(id)
	return a.UnHoldCallWithParams(params, opts...)
}

func (a *Client) UnHoldCallWithParams(params *UnHoldCallParams, opts ...ClientOption) (*UnHoldCallOK, error) {
	if params == nil {
		params = NewUnHoldCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnHoldCall",
		Method:             "PATCH",
		PathPattern:        "/calls/active/{id}/unhold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnHoldCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnHoldCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnHoldCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCallAnnotation update call annotation API
*/

func (a *Client) UpdateCallAnnotation(params *UpdateCallAnnotationParams, opts ...ClientOption) (*UpdateCallAnnotationOK, error) {
	if params == nil {
		params = NewUpdateCallAnnotationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCallAnnotation",
		Method:             "PUT",
		PathPattern:        "/calls/history/{call_id}/annotation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCallAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCallAnnotationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCallAnnotationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
