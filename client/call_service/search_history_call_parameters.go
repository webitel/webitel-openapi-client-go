// Code generated by go-swagger; DO NOT EDIT.

package call_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchHistoryCallParams creates a new SearchHistoryCallParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchHistoryCallParams() *SearchHistoryCallParams {
	return &SearchHistoryCallParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchHistoryCallParamsWithTimeout creates a new SearchHistoryCallParams object
// with the ability to set a timeout on a request.
func NewSearchHistoryCallParamsWithTimeout(timeout time.Duration) *SearchHistoryCallParams {
	return &SearchHistoryCallParams{
		timeout: timeout,
	}
}

// NewSearchHistoryCallParamsWithContext creates a new SearchHistoryCallParams object
// with the ability to set a context for a request.
func NewSearchHistoryCallParamsWithContext(ctx context.Context) *SearchHistoryCallParams {
	return &SearchHistoryCallParams{
		Context: ctx,
	}
}

// NewSearchHistoryCallParamsWithHTTPClient creates a new SearchHistoryCallParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchHistoryCallParamsWithHTTPClient(client *http.Client) *SearchHistoryCallParams {
	return &SearchHistoryCallParams{
		HTTPClient: client,
	}
}

/*
SearchHistoryCallParams contains all the parameters to send to the API endpoint

	for the search history call operation.

	Typically these are written to a http.Request.
*/
type SearchHistoryCallParams struct {

	// AgentDescription.
	AgentDescription *string

	// AgentID.
	AgentID []string

	// AmdAiResult.
	AmdAiResult []string

	// AmdResult.
	AmdResult []string

	// AnsweredAtFrom.
	//
	// Format: int64
	AnsweredAtFrom *string

	// AnsweredAtTo.
	//
	// Format: int64
	AnsweredAtTo *string

	// Cause.
	Cause []string

	// ContactID.
	ContactID []string

	// CreatedAtFrom.
	//
	// Format: int64
	CreatedAtFrom *string

	// CreatedAtTo.
	//
	// Format: int64
	CreatedAtTo *string

	// DependencyID.
	DependencyID *string

	// Direction.
	Direction *string

	// Directions.
	Directions []string

	// DomainID.
	//
	// Format: int64
	DomainID *string

	// DurationFrom.
	//
	// Format: int64
	DurationFrom *string

	// DurationTo.
	//
	// Format: int64
	DurationTo *string

	// Fields.
	Fields []string

	// Fts.
	Fts *string

	// GatewayID.
	GatewayID []string

	// GranteeID.
	GranteeID []string

	// HasFile.
	//
	// Format: boolean
	HasFile *bool

	// HasTranscript.
	//
	// Format: boolean
	HasTranscript *bool

	// HasTransfer.
	//
	// Format: boolean
	HasTransfer *bool

	// ID.
	ID []string

	// MemberID.
	MemberID []string

	// Missed.
	//
	// Format: boolean
	Missed *bool

	// Number.
	Number *string

	// OwnerID.
	OwnerID []string

	// Page.
	//
	// Format: int32
	Page *int32

	// ParentID.
	ParentID *string

	// Q.
	Q *string

	// QueueID.
	QueueID []string

	// Rated.
	//
	// Format: boolean
	Rated *bool

	// RatedBy.
	RatedBy []string

	// RatedUser.
	RatedUser []string

	// SchemaID.
	SchemaID []int32

	// ScoreOptionalFrom.
	//
	// Format: int64
	ScoreOptionalFrom *string

	// ScoreOptionalTo.
	//
	// Format: int64
	ScoreOptionalTo *string

	// ScoreRequiredFrom.
	//
	// Format: int64
	ScoreRequiredFrom *string

	// ScoreRequiredTo.
	//
	// Format: int64
	ScoreRequiredTo *string

	// Size.
	//
	// Format: int32
	Size *int32

	// SkipParent.
	//
	// Format: boolean
	SkipParent *bool

	// Sort.
	Sort *string

	// StoredAtFrom.
	//
	// Format: int64
	StoredAtFrom *string

	// StoredAtTo.
	//
	// Format: int64
	StoredAtTo *string

	// Tags.
	Tags []string

	// TalkFrom.
	//
	// Format: int64
	TalkFrom *string

	// TalkTo.
	//
	// Format: int64
	TalkTo *string

	// TeamID.
	TeamID []string

	// Timeline.
	//
	// Format: boolean
	Timeline *bool

	// TransferFrom.
	TransferFrom []string

	// TransferTo.
	TransferTo []string

	// UserID.
	UserID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search history call params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchHistoryCallParams) WithDefaults() *SearchHistoryCallParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search history call params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchHistoryCallParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search history call params
func (o *SearchHistoryCallParams) WithTimeout(timeout time.Duration) *SearchHistoryCallParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search history call params
func (o *SearchHistoryCallParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search history call params
func (o *SearchHistoryCallParams) WithContext(ctx context.Context) *SearchHistoryCallParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search history call params
func (o *SearchHistoryCallParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search history call params
func (o *SearchHistoryCallParams) WithHTTPClient(client *http.Client) *SearchHistoryCallParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search history call params
func (o *SearchHistoryCallParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentDescription adds the agentDescription to the search history call params
func (o *SearchHistoryCallParams) WithAgentDescription(agentDescription *string) *SearchHistoryCallParams {
	o.SetAgentDescription(agentDescription)
	return o
}

// SetAgentDescription adds the agentDescription to the search history call params
func (o *SearchHistoryCallParams) SetAgentDescription(agentDescription *string) {
	o.AgentDescription = agentDescription
}

// WithAgentID adds the agentID to the search history call params
func (o *SearchHistoryCallParams) WithAgentID(agentID []string) *SearchHistoryCallParams {
	o.SetAgentID(agentID)
	return o
}

// SetAgentID adds the agentId to the search history call params
func (o *SearchHistoryCallParams) SetAgentID(agentID []string) {
	o.AgentID = agentID
}

// WithAmdAiResult adds the amdAiResult to the search history call params
func (o *SearchHistoryCallParams) WithAmdAiResult(amdAiResult []string) *SearchHistoryCallParams {
	o.SetAmdAiResult(amdAiResult)
	return o
}

// SetAmdAiResult adds the amdAiResult to the search history call params
func (o *SearchHistoryCallParams) SetAmdAiResult(amdAiResult []string) {
	o.AmdAiResult = amdAiResult
}

// WithAmdResult adds the amdResult to the search history call params
func (o *SearchHistoryCallParams) WithAmdResult(amdResult []string) *SearchHistoryCallParams {
	o.SetAmdResult(amdResult)
	return o
}

// SetAmdResult adds the amdResult to the search history call params
func (o *SearchHistoryCallParams) SetAmdResult(amdResult []string) {
	o.AmdResult = amdResult
}

// WithAnsweredAtFrom adds the answeredAtFrom to the search history call params
func (o *SearchHistoryCallParams) WithAnsweredAtFrom(answeredAtFrom *string) *SearchHistoryCallParams {
	o.SetAnsweredAtFrom(answeredAtFrom)
	return o
}

// SetAnsweredAtFrom adds the answeredAtFrom to the search history call params
func (o *SearchHistoryCallParams) SetAnsweredAtFrom(answeredAtFrom *string) {
	o.AnsweredAtFrom = answeredAtFrom
}

// WithAnsweredAtTo adds the answeredAtTo to the search history call params
func (o *SearchHistoryCallParams) WithAnsweredAtTo(answeredAtTo *string) *SearchHistoryCallParams {
	o.SetAnsweredAtTo(answeredAtTo)
	return o
}

// SetAnsweredAtTo adds the answeredAtTo to the search history call params
func (o *SearchHistoryCallParams) SetAnsweredAtTo(answeredAtTo *string) {
	o.AnsweredAtTo = answeredAtTo
}

// WithCause adds the cause to the search history call params
func (o *SearchHistoryCallParams) WithCause(cause []string) *SearchHistoryCallParams {
	o.SetCause(cause)
	return o
}

// SetCause adds the cause to the search history call params
func (o *SearchHistoryCallParams) SetCause(cause []string) {
	o.Cause = cause
}

// WithContactID adds the contactID to the search history call params
func (o *SearchHistoryCallParams) WithContactID(contactID []string) *SearchHistoryCallParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the search history call params
func (o *SearchHistoryCallParams) SetContactID(contactID []string) {
	o.ContactID = contactID
}

// WithCreatedAtFrom adds the createdAtFrom to the search history call params
func (o *SearchHistoryCallParams) WithCreatedAtFrom(createdAtFrom *string) *SearchHistoryCallParams {
	o.SetCreatedAtFrom(createdAtFrom)
	return o
}

// SetCreatedAtFrom adds the createdAtFrom to the search history call params
func (o *SearchHistoryCallParams) SetCreatedAtFrom(createdAtFrom *string) {
	o.CreatedAtFrom = createdAtFrom
}

// WithCreatedAtTo adds the createdAtTo to the search history call params
func (o *SearchHistoryCallParams) WithCreatedAtTo(createdAtTo *string) *SearchHistoryCallParams {
	o.SetCreatedAtTo(createdAtTo)
	return o
}

// SetCreatedAtTo adds the createdAtTo to the search history call params
func (o *SearchHistoryCallParams) SetCreatedAtTo(createdAtTo *string) {
	o.CreatedAtTo = createdAtTo
}

// WithDependencyID adds the dependencyID to the search history call params
func (o *SearchHistoryCallParams) WithDependencyID(dependencyID *string) *SearchHistoryCallParams {
	o.SetDependencyID(dependencyID)
	return o
}

// SetDependencyID adds the dependencyId to the search history call params
func (o *SearchHistoryCallParams) SetDependencyID(dependencyID *string) {
	o.DependencyID = dependencyID
}

// WithDirection adds the direction to the search history call params
func (o *SearchHistoryCallParams) WithDirection(direction *string) *SearchHistoryCallParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the search history call params
func (o *SearchHistoryCallParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithDirections adds the directions to the search history call params
func (o *SearchHistoryCallParams) WithDirections(directions []string) *SearchHistoryCallParams {
	o.SetDirections(directions)
	return o
}

// SetDirections adds the directions to the search history call params
func (o *SearchHistoryCallParams) SetDirections(directions []string) {
	o.Directions = directions
}

// WithDomainID adds the domainID to the search history call params
func (o *SearchHistoryCallParams) WithDomainID(domainID *string) *SearchHistoryCallParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the search history call params
func (o *SearchHistoryCallParams) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WithDurationFrom adds the durationFrom to the search history call params
func (o *SearchHistoryCallParams) WithDurationFrom(durationFrom *string) *SearchHistoryCallParams {
	o.SetDurationFrom(durationFrom)
	return o
}

// SetDurationFrom adds the durationFrom to the search history call params
func (o *SearchHistoryCallParams) SetDurationFrom(durationFrom *string) {
	o.DurationFrom = durationFrom
}

// WithDurationTo adds the durationTo to the search history call params
func (o *SearchHistoryCallParams) WithDurationTo(durationTo *string) *SearchHistoryCallParams {
	o.SetDurationTo(durationTo)
	return o
}

// SetDurationTo adds the durationTo to the search history call params
func (o *SearchHistoryCallParams) SetDurationTo(durationTo *string) {
	o.DurationTo = durationTo
}

// WithFields adds the fields to the search history call params
func (o *SearchHistoryCallParams) WithFields(fields []string) *SearchHistoryCallParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search history call params
func (o *SearchHistoryCallParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFts adds the fts to the search history call params
func (o *SearchHistoryCallParams) WithFts(fts *string) *SearchHistoryCallParams {
	o.SetFts(fts)
	return o
}

// SetFts adds the fts to the search history call params
func (o *SearchHistoryCallParams) SetFts(fts *string) {
	o.Fts = fts
}

// WithGatewayID adds the gatewayID to the search history call params
func (o *SearchHistoryCallParams) WithGatewayID(gatewayID []string) *SearchHistoryCallParams {
	o.SetGatewayID(gatewayID)
	return o
}

// SetGatewayID adds the gatewayId to the search history call params
func (o *SearchHistoryCallParams) SetGatewayID(gatewayID []string) {
	o.GatewayID = gatewayID
}

// WithGranteeID adds the granteeID to the search history call params
func (o *SearchHistoryCallParams) WithGranteeID(granteeID []string) *SearchHistoryCallParams {
	o.SetGranteeID(granteeID)
	return o
}

// SetGranteeID adds the granteeId to the search history call params
func (o *SearchHistoryCallParams) SetGranteeID(granteeID []string) {
	o.GranteeID = granteeID
}

// WithHasFile adds the hasFile to the search history call params
func (o *SearchHistoryCallParams) WithHasFile(hasFile *bool) *SearchHistoryCallParams {
	o.SetHasFile(hasFile)
	return o
}

// SetHasFile adds the hasFile to the search history call params
func (o *SearchHistoryCallParams) SetHasFile(hasFile *bool) {
	o.HasFile = hasFile
}

// WithHasTranscript adds the hasTranscript to the search history call params
func (o *SearchHistoryCallParams) WithHasTranscript(hasTranscript *bool) *SearchHistoryCallParams {
	o.SetHasTranscript(hasTranscript)
	return o
}

// SetHasTranscript adds the hasTranscript to the search history call params
func (o *SearchHistoryCallParams) SetHasTranscript(hasTranscript *bool) {
	o.HasTranscript = hasTranscript
}

// WithHasTransfer adds the hasTransfer to the search history call params
func (o *SearchHistoryCallParams) WithHasTransfer(hasTransfer *bool) *SearchHistoryCallParams {
	o.SetHasTransfer(hasTransfer)
	return o
}

// SetHasTransfer adds the hasTransfer to the search history call params
func (o *SearchHistoryCallParams) SetHasTransfer(hasTransfer *bool) {
	o.HasTransfer = hasTransfer
}

// WithID adds the id to the search history call params
func (o *SearchHistoryCallParams) WithID(id []string) *SearchHistoryCallParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search history call params
func (o *SearchHistoryCallParams) SetID(id []string) {
	o.ID = id
}

// WithMemberID adds the memberID to the search history call params
func (o *SearchHistoryCallParams) WithMemberID(memberID []string) *SearchHistoryCallParams {
	o.SetMemberID(memberID)
	return o
}

// SetMemberID adds the memberId to the search history call params
func (o *SearchHistoryCallParams) SetMemberID(memberID []string) {
	o.MemberID = memberID
}

// WithMissed adds the missed to the search history call params
func (o *SearchHistoryCallParams) WithMissed(missed *bool) *SearchHistoryCallParams {
	o.SetMissed(missed)
	return o
}

// SetMissed adds the missed to the search history call params
func (o *SearchHistoryCallParams) SetMissed(missed *bool) {
	o.Missed = missed
}

// WithNumber adds the number to the search history call params
func (o *SearchHistoryCallParams) WithNumber(number *string) *SearchHistoryCallParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the search history call params
func (o *SearchHistoryCallParams) SetNumber(number *string) {
	o.Number = number
}

// WithOwnerID adds the ownerID to the search history call params
func (o *SearchHistoryCallParams) WithOwnerID(ownerID []string) *SearchHistoryCallParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the search history call params
func (o *SearchHistoryCallParams) SetOwnerID(ownerID []string) {
	o.OwnerID = ownerID
}

// WithPage adds the page to the search history call params
func (o *SearchHistoryCallParams) WithPage(page *int32) *SearchHistoryCallParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search history call params
func (o *SearchHistoryCallParams) SetPage(page *int32) {
	o.Page = page
}

// WithParentID adds the parentID to the search history call params
func (o *SearchHistoryCallParams) WithParentID(parentID *string) *SearchHistoryCallParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the search history call params
func (o *SearchHistoryCallParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithQ adds the q to the search history call params
func (o *SearchHistoryCallParams) WithQ(q *string) *SearchHistoryCallParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the search history call params
func (o *SearchHistoryCallParams) SetQ(q *string) {
	o.Q = q
}

// WithQueueID adds the queueID to the search history call params
func (o *SearchHistoryCallParams) WithQueueID(queueID []string) *SearchHistoryCallParams {
	o.SetQueueID(queueID)
	return o
}

// SetQueueID adds the queueId to the search history call params
func (o *SearchHistoryCallParams) SetQueueID(queueID []string) {
	o.QueueID = queueID
}

// WithRated adds the rated to the search history call params
func (o *SearchHistoryCallParams) WithRated(rated *bool) *SearchHistoryCallParams {
	o.SetRated(rated)
	return o
}

// SetRated adds the rated to the search history call params
func (o *SearchHistoryCallParams) SetRated(rated *bool) {
	o.Rated = rated
}

// WithRatedBy adds the ratedBy to the search history call params
func (o *SearchHistoryCallParams) WithRatedBy(ratedBy []string) *SearchHistoryCallParams {
	o.SetRatedBy(ratedBy)
	return o
}

// SetRatedBy adds the ratedBy to the search history call params
func (o *SearchHistoryCallParams) SetRatedBy(ratedBy []string) {
	o.RatedBy = ratedBy
}

// WithRatedUser adds the ratedUser to the search history call params
func (o *SearchHistoryCallParams) WithRatedUser(ratedUser []string) *SearchHistoryCallParams {
	o.SetRatedUser(ratedUser)
	return o
}

// SetRatedUser adds the ratedUser to the search history call params
func (o *SearchHistoryCallParams) SetRatedUser(ratedUser []string) {
	o.RatedUser = ratedUser
}

// WithSchemaID adds the schemaID to the search history call params
func (o *SearchHistoryCallParams) WithSchemaID(schemaID []int32) *SearchHistoryCallParams {
	o.SetSchemaID(schemaID)
	return o
}

// SetSchemaID adds the schemaId to the search history call params
func (o *SearchHistoryCallParams) SetSchemaID(schemaID []int32) {
	o.SchemaID = schemaID
}

// WithScoreOptionalFrom adds the scoreOptionalFrom to the search history call params
func (o *SearchHistoryCallParams) WithScoreOptionalFrom(scoreOptionalFrom *string) *SearchHistoryCallParams {
	o.SetScoreOptionalFrom(scoreOptionalFrom)
	return o
}

// SetScoreOptionalFrom adds the scoreOptionalFrom to the search history call params
func (o *SearchHistoryCallParams) SetScoreOptionalFrom(scoreOptionalFrom *string) {
	o.ScoreOptionalFrom = scoreOptionalFrom
}

// WithScoreOptionalTo adds the scoreOptionalTo to the search history call params
func (o *SearchHistoryCallParams) WithScoreOptionalTo(scoreOptionalTo *string) *SearchHistoryCallParams {
	o.SetScoreOptionalTo(scoreOptionalTo)
	return o
}

// SetScoreOptionalTo adds the scoreOptionalTo to the search history call params
func (o *SearchHistoryCallParams) SetScoreOptionalTo(scoreOptionalTo *string) {
	o.ScoreOptionalTo = scoreOptionalTo
}

// WithScoreRequiredFrom adds the scoreRequiredFrom to the search history call params
func (o *SearchHistoryCallParams) WithScoreRequiredFrom(scoreRequiredFrom *string) *SearchHistoryCallParams {
	o.SetScoreRequiredFrom(scoreRequiredFrom)
	return o
}

// SetScoreRequiredFrom adds the scoreRequiredFrom to the search history call params
func (o *SearchHistoryCallParams) SetScoreRequiredFrom(scoreRequiredFrom *string) {
	o.ScoreRequiredFrom = scoreRequiredFrom
}

// WithScoreRequiredTo adds the scoreRequiredTo to the search history call params
func (o *SearchHistoryCallParams) WithScoreRequiredTo(scoreRequiredTo *string) *SearchHistoryCallParams {
	o.SetScoreRequiredTo(scoreRequiredTo)
	return o
}

// SetScoreRequiredTo adds the scoreRequiredTo to the search history call params
func (o *SearchHistoryCallParams) SetScoreRequiredTo(scoreRequiredTo *string) {
	o.ScoreRequiredTo = scoreRequiredTo
}

// WithSize adds the size to the search history call params
func (o *SearchHistoryCallParams) WithSize(size *int32) *SearchHistoryCallParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search history call params
func (o *SearchHistoryCallParams) SetSize(size *int32) {
	o.Size = size
}

// WithSkipParent adds the skipParent to the search history call params
func (o *SearchHistoryCallParams) WithSkipParent(skipParent *bool) *SearchHistoryCallParams {
	o.SetSkipParent(skipParent)
	return o
}

// SetSkipParent adds the skipParent to the search history call params
func (o *SearchHistoryCallParams) SetSkipParent(skipParent *bool) {
	o.SkipParent = skipParent
}

// WithSort adds the sort to the search history call params
func (o *SearchHistoryCallParams) WithSort(sort *string) *SearchHistoryCallParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search history call params
func (o *SearchHistoryCallParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStoredAtFrom adds the storedAtFrom to the search history call params
func (o *SearchHistoryCallParams) WithStoredAtFrom(storedAtFrom *string) *SearchHistoryCallParams {
	o.SetStoredAtFrom(storedAtFrom)
	return o
}

// SetStoredAtFrom adds the storedAtFrom to the search history call params
func (o *SearchHistoryCallParams) SetStoredAtFrom(storedAtFrom *string) {
	o.StoredAtFrom = storedAtFrom
}

// WithStoredAtTo adds the storedAtTo to the search history call params
func (o *SearchHistoryCallParams) WithStoredAtTo(storedAtTo *string) *SearchHistoryCallParams {
	o.SetStoredAtTo(storedAtTo)
	return o
}

// SetStoredAtTo adds the storedAtTo to the search history call params
func (o *SearchHistoryCallParams) SetStoredAtTo(storedAtTo *string) {
	o.StoredAtTo = storedAtTo
}

// WithTags adds the tags to the search history call params
func (o *SearchHistoryCallParams) WithTags(tags []string) *SearchHistoryCallParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the search history call params
func (o *SearchHistoryCallParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithTalkFrom adds the talkFrom to the search history call params
func (o *SearchHistoryCallParams) WithTalkFrom(talkFrom *string) *SearchHistoryCallParams {
	o.SetTalkFrom(talkFrom)
	return o
}

// SetTalkFrom adds the talkFrom to the search history call params
func (o *SearchHistoryCallParams) SetTalkFrom(talkFrom *string) {
	o.TalkFrom = talkFrom
}

// WithTalkTo adds the talkTo to the search history call params
func (o *SearchHistoryCallParams) WithTalkTo(talkTo *string) *SearchHistoryCallParams {
	o.SetTalkTo(talkTo)
	return o
}

// SetTalkTo adds the talkTo to the search history call params
func (o *SearchHistoryCallParams) SetTalkTo(talkTo *string) {
	o.TalkTo = talkTo
}

// WithTeamID adds the teamID to the search history call params
func (o *SearchHistoryCallParams) WithTeamID(teamID []string) *SearchHistoryCallParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the search history call params
func (o *SearchHistoryCallParams) SetTeamID(teamID []string) {
	o.TeamID = teamID
}

// WithTimeline adds the timeline to the search history call params
func (o *SearchHistoryCallParams) WithTimeline(timeline *bool) *SearchHistoryCallParams {
	o.SetTimeline(timeline)
	return o
}

// SetTimeline adds the timeline to the search history call params
func (o *SearchHistoryCallParams) SetTimeline(timeline *bool) {
	o.Timeline = timeline
}

// WithTransferFrom adds the transferFrom to the search history call params
func (o *SearchHistoryCallParams) WithTransferFrom(transferFrom []string) *SearchHistoryCallParams {
	o.SetTransferFrom(transferFrom)
	return o
}

// SetTransferFrom adds the transferFrom to the search history call params
func (o *SearchHistoryCallParams) SetTransferFrom(transferFrom []string) {
	o.TransferFrom = transferFrom
}

// WithTransferTo adds the transferTo to the search history call params
func (o *SearchHistoryCallParams) WithTransferTo(transferTo []string) *SearchHistoryCallParams {
	o.SetTransferTo(transferTo)
	return o
}

// SetTransferTo adds the transferTo to the search history call params
func (o *SearchHistoryCallParams) SetTransferTo(transferTo []string) {
	o.TransferTo = transferTo
}

// WithUserID adds the userID to the search history call params
func (o *SearchHistoryCallParams) WithUserID(userID []string) *SearchHistoryCallParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the search history call params
func (o *SearchHistoryCallParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SearchHistoryCallParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AgentDescription != nil {

		// query param agent_description
		var qrAgentDescription string

		if o.AgentDescription != nil {
			qrAgentDescription = *o.AgentDescription
		}
		qAgentDescription := qrAgentDescription
		if qAgentDescription != "" {

			if err := r.SetQueryParam("agent_description", qAgentDescription); err != nil {
				return err
			}
		}
	}

	if o.AgentID != nil {

		// binding items for agent_id
		joinedAgentID := o.bindParamAgentID(reg)

		// query array param agent_id
		if err := r.SetQueryParam("agent_id", joinedAgentID...); err != nil {
			return err
		}
	}

	if o.AmdAiResult != nil {

		// binding items for amd_ai_result
		joinedAmdAiResult := o.bindParamAmdAiResult(reg)

		// query array param amd_ai_result
		if err := r.SetQueryParam("amd_ai_result", joinedAmdAiResult...); err != nil {
			return err
		}
	}

	if o.AmdResult != nil {

		// binding items for amd_result
		joinedAmdResult := o.bindParamAmdResult(reg)

		// query array param amd_result
		if err := r.SetQueryParam("amd_result", joinedAmdResult...); err != nil {
			return err
		}
	}

	if o.AnsweredAtFrom != nil {

		// query param answered_at.from
		var qrAnsweredAtFrom string

		if o.AnsweredAtFrom != nil {
			qrAnsweredAtFrom = *o.AnsweredAtFrom
		}
		qAnsweredAtFrom := qrAnsweredAtFrom
		if qAnsweredAtFrom != "" {

			if err := r.SetQueryParam("answered_at.from", qAnsweredAtFrom); err != nil {
				return err
			}
		}
	}

	if o.AnsweredAtTo != nil {

		// query param answered_at.to
		var qrAnsweredAtTo string

		if o.AnsweredAtTo != nil {
			qrAnsweredAtTo = *o.AnsweredAtTo
		}
		qAnsweredAtTo := qrAnsweredAtTo
		if qAnsweredAtTo != "" {

			if err := r.SetQueryParam("answered_at.to", qAnsweredAtTo); err != nil {
				return err
			}
		}
	}

	if o.Cause != nil {

		// binding items for cause
		joinedCause := o.bindParamCause(reg)

		// query array param cause
		if err := r.SetQueryParam("cause", joinedCause...); err != nil {
			return err
		}
	}

	if o.ContactID != nil {

		// binding items for contact_id
		joinedContactID := o.bindParamContactID(reg)

		// query array param contact_id
		if err := r.SetQueryParam("contact_id", joinedContactID...); err != nil {
			return err
		}
	}

	if o.CreatedAtFrom != nil {

		// query param created_at.from
		var qrCreatedAtFrom string

		if o.CreatedAtFrom != nil {
			qrCreatedAtFrom = *o.CreatedAtFrom
		}
		qCreatedAtFrom := qrCreatedAtFrom
		if qCreatedAtFrom != "" {

			if err := r.SetQueryParam("created_at.from", qCreatedAtFrom); err != nil {
				return err
			}
		}
	}

	if o.CreatedAtTo != nil {

		// query param created_at.to
		var qrCreatedAtTo string

		if o.CreatedAtTo != nil {
			qrCreatedAtTo = *o.CreatedAtTo
		}
		qCreatedAtTo := qrCreatedAtTo
		if qCreatedAtTo != "" {

			if err := r.SetQueryParam("created_at.to", qCreatedAtTo); err != nil {
				return err
			}
		}
	}

	if o.DependencyID != nil {

		// query param dependency_id
		var qrDependencyID string

		if o.DependencyID != nil {
			qrDependencyID = *o.DependencyID
		}
		qDependencyID := qrDependencyID
		if qDependencyID != "" {

			if err := r.SetQueryParam("dependency_id", qDependencyID); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.Directions != nil {

		// binding items for directions
		joinedDirections := o.bindParamDirections(reg)

		// query array param directions
		if err := r.SetQueryParam("directions", joinedDirections...); err != nil {
			return err
		}
	}

	if o.DomainID != nil {

		// query param domain_id
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domain_id", qDomainID); err != nil {
				return err
			}
		}
	}

	if o.DurationFrom != nil {

		// query param duration.from
		var qrDurationFrom string

		if o.DurationFrom != nil {
			qrDurationFrom = *o.DurationFrom
		}
		qDurationFrom := qrDurationFrom
		if qDurationFrom != "" {

			if err := r.SetQueryParam("duration.from", qDurationFrom); err != nil {
				return err
			}
		}
	}

	if o.DurationTo != nil {

		// query param duration.to
		var qrDurationTo string

		if o.DurationTo != nil {
			qrDurationTo = *o.DurationTo
		}
		qDurationTo := qrDurationTo
		if qDurationTo != "" {

			if err := r.SetQueryParam("duration.to", qDurationTo); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Fts != nil {

		// query param fts
		var qrFts string

		if o.Fts != nil {
			qrFts = *o.Fts
		}
		qFts := qrFts
		if qFts != "" {

			if err := r.SetQueryParam("fts", qFts); err != nil {
				return err
			}
		}
	}

	if o.GatewayID != nil {

		// binding items for gateway_id
		joinedGatewayID := o.bindParamGatewayID(reg)

		// query array param gateway_id
		if err := r.SetQueryParam("gateway_id", joinedGatewayID...); err != nil {
			return err
		}
	}

	if o.GranteeID != nil {

		// binding items for grantee_id
		joinedGranteeID := o.bindParamGranteeID(reg)

		// query array param grantee_id
		if err := r.SetQueryParam("grantee_id", joinedGranteeID...); err != nil {
			return err
		}
	}

	if o.HasFile != nil {

		// query param has_file
		var qrHasFile bool

		if o.HasFile != nil {
			qrHasFile = *o.HasFile
		}
		qHasFile := swag.FormatBool(qrHasFile)
		if qHasFile != "" {

			if err := r.SetQueryParam("has_file", qHasFile); err != nil {
				return err
			}
		}
	}

	if o.HasTranscript != nil {

		// query param has_transcript
		var qrHasTranscript bool

		if o.HasTranscript != nil {
			qrHasTranscript = *o.HasTranscript
		}
		qHasTranscript := swag.FormatBool(qrHasTranscript)
		if qHasTranscript != "" {

			if err := r.SetQueryParam("has_transcript", qHasTranscript); err != nil {
				return err
			}
		}
	}

	if o.HasTransfer != nil {

		// query param has_transfer
		var qrHasTransfer bool

		if o.HasTransfer != nil {
			qrHasTransfer = *o.HasTransfer
		}
		qHasTransfer := swag.FormatBool(qrHasTransfer)
		if qHasTransfer != "" {

			if err := r.SetQueryParam("has_transfer", qHasTransfer); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.MemberID != nil {

		// binding items for member_id
		joinedMemberID := o.bindParamMemberID(reg)

		// query array param member_id
		if err := r.SetQueryParam("member_id", joinedMemberID...); err != nil {
			return err
		}
	}

	if o.Missed != nil {

		// query param missed
		var qrMissed bool

		if o.Missed != nil {
			qrMissed = *o.Missed
		}
		qMissed := swag.FormatBool(qrMissed)
		if qMissed != "" {

			if err := r.SetQueryParam("missed", qMissed); err != nil {
				return err
			}
		}
	}

	if o.Number != nil {

		// query param number
		var qrNumber string

		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {

			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}
	}

	if o.OwnerID != nil {

		// binding items for owner_id
		joinedOwnerID := o.bindParamOwnerID(reg)

		// query array param owner_id
		if err := r.SetQueryParam("owner_id", joinedOwnerID...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.ParentID != nil {

		// query param parent_id
		var qrParentID string

		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {

			if err := r.SetQueryParam("parent_id", qParentID); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.QueueID != nil {

		// binding items for queue_id
		joinedQueueID := o.bindParamQueueID(reg)

		// query array param queue_id
		if err := r.SetQueryParam("queue_id", joinedQueueID...); err != nil {
			return err
		}
	}

	if o.Rated != nil {

		// query param rated
		var qrRated bool

		if o.Rated != nil {
			qrRated = *o.Rated
		}
		qRated := swag.FormatBool(qrRated)
		if qRated != "" {

			if err := r.SetQueryParam("rated", qRated); err != nil {
				return err
			}
		}
	}

	if o.RatedBy != nil {

		// binding items for rated_by
		joinedRatedBy := o.bindParamRatedBy(reg)

		// query array param rated_by
		if err := r.SetQueryParam("rated_by", joinedRatedBy...); err != nil {
			return err
		}
	}

	if o.RatedUser != nil {

		// binding items for rated_user
		joinedRatedUser := o.bindParamRatedUser(reg)

		// query array param rated_user
		if err := r.SetQueryParam("rated_user", joinedRatedUser...); err != nil {
			return err
		}
	}

	if o.SchemaID != nil {

		// binding items for schema_id
		joinedSchemaID := o.bindParamSchemaID(reg)

		// query array param schema_id
		if err := r.SetQueryParam("schema_id", joinedSchemaID...); err != nil {
			return err
		}
	}

	if o.ScoreOptionalFrom != nil {

		// query param score_optional.from
		var qrScoreOptionalFrom string

		if o.ScoreOptionalFrom != nil {
			qrScoreOptionalFrom = *o.ScoreOptionalFrom
		}
		qScoreOptionalFrom := qrScoreOptionalFrom
		if qScoreOptionalFrom != "" {

			if err := r.SetQueryParam("score_optional.from", qScoreOptionalFrom); err != nil {
				return err
			}
		}
	}

	if o.ScoreOptionalTo != nil {

		// query param score_optional.to
		var qrScoreOptionalTo string

		if o.ScoreOptionalTo != nil {
			qrScoreOptionalTo = *o.ScoreOptionalTo
		}
		qScoreOptionalTo := qrScoreOptionalTo
		if qScoreOptionalTo != "" {

			if err := r.SetQueryParam("score_optional.to", qScoreOptionalTo); err != nil {
				return err
			}
		}
	}

	if o.ScoreRequiredFrom != nil {

		// query param score_required.from
		var qrScoreRequiredFrom string

		if o.ScoreRequiredFrom != nil {
			qrScoreRequiredFrom = *o.ScoreRequiredFrom
		}
		qScoreRequiredFrom := qrScoreRequiredFrom
		if qScoreRequiredFrom != "" {

			if err := r.SetQueryParam("score_required.from", qScoreRequiredFrom); err != nil {
				return err
			}
		}
	}

	if o.ScoreRequiredTo != nil {

		// query param score_required.to
		var qrScoreRequiredTo string

		if o.ScoreRequiredTo != nil {
			qrScoreRequiredTo = *o.ScoreRequiredTo
		}
		qScoreRequiredTo := qrScoreRequiredTo
		if qScoreRequiredTo != "" {

			if err := r.SetQueryParam("score_required.to", qScoreRequiredTo); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.SkipParent != nil {

		// query param skip_parent
		var qrSkipParent bool

		if o.SkipParent != nil {
			qrSkipParent = *o.SkipParent
		}
		qSkipParent := swag.FormatBool(qrSkipParent)
		if qSkipParent != "" {

			if err := r.SetQueryParam("skip_parent", qSkipParent); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.StoredAtFrom != nil {

		// query param stored_at.from
		var qrStoredAtFrom string

		if o.StoredAtFrom != nil {
			qrStoredAtFrom = *o.StoredAtFrom
		}
		qStoredAtFrom := qrStoredAtFrom
		if qStoredAtFrom != "" {

			if err := r.SetQueryParam("stored_at.from", qStoredAtFrom); err != nil {
				return err
			}
		}
	}

	if o.StoredAtTo != nil {

		// query param stored_at.to
		var qrStoredAtTo string

		if o.StoredAtTo != nil {
			qrStoredAtTo = *o.StoredAtTo
		}
		qStoredAtTo := qrStoredAtTo
		if qStoredAtTo != "" {

			if err := r.SetQueryParam("stored_at.to", qStoredAtTo); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if o.TalkFrom != nil {

		// query param talk.from
		var qrTalkFrom string

		if o.TalkFrom != nil {
			qrTalkFrom = *o.TalkFrom
		}
		qTalkFrom := qrTalkFrom
		if qTalkFrom != "" {

			if err := r.SetQueryParam("talk.from", qTalkFrom); err != nil {
				return err
			}
		}
	}

	if o.TalkTo != nil {

		// query param talk.to
		var qrTalkTo string

		if o.TalkTo != nil {
			qrTalkTo = *o.TalkTo
		}
		qTalkTo := qrTalkTo
		if qTalkTo != "" {

			if err := r.SetQueryParam("talk.to", qTalkTo); err != nil {
				return err
			}
		}
	}

	if o.TeamID != nil {

		// binding items for team_id
		joinedTeamID := o.bindParamTeamID(reg)

		// query array param team_id
		if err := r.SetQueryParam("team_id", joinedTeamID...); err != nil {
			return err
		}
	}

	if o.Timeline != nil {

		// query param timeline
		var qrTimeline bool

		if o.Timeline != nil {
			qrTimeline = *o.Timeline
		}
		qTimeline := swag.FormatBool(qrTimeline)
		if qTimeline != "" {

			if err := r.SetQueryParam("timeline", qTimeline); err != nil {
				return err
			}
		}
	}

	if o.TransferFrom != nil {

		// binding items for transfer_from
		joinedTransferFrom := o.bindParamTransferFrom(reg)

		// query array param transfer_from
		if err := r.SetQueryParam("transfer_from", joinedTransferFrom...); err != nil {
			return err
		}
	}

	if o.TransferTo != nil {

		// binding items for transfer_to
		joinedTransferTo := o.bindParamTransferTo(reg)

		// query array param transfer_to
		if err := r.SetQueryParam("transfer_to", joinedTransferTo...); err != nil {
			return err
		}
	}

	if o.UserID != nil {

		// binding items for user_id
		joinedUserID := o.bindParamUserID(reg)

		// query array param user_id
		if err := r.SetQueryParam("user_id", joinedUserID...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchHistoryCall binds the parameter agent_id
func (o *SearchHistoryCallParams) bindParamAgentID(formats strfmt.Registry) []string {
	agentIDIR := o.AgentID

	var agentIDIC []string
	for _, agentIDIIR := range agentIDIR { // explode []string

		agentIDIIV := agentIDIIR // string as string
		agentIDIC = append(agentIDIC, agentIDIIV)
	}

	// items.CollectionFormat: "multi"
	agentIDIS := swag.JoinByFormat(agentIDIC, "multi")

	return agentIDIS
}

// bindParamSearchHistoryCall binds the parameter amd_ai_result
func (o *SearchHistoryCallParams) bindParamAmdAiResult(formats strfmt.Registry) []string {
	amdAiResultIR := o.AmdAiResult

	var amdAiResultIC []string
	for _, amdAiResultIIR := range amdAiResultIR { // explode []string

		amdAiResultIIV := amdAiResultIIR // string as string
		amdAiResultIC = append(amdAiResultIC, amdAiResultIIV)
	}

	// items.CollectionFormat: "multi"
	amdAiResultIS := swag.JoinByFormat(amdAiResultIC, "multi")

	return amdAiResultIS
}

// bindParamSearchHistoryCall binds the parameter amd_result
func (o *SearchHistoryCallParams) bindParamAmdResult(formats strfmt.Registry) []string {
	amdResultIR := o.AmdResult

	var amdResultIC []string
	for _, amdResultIIR := range amdResultIR { // explode []string

		amdResultIIV := amdResultIIR // string as string
		amdResultIC = append(amdResultIC, amdResultIIV)
	}

	// items.CollectionFormat: "multi"
	amdResultIS := swag.JoinByFormat(amdResultIC, "multi")

	return amdResultIS
}

// bindParamSearchHistoryCall binds the parameter cause
func (o *SearchHistoryCallParams) bindParamCause(formats strfmt.Registry) []string {
	causeIR := o.Cause

	var causeIC []string
	for _, causeIIR := range causeIR { // explode []string

		causeIIV := causeIIR // string as string
		causeIC = append(causeIC, causeIIV)
	}

	// items.CollectionFormat: "multi"
	causeIS := swag.JoinByFormat(causeIC, "multi")

	return causeIS
}

// bindParamSearchHistoryCall binds the parameter contact_id
func (o *SearchHistoryCallParams) bindParamContactID(formats strfmt.Registry) []string {
	contactIDIR := o.ContactID

	var contactIDIC []string
	for _, contactIDIIR := range contactIDIR { // explode []string

		contactIDIIV := contactIDIIR // string as string
		contactIDIC = append(contactIDIC, contactIDIIV)
	}

	// items.CollectionFormat: "multi"
	contactIDIS := swag.JoinByFormat(contactIDIC, "multi")

	return contactIDIS
}

// bindParamSearchHistoryCall binds the parameter directions
func (o *SearchHistoryCallParams) bindParamDirections(formats strfmt.Registry) []string {
	directionsIR := o.Directions

	var directionsIC []string
	for _, directionsIIR := range directionsIR { // explode []string

		directionsIIV := directionsIIR // string as string
		directionsIC = append(directionsIC, directionsIIV)
	}

	// items.CollectionFormat: "multi"
	directionsIS := swag.JoinByFormat(directionsIC, "multi")

	return directionsIS
}

// bindParamSearchHistoryCall binds the parameter fields
func (o *SearchHistoryCallParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamSearchHistoryCall binds the parameter gateway_id
func (o *SearchHistoryCallParams) bindParamGatewayID(formats strfmt.Registry) []string {
	gatewayIDIR := o.GatewayID

	var gatewayIDIC []string
	for _, gatewayIDIIR := range gatewayIDIR { // explode []string

		gatewayIDIIV := gatewayIDIIR // string as string
		gatewayIDIC = append(gatewayIDIC, gatewayIDIIV)
	}

	// items.CollectionFormat: "multi"
	gatewayIDIS := swag.JoinByFormat(gatewayIDIC, "multi")

	return gatewayIDIS
}

// bindParamSearchHistoryCall binds the parameter grantee_id
func (o *SearchHistoryCallParams) bindParamGranteeID(formats strfmt.Registry) []string {
	granteeIDIR := o.GranteeID

	var granteeIDIC []string
	for _, granteeIDIIR := range granteeIDIR { // explode []string

		granteeIDIIV := granteeIDIIR // string as string
		granteeIDIC = append(granteeIDIC, granteeIDIIV)
	}

	// items.CollectionFormat: "multi"
	granteeIDIS := swag.JoinByFormat(granteeIDIC, "multi")

	return granteeIDIS
}

// bindParamSearchHistoryCall binds the parameter id
func (o *SearchHistoryCallParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamSearchHistoryCall binds the parameter member_id
func (o *SearchHistoryCallParams) bindParamMemberID(formats strfmt.Registry) []string {
	memberIDIR := o.MemberID

	var memberIDIC []string
	for _, memberIDIIR := range memberIDIR { // explode []string

		memberIDIIV := memberIDIIR // string as string
		memberIDIC = append(memberIDIC, memberIDIIV)
	}

	// items.CollectionFormat: "multi"
	memberIDIS := swag.JoinByFormat(memberIDIC, "multi")

	return memberIDIS
}

// bindParamSearchHistoryCall binds the parameter owner_id
func (o *SearchHistoryCallParams) bindParamOwnerID(formats strfmt.Registry) []string {
	ownerIDIR := o.OwnerID

	var ownerIDIC []string
	for _, ownerIDIIR := range ownerIDIR { // explode []string

		ownerIDIIV := ownerIDIIR // string as string
		ownerIDIC = append(ownerIDIC, ownerIDIIV)
	}

	// items.CollectionFormat: "multi"
	ownerIDIS := swag.JoinByFormat(ownerIDIC, "multi")

	return ownerIDIS
}

// bindParamSearchHistoryCall binds the parameter queue_id
func (o *SearchHistoryCallParams) bindParamQueueID(formats strfmt.Registry) []string {
	queueIDIR := o.QueueID

	var queueIDIC []string
	for _, queueIDIIR := range queueIDIR { // explode []string

		queueIDIIV := queueIDIIR // string as string
		queueIDIC = append(queueIDIC, queueIDIIV)
	}

	// items.CollectionFormat: "multi"
	queueIDIS := swag.JoinByFormat(queueIDIC, "multi")

	return queueIDIS
}

// bindParamSearchHistoryCall binds the parameter rated_by
func (o *SearchHistoryCallParams) bindParamRatedBy(formats strfmt.Registry) []string {
	ratedByIR := o.RatedBy

	var ratedByIC []string
	for _, ratedByIIR := range ratedByIR { // explode []string

		ratedByIIV := ratedByIIR // string as string
		ratedByIC = append(ratedByIC, ratedByIIV)
	}

	// items.CollectionFormat: "multi"
	ratedByIS := swag.JoinByFormat(ratedByIC, "multi")

	return ratedByIS
}

// bindParamSearchHistoryCall binds the parameter rated_user
func (o *SearchHistoryCallParams) bindParamRatedUser(formats strfmt.Registry) []string {
	ratedUserIR := o.RatedUser

	var ratedUserIC []string
	for _, ratedUserIIR := range ratedUserIR { // explode []string

		ratedUserIIV := ratedUserIIR // string as string
		ratedUserIC = append(ratedUserIC, ratedUserIIV)
	}

	// items.CollectionFormat: "multi"
	ratedUserIS := swag.JoinByFormat(ratedUserIC, "multi")

	return ratedUserIS
}

// bindParamSearchHistoryCall binds the parameter schema_id
func (o *SearchHistoryCallParams) bindParamSchemaID(formats strfmt.Registry) []string {
	schemaIDIR := o.SchemaID

	var schemaIDIC []string
	for _, schemaIDIIR := range schemaIDIR { // explode []int32

		schemaIDIIV := swag.FormatInt32(schemaIDIIR) // int32 as string
		schemaIDIC = append(schemaIDIC, schemaIDIIV)
	}

	// items.CollectionFormat: "multi"
	schemaIDIS := swag.JoinByFormat(schemaIDIC, "multi")

	return schemaIDIS
}

// bindParamSearchHistoryCall binds the parameter tags
func (o *SearchHistoryCallParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "multi"
	tagsIS := swag.JoinByFormat(tagsIC, "multi")

	return tagsIS
}

// bindParamSearchHistoryCall binds the parameter team_id
func (o *SearchHistoryCallParams) bindParamTeamID(formats strfmt.Registry) []string {
	teamIDIR := o.TeamID

	var teamIDIC []string
	for _, teamIDIIR := range teamIDIR { // explode []string

		teamIDIIV := teamIDIIR // string as string
		teamIDIC = append(teamIDIC, teamIDIIV)
	}

	// items.CollectionFormat: "multi"
	teamIDIS := swag.JoinByFormat(teamIDIC, "multi")

	return teamIDIS
}

// bindParamSearchHistoryCall binds the parameter transfer_from
func (o *SearchHistoryCallParams) bindParamTransferFrom(formats strfmt.Registry) []string {
	transferFromIR := o.TransferFrom

	var transferFromIC []string
	for _, transferFromIIR := range transferFromIR { // explode []string

		transferFromIIV := transferFromIIR // string as string
		transferFromIC = append(transferFromIC, transferFromIIV)
	}

	// items.CollectionFormat: "multi"
	transferFromIS := swag.JoinByFormat(transferFromIC, "multi")

	return transferFromIS
}

// bindParamSearchHistoryCall binds the parameter transfer_to
func (o *SearchHistoryCallParams) bindParamTransferTo(formats strfmt.Registry) []string {
	transferToIR := o.TransferTo

	var transferToIC []string
	for _, transferToIIR := range transferToIR { // explode []string

		transferToIIV := transferToIIR // string as string
		transferToIC = append(transferToIC, transferToIIV)
	}

	// items.CollectionFormat: "multi"
	transferToIS := swag.JoinByFormat(transferToIC, "multi")

	return transferToIS
}

// bindParamSearchHistoryCall binds the parameter user_id
func (o *SearchHistoryCallParams) bindParamUserID(formats strfmt.Registry) []string {
	userIDIR := o.UserID

	var userIDIC []string
	for _, userIDIIR := range userIDIR { // explode []string

		userIDIIV := userIDIIR // string as string
		userIDIC = append(userIDIC, userIDIIV)
	}

	// items.CollectionFormat: "multi"
	userIDIS := swag.JoinByFormat(userIDIC, "multi")

	return userIDIS
}
