// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CatalogGetCustomers(params *CatalogGetCustomersParams, opts ...ClientOption) (*CatalogGetCustomersOK, error)

	CatalogGetDialogs(params *CatalogGetDialogsParams, opts ...ClientOption) (*CatalogGetDialogsOK, error)

	CatalogGetHistory(params *CatalogGetHistoryParams, opts ...ClientOption) (*CatalogGetHistoryOK, error)

	CatalogGetHistory2(params *CatalogGetHistory2Params, opts ...ClientOption) (*CatalogGetHistory2OK, error)

	CatalogGetMembers(params *CatalogGetMembersParams, opts ...ClientOption) (*CatalogGetMembersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CatalogGetCustomers queries of external chat customers
*/

func (a *Client) CatalogGetCustomers(params *CatalogGetCustomersParams, opts ...ClientOption) (*CatalogGetCustomersOK, error) {
	if params == nil {
		params = NewCatalogGetCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Catalog_GetCustomers",
		Method:             "GET",
		PathPattern:        "/chat/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Catalog_GetCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CatalogGetDialogs queries of chat conversations
*/

func (a *Client) CatalogGetDialogs(params *CatalogGetDialogsParams, opts ...ClientOption) (*CatalogGetDialogsOK, error) {
	if params == nil {
		params = NewCatalogGetDialogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Catalog_GetDialogs",
		Method:             "GET",
		PathPattern:        "/chat/dialogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetDialogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetDialogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Catalog_GetDialogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CatalogGetHistory queries of the chat history
*/

func (a *Client) CatalogGetHistory(params *CatalogGetHistoryParams, opts ...ClientOption) (*CatalogGetHistoryOK, error) {
	if params == nil {
		params = NewCatalogGetHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Catalog_GetHistory",
		Method:             "GET",
		PathPattern:        "/chat/dialogs/{chat_id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Catalog_GetHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CatalogGetHistory2 queries of the chat history
*/

func (a *Client) CatalogGetHistory2(params *CatalogGetHistory2Params, opts ...ClientOption) (*CatalogGetHistory2OK, error) {
	if params == nil {
		params = NewCatalogGetHistory2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Catalog_GetHistory2",
		Method:             "GET",
		PathPattern:        "/chat/{peer.type}/{peer.id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetHistory2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetHistory2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Catalog_GetHistory2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CatalogGetMembers queries of chat participants
*/

func (a *Client) CatalogGetMembers(params *CatalogGetMembersParams, opts ...ClientOption) (*CatalogGetMembersOK, error) {
	if params == nil {
		params = NewCatalogGetMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Catalog_GetMembers",
		Method:             "GET",
		PathPattern:        "/chat/dialogs/{chat_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Catalog_GetMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
