// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCatalogGetHistory2Params creates a new CatalogGetHistory2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCatalogGetHistory2Params() *CatalogGetHistory2Params {
	return &CatalogGetHistory2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCatalogGetHistory2ParamsWithTimeout creates a new CatalogGetHistory2Params object
// with the ability to set a timeout on a request.
func NewCatalogGetHistory2ParamsWithTimeout(timeout time.Duration) *CatalogGetHistory2Params {
	return &CatalogGetHistory2Params{
		timeout: timeout,
	}
}

// NewCatalogGetHistory2ParamsWithContext creates a new CatalogGetHistory2Params object
// with the ability to set a context for a request.
func NewCatalogGetHistory2ParamsWithContext(ctx context.Context) *CatalogGetHistory2Params {
	return &CatalogGetHistory2Params{
		Context: ctx,
	}
}

// NewCatalogGetHistory2ParamsWithHTTPClient creates a new CatalogGetHistory2Params object
// with the ability to set a custom HTTPClient for a request.
func NewCatalogGetHistory2ParamsWithHTTPClient(client *http.Client) *CatalogGetHistory2Params {
	return &CatalogGetHistory2Params{
		HTTPClient: client,
	}
}

/*
CatalogGetHistory2Params contains all the parameters to send to the API endpoint

	for the catalog get history2 operation.

	Typically these are written to a http.Request.
*/
type CatalogGetHistory2Params struct {

	/* ChatID.

	   Unique chat dialog
	*/
	ChatID *string

	/* Fields.

	   Fields to return into result.
	*/
	Fields []string

	/* GroupStringString.

	   This is a request variable of the map type. The query format is "map_name[key]=value", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age["bob"]=18
	*/
	GroupStringString *string

	/* Limit.

	   Number of messages to return.

	   Format: int32
	*/
	Limit *int32

	/* OffsetDate.

	   Messages ONLY been sent before the specified epochtime(milli).

	   Format: int64
	*/
	OffsetDate *string

	/* OffsetID.

	   Messages ONLY starting from the specified message ID

	   Format: int64
	*/
	OffsetID *string

	/* PeerID.

	     Contact unique **ID**entifier.
	Contact **type**-specific string.
	*/
	PeerID string

	/* PeerName.

	   Contact display **name**.
	*/
	PeerName *string

	/* PeerType.

	   Contact **type** provider.
	*/
	PeerType string

	/* Q.

	   Search term: message.text
	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the catalog get history2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CatalogGetHistory2Params) WithDefaults() *CatalogGetHistory2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the catalog get history2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CatalogGetHistory2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithTimeout(timeout time.Duration) *CatalogGetHistory2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithContext(ctx context.Context) *CatalogGetHistory2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithHTTPClient(client *http.Client) *CatalogGetHistory2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithChatID(chatID *string) *CatalogGetHistory2Params {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetChatID(chatID *string) {
	o.ChatID = chatID
}

// WithFields adds the fields to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithFields(fields []string) *CatalogGetHistory2Params {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetFields(fields []string) {
	o.Fields = fields
}

// WithGroupStringString adds the groupStringString to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithGroupStringString(groupStringString *string) *CatalogGetHistory2Params {
	o.SetGroupStringString(groupStringString)
	return o
}

// SetGroupStringString adds the groupStringString to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetGroupStringString(groupStringString *string) {
	o.GroupStringString = groupStringString
}

// WithLimit adds the limit to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithLimit(limit *int32) *CatalogGetHistory2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffsetDate adds the offsetDate to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithOffsetDate(offsetDate *string) *CatalogGetHistory2Params {
	o.SetOffsetDate(offsetDate)
	return o
}

// SetOffsetDate adds the offsetDate to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetOffsetDate(offsetDate *string) {
	o.OffsetDate = offsetDate
}

// WithOffsetID adds the offsetID to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithOffsetID(offsetID *string) *CatalogGetHistory2Params {
	o.SetOffsetID(offsetID)
	return o
}

// SetOffsetID adds the offsetId to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetOffsetID(offsetID *string) {
	o.OffsetID = offsetID
}

// WithPeerID adds the peerID to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithPeerID(peerID string) *CatalogGetHistory2Params {
	o.SetPeerID(peerID)
	return o
}

// SetPeerID adds the peerId to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetPeerID(peerID string) {
	o.PeerID = peerID
}

// WithPeerName adds the peerName to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithPeerName(peerName *string) *CatalogGetHistory2Params {
	o.SetPeerName(peerName)
	return o
}

// SetPeerName adds the peerName to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetPeerName(peerName *string) {
	o.PeerName = peerName
}

// WithPeerType adds the peerType to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithPeerType(peerType string) *CatalogGetHistory2Params {
	o.SetPeerType(peerType)
	return o
}

// SetPeerType adds the peerType to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetPeerType(peerType string) {
	o.PeerType = peerType
}

// WithQ adds the q to the catalog get history2 params
func (o *CatalogGetHistory2Params) WithQ(q *string) *CatalogGetHistory2Params {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the catalog get history2 params
func (o *CatalogGetHistory2Params) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *CatalogGetHistory2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChatID != nil {

		// query param chat_id
		var qrChatID string

		if o.ChatID != nil {
			qrChatID = *o.ChatID
		}
		qChatID := qrChatID
		if qChatID != "" {

			if err := r.SetQueryParam("chat_id", qChatID); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GroupStringString != nil {

		// query param group[string][string]
		var qrGroupStringString string

		if o.GroupStringString != nil {
			qrGroupStringString = *o.GroupStringString
		}
		qGroupStringString := qrGroupStringString
		if qGroupStringString != "" {

			if err := r.SetQueryParam("group[string][string]", qGroupStringString); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.OffsetDate != nil {

		// query param offset.date
		var qrOffsetDate string

		if o.OffsetDate != nil {
			qrOffsetDate = *o.OffsetDate
		}
		qOffsetDate := qrOffsetDate
		if qOffsetDate != "" {

			if err := r.SetQueryParam("offset.date", qOffsetDate); err != nil {
				return err
			}
		}
	}

	if o.OffsetID != nil {

		// query param offset.id
		var qrOffsetID string

		if o.OffsetID != nil {
			qrOffsetID = *o.OffsetID
		}
		qOffsetID := qrOffsetID
		if qOffsetID != "" {

			if err := r.SetQueryParam("offset.id", qOffsetID); err != nil {
				return err
			}
		}
	}

	// path param peer.id
	if err := r.SetPathParam("peer.id", o.PeerID); err != nil {
		return err
	}

	if o.PeerName != nil {

		// query param peer.name
		var qrPeerName string

		if o.PeerName != nil {
			qrPeerName = *o.PeerName
		}
		qPeerName := qrPeerName
		if qPeerName != "" {

			if err := r.SetQueryParam("peer.name", qPeerName); err != nil {
				return err
			}
		}
	}

	// path param peer.type
	if err := r.SetPathParam("peer.type", o.PeerType); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCatalogGetHistory2 binds the parameter fields
func (o *CatalogGetHistory2Params) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
