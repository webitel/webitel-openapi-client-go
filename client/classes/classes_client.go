// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new classes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for classes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClassesReadClass(params *ClassesReadClassParams, opts ...ClientOption) (*ClassesReadClassOK, error)

	ClassesSearchClasses(params *ClassesSearchClassesParams, opts ...ClientOption) (*ClassesSearchClassesOK, error)

	ClassesUpdateClass(classID string, body *models.APIClassesUpdateClassBody, opts ...ClientOption) (*ClassesUpdateClassOK, error)
	ClassesUpdateClassWithParams(params *ClassesUpdateClassParams, opts ...ClientOption) (*ClassesUpdateClassOK, error)

	ClassesUpdateClass2(classID string, body *models.APIClassesUpdateClassBody, opts ...ClientOption) (*ClassesUpdateClass2OK, error)
	ClassesUpdateClass2WithParams(params *ClassesUpdateClass2Params, opts ...ClientOption) (*ClassesUpdateClass2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ClassesReadClass classes read class API
*/

func (a *Client) ClassesReadClass(params *ClassesReadClassParams, opts ...ClientOption) (*ClassesReadClassOK, error) {
	if params == nil {
		params = NewClassesReadClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Classes_ReadClass",
		Method:             "GET",
		PathPattern:        "/objclass/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClassesReadClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClassesReadClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Classes_ReadClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClassesSearchClasses classes search classes API
*/

func (a *Client) ClassesSearchClasses(params *ClassesSearchClassesParams, opts ...ClientOption) (*ClassesSearchClassesOK, error) {
	if params == nil {
		params = NewClassesSearchClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Classes_SearchClasses",
		Method:             "GET",
		PathPattern:        "/objclass",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClassesSearchClassesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClassesSearchClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Classes_SearchClasses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClassesUpdateClass classes update class API
*/
func (a *Client) ClassesUpdateClass(classID string, body *models.APIClassesUpdateClassBody, opts ...ClientOption) (*ClassesUpdateClassOK, error) {
	params := NewClassesUpdateClassParams().WithBody(body).WithClassID(classID)
	return a.ClassesUpdateClassWithParams(params, opts...)
}

func (a *Client) ClassesUpdateClassWithParams(params *ClassesUpdateClassParams, opts ...ClientOption) (*ClassesUpdateClassOK, error) {
	if params == nil {
		params = NewClassesUpdateClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Classes_UpdateClass",
		Method:             "PUT",
		PathPattern:        "/objclass/{class.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClassesUpdateClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClassesUpdateClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Classes_UpdateClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClassesUpdateClass2 classes update class2 API
*/
func (a *Client) ClassesUpdateClass2(classID string, body *models.APIClassesUpdateClassBody, opts ...ClientOption) (*ClassesUpdateClass2OK, error) {
	params := NewClassesUpdateClass2Params().WithBody(body).WithClassID(classID)
	return a.ClassesUpdateClass2WithParams(params, opts...)
}

func (a *Client) ClassesUpdateClass2WithParams(params *ClassesUpdateClass2Params, opts ...ClientOption) (*ClassesUpdateClass2OK, error) {
	if params == nil {
		params = NewClassesUpdateClass2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Classes_UpdateClass2",
		Method:             "PATCH",
		PathPattern:        "/objclass/{class.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClassesUpdateClass2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClassesUpdateClass2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Classes_UpdateClass2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
