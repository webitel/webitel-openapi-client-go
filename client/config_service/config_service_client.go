// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new config service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigServiceCreateConfig(body *models.LoggerCreateConfigRequest, opts ...ClientOption) (*ConfigServiceCreateConfigOK, error)
	ConfigServiceCreateConfigWithParams(params *ConfigServiceCreateConfigParams, opts ...ClientOption) (*ConfigServiceCreateConfigOK, error)

	ConfigServiceDeleteConfig(configID int32, opts ...ClientOption) (*ConfigServiceDeleteConfigOK, error)
	ConfigServiceDeleteConfigWithParams(params *ConfigServiceDeleteConfigParams, opts ...ClientOption) (*ConfigServiceDeleteConfigOK, error)

	ConfigServiceDeleteConfigBulk(body *models.LoggerDeleteConfigBulkRequest, opts ...ClientOption) (*ConfigServiceDeleteConfigBulkOK, error)
	ConfigServiceDeleteConfigBulkWithParams(params *ConfigServiceDeleteConfigBulkParams, opts ...ClientOption) (*ConfigServiceDeleteConfigBulkOK, error)

	ConfigServicePatchConfig(configID int32, body *models.LoggerPatchConfigRequest, opts ...ClientOption) (*ConfigServicePatchConfigOK, error)
	ConfigServicePatchConfigWithParams(params *ConfigServicePatchConfigParams, opts ...ClientOption) (*ConfigServicePatchConfigOK, error)

	ConfigServiceReadConfig(configID int32, opts ...ClientOption) (*ConfigServiceReadConfigOK, error)
	ConfigServiceReadConfigWithParams(params *ConfigServiceReadConfigParams, opts ...ClientOption) (*ConfigServiceReadConfigOK, error)

	ConfigServiceReadSystemObjects(params *ConfigServiceReadSystemObjectsParams, opts ...ClientOption) (*ConfigServiceReadSystemObjectsOK, error)

	ConfigServiceSearchConfig(params *ConfigServiceSearchConfigParams, opts ...ClientOption) (*ConfigServiceSearchConfigOK, error)

	ConfigServiceUpdateConfig(configID int32, body *models.LoggerUpdateConfigRequest, opts ...ClientOption) (*ConfigServiceUpdateConfigOK, error)
	ConfigServiceUpdateConfigWithParams(params *ConfigServiceUpdateConfigParams, opts ...ClientOption) (*ConfigServiceUpdateConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigServiceCreateConfig config service create config API
*/
func (a *Client) ConfigServiceCreateConfig(body *models.LoggerCreateConfigRequest, opts ...ClientOption) (*ConfigServiceCreateConfigOK, error) {
	params := NewConfigServiceCreateConfigParams().WithBody(body)
	return a.ConfigServiceCreateConfigWithParams(params, opts...)
}

func (a *Client) ConfigServiceCreateConfigWithParams(params *ConfigServiceCreateConfigParams, opts ...ClientOption) (*ConfigServiceCreateConfigOK, error) {
	if params == nil {
		params = NewConfigServiceCreateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_CreateConfig",
		Method:             "POST",
		PathPattern:        "/logger/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceCreateConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceCreateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceCreateConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceDeleteConfig config service delete config API
*/
func (a *Client) ConfigServiceDeleteConfig(configID int32, opts ...ClientOption) (*ConfigServiceDeleteConfigOK, error) {
	params := NewConfigServiceDeleteConfigParams().WithConfigID(configID)
	return a.ConfigServiceDeleteConfigWithParams(params, opts...)
}

func (a *Client) ConfigServiceDeleteConfigWithParams(params *ConfigServiceDeleteConfigParams, opts ...ClientOption) (*ConfigServiceDeleteConfigOK, error) {
	if params == nil {
		params = NewConfigServiceDeleteConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_DeleteConfig",
		Method:             "DELETE",
		PathPattern:        "/logger/config/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceDeleteConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceDeleteConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceDeleteConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceDeleteConfigBulk config service delete config bulk API
*/
func (a *Client) ConfigServiceDeleteConfigBulk(body *models.LoggerDeleteConfigBulkRequest, opts ...ClientOption) (*ConfigServiceDeleteConfigBulkOK, error) {
	params := NewConfigServiceDeleteConfigBulkParams().WithBody(body)
	return a.ConfigServiceDeleteConfigBulkWithParams(params, opts...)
}

func (a *Client) ConfigServiceDeleteConfigBulkWithParams(params *ConfigServiceDeleteConfigBulkParams, opts ...ClientOption) (*ConfigServiceDeleteConfigBulkOK, error) {
	if params == nil {
		params = NewConfigServiceDeleteConfigBulkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_DeleteConfigBulk",
		Method:             "DELETE",
		PathPattern:        "/logger/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceDeleteConfigBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceDeleteConfigBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceDeleteConfigBulkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServicePatchConfig config service patch config API
*/
func (a *Client) ConfigServicePatchConfig(configID int32, body *models.LoggerPatchConfigRequest, opts ...ClientOption) (*ConfigServicePatchConfigOK, error) {
	params := NewConfigServicePatchConfigParams().WithBody(body).WithConfigID(configID)
	return a.ConfigServicePatchConfigWithParams(params, opts...)
}

func (a *Client) ConfigServicePatchConfigWithParams(params *ConfigServicePatchConfigParams, opts ...ClientOption) (*ConfigServicePatchConfigOK, error) {
	if params == nil {
		params = NewConfigServicePatchConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_PatchConfig",
		Method:             "PATCH",
		PathPattern:        "/logger/config/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServicePatchConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServicePatchConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServicePatchConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceReadConfig config service read config API
*/
func (a *Client) ConfigServiceReadConfig(configID int32, opts ...ClientOption) (*ConfigServiceReadConfigOK, error) {
	params := NewConfigServiceReadConfigParams().WithConfigID(configID)
	return a.ConfigServiceReadConfigWithParams(params, opts...)
}

func (a *Client) ConfigServiceReadConfigWithParams(params *ConfigServiceReadConfigParams, opts ...ClientOption) (*ConfigServiceReadConfigOK, error) {
	if params == nil {
		params = NewConfigServiceReadConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_ReadConfig",
		Method:             "GET",
		PathPattern:        "/logger/config/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceReadConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceReadConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceReadConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceReadSystemObjects config service read system objects API
*/

func (a *Client) ConfigServiceReadSystemObjects(params *ConfigServiceReadSystemObjectsParams, opts ...ClientOption) (*ConfigServiceReadSystemObjectsOK, error) {
	if params == nil {
		params = NewConfigServiceReadSystemObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_ReadSystemObjects",
		Method:             "GET",
		PathPattern:        "/logger/available_objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceReadSystemObjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceReadSystemObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceReadSystemObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceSearchConfig config service search config API
*/

func (a *Client) ConfigServiceSearchConfig(params *ConfigServiceSearchConfigParams, opts ...ClientOption) (*ConfigServiceSearchConfigOK, error) {
	if params == nil {
		params = NewConfigServiceSearchConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_SearchConfig",
		Method:             "GET",
		PathPattern:        "/logger/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceSearchConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceSearchConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceSearchConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConfigServiceUpdateConfig config service update config API
*/
func (a *Client) ConfigServiceUpdateConfig(configID int32, body *models.LoggerUpdateConfigRequest, opts ...ClientOption) (*ConfigServiceUpdateConfigOK, error) {
	params := NewConfigServiceUpdateConfigParams().WithBody(body).WithConfigID(configID)
	return a.ConfigServiceUpdateConfigWithParams(params, opts...)
}

func (a *Client) ConfigServiceUpdateConfigWithParams(params *ConfigServiceUpdateConfigParams, opts ...ClientOption) (*ConfigServiceUpdateConfigOK, error) {
	if params == nil {
		params = NewConfigServiceUpdateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigService_UpdateConfig",
		Method:             "PUT",
		PathPattern:        "/logger/config/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigServiceUpdateConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigServiceUpdateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConfigServiceUpdateConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
