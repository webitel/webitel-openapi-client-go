// Code generated by go-swagger; DO NOT EDIT.

package contact_linking_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContactLinkingServiceCreateContactFromConversationParams creates a new ContactLinkingServiceCreateContactFromConversationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContactLinkingServiceCreateContactFromConversationParams() *ContactLinkingServiceCreateContactFromConversationParams {
	return &ContactLinkingServiceCreateContactFromConversationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewContactLinkingServiceCreateContactFromConversationParamsWithTimeout creates a new ContactLinkingServiceCreateContactFromConversationParams object
// with the ability to set a timeout on a request.
func NewContactLinkingServiceCreateContactFromConversationParamsWithTimeout(timeout time.Duration) *ContactLinkingServiceCreateContactFromConversationParams {
	return &ContactLinkingServiceCreateContactFromConversationParams{
		timeout: timeout,
	}
}

// NewContactLinkingServiceCreateContactFromConversationParamsWithContext creates a new ContactLinkingServiceCreateContactFromConversationParams object
// with the ability to set a context for a request.
func NewContactLinkingServiceCreateContactFromConversationParamsWithContext(ctx context.Context) *ContactLinkingServiceCreateContactFromConversationParams {
	return &ContactLinkingServiceCreateContactFromConversationParams{
		Context: ctx,
	}
}

// NewContactLinkingServiceCreateContactFromConversationParamsWithHTTPClient creates a new ContactLinkingServiceCreateContactFromConversationParams object
// with the ability to set a custom HTTPClient for a request.
func NewContactLinkingServiceCreateContactFromConversationParamsWithHTTPClient(client *http.Client) *ContactLinkingServiceCreateContactFromConversationParams {
	return &ContactLinkingServiceCreateContactFromConversationParams{
		HTTPClient: client,
	}
}

/*
ContactLinkingServiceCreateContactFromConversationParams contains all the parameters to send to the API endpoint

	for the contact linking service create contact from conversation operation.

	Typically these are written to a http.Request.
*/
type ContactLinkingServiceCreateContactFromConversationParams struct {

	// ConversationID.
	ConversationID string

	// Description.
	Description *string

	// Label.
	Label []string

	// Name.
	Name *string

	// OwnerID.
	//
	// Format: int64
	OwnerID *string

	// OwnerName.
	OwnerName *string

	// TimezoneID.
	//
	// Format: int64
	TimezoneID *string

	// TimezoneName.
	TimezoneName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the contact linking service create contact from conversation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithDefaults() *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the contact linking service create contact from conversation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithTimeout(timeout time.Duration) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithContext(ctx context.Context) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithHTTPClient(client *http.Client) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithConversationID(conversationID string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithDescription adds the description to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithDescription(description *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetDescription(description *string) {
	o.Description = description
}

// WithLabel adds the label to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithLabel(label []string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetLabel(label []string) {
	o.Label = label
}

// WithName adds the name to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithName(name *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetName(name *string) {
	o.Name = name
}

// WithOwnerID adds the ownerID to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithOwnerID(ownerID *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetOwnerID(ownerID *string) {
	o.OwnerID = ownerID
}

// WithOwnerName adds the ownerName to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithOwnerName(ownerName *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithTimezoneID adds the timezoneID to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithTimezoneID(timezoneID *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetTimezoneID(timezoneID)
	return o
}

// SetTimezoneID adds the timezoneId to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetTimezoneID(timezoneID *string) {
	o.TimezoneID = timezoneID
}

// WithTimezoneName adds the timezoneName to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) WithTimezoneName(timezoneName *string) *ContactLinkingServiceCreateContactFromConversationParams {
	o.SetTimezoneName(timezoneName)
	return o
}

// SetTimezoneName adds the timezoneName to the contact linking service create contact from conversation params
func (o *ContactLinkingServiceCreateContactFromConversationParams) SetTimezoneName(timezoneName *string) {
	o.TimezoneName = timezoneName
}

// WriteToRequest writes these params to a swagger request
func (o *ContactLinkingServiceCreateContactFromConversationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversation_id
	if err := r.SetPathParam("conversation_id", o.ConversationID); err != nil {
		return err
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.Label != nil {

		// binding items for label
		joinedLabel := o.bindParamLabel(reg)

		// query array param label
		if err := r.SetQueryParam("label", joinedLabel...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OwnerID != nil {

		// query param owner.id
		var qrOwnerID string

		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner.id", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.OwnerName != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.TimezoneID != nil {

		// query param timezone.id
		var qrTimezoneID string

		if o.TimezoneID != nil {
			qrTimezoneID = *o.TimezoneID
		}
		qTimezoneID := qrTimezoneID
		if qTimezoneID != "" {

			if err := r.SetQueryParam("timezone.id", qTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.TimezoneName != nil {

		// query param timezone.name
		var qrTimezoneName string

		if o.TimezoneName != nil {
			qrTimezoneName = *o.TimezoneName
		}
		qTimezoneName := qrTimezoneName
		if qTimezoneName != "" {

			if err := r.SetQueryParam("timezone.name", qTimezoneName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamContactLinkingServiceCreateContactFromConversation binds the parameter label
func (o *ContactLinkingServiceCreateContactFromConversationParams) bindParamLabel(formats strfmt.Registry) []string {
	labelIR := o.Label

	var labelIC []string
	for _, labelIIR := range labelIR { // explode []string

		labelIIV := labelIIR // string as string
		labelIC = append(labelIC, labelIIV)
	}

	// items.CollectionFormat: "multi"
	labelIS := swag.JoinByFormat(labelIC, "multi")

	return labelIS
}
