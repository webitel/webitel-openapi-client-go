// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContactsCreateContact(params *ContactsCreateContactParams, opts ...ClientOption) (*ContactsCreateContactOK, error)

	ContactsDeleteContact(params *ContactsDeleteContactParams, opts ...ClientOption) (*ContactsDeleteContactOK, error)

	ContactsLocateContact(params *ContactsLocateContactParams, opts ...ClientOption) (*ContactsLocateContactOK, error)

	ContactsSearchContacts(params *ContactsSearchContactsParams, opts ...ClientOption) (*ContactsSearchContactsOK, error)

	ContactsUpdateContact(params *ContactsUpdateContactParams, opts ...ClientOption) (*ContactsUpdateContactOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ContactsCreateContact creates n e w contact
*/

func (a *Client) ContactsCreateContact(params *ContactsCreateContactParams, opts ...ClientOption) (*ContactsCreateContactOK, error) {
	if params == nil {
		params = NewContactsCreateContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contacts_CreateContact",
		Method:             "POST",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactsCreateContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactsCreateContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Contacts_CreateContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactsDeleteContact removes contact source
*/

func (a *Client) ContactsDeleteContact(params *ContactsDeleteContactParams, opts ...ClientOption) (*ContactsDeleteContactOK, error) {
	if params == nil {
		params = NewContactsDeleteContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contacts_DeleteContact",
		Method:             "DELETE",
		PathPattern:        "/contacts/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactsDeleteContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactsDeleteContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Contacts_DeleteContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactsLocateContact locates contact source
*/

func (a *Client) ContactsLocateContact(params *ContactsLocateContactParams, opts ...ClientOption) (*ContactsLocateContactOK, error) {
	if params == nil {
		params = NewContactsLocateContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contacts_LocateContact",
		Method:             "GET",
		PathPattern:        "/contacts/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactsLocateContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactsLocateContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Contacts_LocateContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactsSearchContacts searches for contact s

| Field       | Type
| ----------- | ----
| **----------- READ-ONLY -----------** |
| `id`        | int64
| `ver`       | int32
| `etag`      | string
| **---------- OPERATIONAL ----------** |
| `created_at` | int64(epoch:milli)
| `created_by` | lookup(user)
| `updated_at` | int64(epoch:milli)
| `updated_by` | lookup(user)
| **---------- ATTRIBUTES -----------** |
| `name`      | name!
| `about`     | string
| `labels`    | list[label!]
| `emails`    | list[email!]
| `photos`    | list[photo!]
| `phones`    | list[phone!]
| `managers`  | list[manager!]
| `comments`  | list[comment!]
| `addresses` | list[address!]
| `languages` | list[language!]
| `timezones` | list[timezone!]
| `variables` | list[variable!]
| `imclients` | list[imClient!]

*/

func (a *Client) ContactsSearchContacts(params *ContactsSearchContactsParams, opts ...ClientOption) (*ContactsSearchContactsOK, error) {
	if params == nil {
		params = NewContactsSearchContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contacts_SearchContacts",
		Method:             "GET",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactsSearchContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactsSearchContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Contacts_SearchContacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContactsUpdateContact ns e w update of the contact source
*/

func (a *Client) ContactsUpdateContact(params *ContactsUpdateContactParams, opts ...ClientOption) (*ContactsUpdateContactOK, error) {
	if params == nil {
		params = NewContactsUpdateContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Contacts_UpdateContact",
		Method:             "PATCH",
		PathPattern:        "/contacts/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContactsUpdateContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContactsUpdateContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Contacts_UpdateContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
