// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContactsSearchContactsParams creates a new ContactsSearchContactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContactsSearchContactsParams() *ContactsSearchContactsParams {
	return &ContactsSearchContactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewContactsSearchContactsParamsWithTimeout creates a new ContactsSearchContactsParams object
// with the ability to set a timeout on a request.
func NewContactsSearchContactsParamsWithTimeout(timeout time.Duration) *ContactsSearchContactsParams {
	return &ContactsSearchContactsParams{
		timeout: timeout,
	}
}

// NewContactsSearchContactsParamsWithContext creates a new ContactsSearchContactsParams object
// with the ability to set a context for a request.
func NewContactsSearchContactsParamsWithContext(ctx context.Context) *ContactsSearchContactsParams {
	return &ContactsSearchContactsParams{
		Context: ctx,
	}
}

// NewContactsSearchContactsParamsWithHTTPClient creates a new ContactsSearchContactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewContactsSearchContactsParamsWithHTTPClient(client *http.Client) *ContactsSearchContactsParams {
	return &ContactsSearchContactsParams{
		HTTPClient: client,
	}
}

/*
ContactsSearchContactsParams contains all the parameters to send to the API endpoint

	for the contacts search contacts operation.

	Typically these are written to a http.Request.
*/
type ContactsSearchContactsParams struct {

	/* Fields.

	     Fields [Q]uery to build result dataset record.
	```
	fields ::= field [ *( "," field ) ]
	field  ::= name [ *( func ) ] [ inner ]
	inner  ::= "{" fields "}"
	funcs  ::= *( func )
	func   ::= "." name "(" [ args ] ")"
	name   ::= ALPHA / DIGIT / USCORE

	ALPHA    = %x41-5A / %x61-7A  ; "A"-"Z" / "a"-"z"
	DIGIT    = %x30-39            ; "0"-"9"
	USCORE   = %x5F ; underscore  ; "_"
	```
	*/
	Fields []string

	/* ID.

	     Records with unique IDentifier(s).
	Accept: `id` -or- `etag`.
	*/
	ID []string

	/* Mode.

	    Source access mode requirement.

	- READ: Can `fetch` record. [GET]
	- WRITE: Can `update` record. [PUT|PATCH]
	- DELETE: Can `delete` record. [DELETE]

	    Default: "READ"
	*/
	Mode *string

	/* Page.

	     Page number of result records.   _default(1); offset=(size*(page-1));_

	```javascript
	let
	    offset = 0
	  , page = req.page
	;
	if (page <= 0)
	    page = 1;
	if (page > 1)
	    offset = ((page-1)*size);
	// . . .
	```

	     Format: int32
	*/
	Page *int32

	/* Q.

	     Search term:
	`?` - matches any character
	`*` - matches 0 or more characters
	Used to query records within a set of `qin` fields, eg: name,emails{type},labels etc...
	*/
	Q *string

	/* Qin.

	     [Q]uery[IN] is a set of search fields for term `q`.
	Default: `name{common_name}`.
	*/
	Qin []string

	/* Size.

	     Limit of result page records count.   _default(16); limit=(size<=0?-1:size+1);_

	```javascript
	const
	    default = 16
	  , maximum = 32
	;
	let limit = req.size;
	if (limit <= 0)
	    limit = default;
	if (maximum < limit)
	    limit = maximum;
	// . . .
	```

	     Format: int32
	*/
	Size *int32

	/* Sort.

	     Sort result dataset of records by fields.
	```
	sort ::= *( ORDER name )

	ORDER  = ASC / DESC
	DESC   = "-" / "!"
	ASC    = [ "+" ]   ; Default
	```

	Fields available

	- `id`(seq)
	- `domain`{name}
	- `created_at`
	- `created_by`{name}
	- `updated_at`
	- `updated_by`{name}

	Use ?fields=`field.sort()` option to sort Edge fields.
	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the contacts search contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactsSearchContactsParams) WithDefaults() *ContactsSearchContactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the contacts search contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactsSearchContactsParams) SetDefaults() {
	var (
		modeDefault = string("READ")
	)

	val := ContactsSearchContactsParams{
		Mode: &modeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithTimeout(timeout time.Duration) *ContactsSearchContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithContext(ctx context.Context) *ContactsSearchContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithHTTPClient(client *http.Client) *ContactsSearchContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithFields(fields []string) *ContactsSearchContactsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithID(id []string) *ContactsSearchContactsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetID(id []string) {
	o.ID = id
}

// WithMode adds the mode to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithMode(mode *string) *ContactsSearchContactsParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithPage adds the page to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithPage(page *int32) *ContactsSearchContactsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithQ(q *string) *ContactsSearchContactsParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetQ(q *string) {
	o.Q = q
}

// WithQin adds the qin to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithQin(qin []string) *ContactsSearchContactsParams {
	o.SetQin(qin)
	return o
}

// SetQin adds the qin to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetQin(qin []string) {
	o.Qin = qin
}

// WithSize adds the size to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithSize(size *int32) *ContactsSearchContactsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the contacts search contacts params
func (o *ContactsSearchContactsParams) WithSort(sort []string) *ContactsSearchContactsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the contacts search contacts params
func (o *ContactsSearchContactsParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ContactsSearchContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Mode != nil {

		// query param mode
		var qrMode string

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Qin != nil {

		// binding items for qin
		joinedQin := o.bindParamQin(reg)

		// query array param qin
		if err := r.SetQueryParam("qin", joinedQin...); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamContactsSearchContacts binds the parameter fields
func (o *ContactsSearchContactsParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamContactsSearchContacts binds the parameter id
func (o *ContactsSearchContactsParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamContactsSearchContacts binds the parameter qin
func (o *ContactsSearchContactsParams) bindParamQin(formats strfmt.Registry) []string {
	qinIR := o.Qin

	var qinIC []string
	for _, qinIIR := range qinIR { // explode []string

		qinIIV := qinIIR // string as string
		qinIC = append(qinIC, qinIIV)
	}

	// items.CollectionFormat: "multi"
	qinIS := swag.JoinByFormat(qinIC, "multi")

	return qinIS
}

// bindParamContactsSearchContacts binds the parameter sort
func (o *ContactsSearchContactsParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
