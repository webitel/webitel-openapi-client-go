// Code generated by go-swagger; DO NOT EDIT.

package contacts_chat_catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContactsChatCatalogGetContactChatHistoryParams creates a new ContactsChatCatalogGetContactChatHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContactsChatCatalogGetContactChatHistoryParams() *ContactsChatCatalogGetContactChatHistoryParams {
	return &ContactsChatCatalogGetContactChatHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewContactsChatCatalogGetContactChatHistoryParamsWithTimeout creates a new ContactsChatCatalogGetContactChatHistoryParams object
// with the ability to set a timeout on a request.
func NewContactsChatCatalogGetContactChatHistoryParamsWithTimeout(timeout time.Duration) *ContactsChatCatalogGetContactChatHistoryParams {
	return &ContactsChatCatalogGetContactChatHistoryParams{
		timeout: timeout,
	}
}

// NewContactsChatCatalogGetContactChatHistoryParamsWithContext creates a new ContactsChatCatalogGetContactChatHistoryParams object
// with the ability to set a context for a request.
func NewContactsChatCatalogGetContactChatHistoryParamsWithContext(ctx context.Context) *ContactsChatCatalogGetContactChatHistoryParams {
	return &ContactsChatCatalogGetContactChatHistoryParams{
		Context: ctx,
	}
}

// NewContactsChatCatalogGetContactChatHistoryParamsWithHTTPClient creates a new ContactsChatCatalogGetContactChatHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewContactsChatCatalogGetContactChatHistoryParamsWithHTTPClient(client *http.Client) *ContactsChatCatalogGetContactChatHistoryParams {
	return &ContactsChatCatalogGetContactChatHistoryParams{
		HTTPClient: client,
	}
}

/*
ContactsChatCatalogGetContactChatHistoryParams contains all the parameters to send to the API endpoint

	for the contacts chat catalog get contact chat history operation.

	Typically these are written to a http.Request.
*/
type ContactsChatCatalogGetContactChatHistoryParams struct {

	/* ChatID.

	   Unique chat dialog
	*/
	ChatID string

	/* ContactID.

	   Contact identificator
	*/
	ContactID string

	/* Fields.

	   Fields to return into result.
	*/
	Fields []string

	/* GroupString.

	   This is a request variable of the map type. The query format is "map_name[key]=value", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age["bob"]=18
	*/
	GroupString *string

	/* OffsetDate.

	   Messages ONLY been sent before the specified epochtime(milli).

	   Format: int64
	*/
	OffsetDate *string

	/* OffsetID.

	   Messages ONLY starting from the specified message ID

	   Format: int64
	*/
	OffsetID *string

	// Page.
	//
	// Format: int32
	Page *int32

	/* Q.

	   Search term: message.text
	*/
	Q *string

	/* Size.

	   Number of messages to return.

	   Format: int32
	*/
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the contacts chat catalog get contact chat history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithDefaults() *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the contacts chat catalog get contact chat history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithTimeout(timeout time.Duration) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithContext(ctx context.Context) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithHTTPClient(client *http.Client) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatID adds the chatID to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithChatID(chatID string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetChatID(chatID)
	return o
}

// SetChatID adds the chatId to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetChatID(chatID string) {
	o.ChatID = chatID
}

// WithContactID adds the contactID to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithContactID(contactID string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetContactID(contactID string) {
	o.ContactID = contactID
}

// WithFields adds the fields to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithFields(fields []string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithGroupString adds the groupString to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithGroupString(groupString *string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetGroupString(groupString)
	return o
}

// SetGroupString adds the groupString to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetGroupString(groupString *string) {
	o.GroupString = groupString
}

// WithOffsetDate adds the offsetDate to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithOffsetDate(offsetDate *string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetOffsetDate(offsetDate)
	return o
}

// SetOffsetDate adds the offsetDate to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetOffsetDate(offsetDate *string) {
	o.OffsetDate = offsetDate
}

// WithOffsetID adds the offsetID to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithOffsetID(offsetID *string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetOffsetID(offsetID)
	return o
}

// SetOffsetID adds the offsetId to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetOffsetID(offsetID *string) {
	o.OffsetID = offsetID
}

// WithPage adds the page to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithPage(page *int32) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithQ(q *string) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) WithSize(size *int32) *ContactsChatCatalogGetContactChatHistoryParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the contacts chat catalog get contact chat history params
func (o *ContactsChatCatalogGetContactChatHistoryParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *ContactsChatCatalogGetContactChatHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param chat_id
	if err := r.SetPathParam("chat_id", o.ChatID); err != nil {
		return err
	}

	// path param contact_id
	if err := r.SetPathParam("contact_id", o.ContactID); err != nil {
		return err
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GroupString != nil {

		// query param group[string]
		var qrGroupString string

		if o.GroupString != nil {
			qrGroupString = *o.GroupString
		}
		qGroupString := qrGroupString
		if qGroupString != "" {

			if err := r.SetQueryParam("group[string]", qGroupString); err != nil {
				return err
			}
		}
	}

	if o.OffsetDate != nil {

		// query param offset.date
		var qrOffsetDate string

		if o.OffsetDate != nil {
			qrOffsetDate = *o.OffsetDate
		}
		qOffsetDate := qrOffsetDate
		if qOffsetDate != "" {

			if err := r.SetQueryParam("offset.date", qOffsetDate); err != nil {
				return err
			}
		}
	}

	if o.OffsetID != nil {

		// query param offset.id
		var qrOffsetID string

		if o.OffsetID != nil {
			qrOffsetID = *o.OffsetID
		}
		qOffsetID := qrOffsetID
		if qOffsetID != "" {

			if err := r.SetQueryParam("offset.id", qOffsetID); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamContactsChatCatalogGetContactChatHistory binds the parameter fields
func (o *ContactsChatCatalogGetContactChatHistoryParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
