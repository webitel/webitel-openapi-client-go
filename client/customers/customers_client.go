// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomersGetCustomer(params *CustomersGetCustomerParams, opts ...ClientOption) (*CustomersGetCustomerOK, error)

	CustomersGetCustomer2(params *CustomersGetCustomer2Params, opts ...ClientOption) (*CustomersGetCustomer2OK, error)

	CustomersLicenseUsage(params *CustomersLicenseUsageParams, opts ...ClientOption) (*CustomersLicenseUsageOK, error)

	CustomersLicenseUsage2(params *CustomersLicenseUsage2Params, opts ...ClientOption) (*CustomersLicenseUsage2OK, error)

	CustomersLicenseUsage3(params *CustomersLicenseUsage3Params, opts ...ClientOption) (*CustomersLicenseUsage3OK, error)

	CustomersLicenseUsers(params *CustomersLicenseUsersParams, opts ...ClientOption) (*CustomersLicenseUsersOK, error)

	CustomersServerInfo(opts ...ClientOption) (*CustomersServerInfoOK, error)
	CustomersServerInfoWithParams(params *CustomersServerInfoParams, opts ...ClientOption) (*CustomersServerInfoOK, error)

	CustomersUpdateCustomer(params *CustomersUpdateCustomerParams, opts ...ClientOption) (*CustomersUpdateCustomerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CustomersGetCustomer rpcs get certificate certificate usage request returns certificate usage response
*/

func (a *Client) CustomersGetCustomer(params *CustomersGetCustomerParams, opts ...ClientOption) (*CustomersGetCustomerOK, error) {
	if params == nil {
		params = NewCustomersGetCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_GetCustomer",
		Method:             "GET",
		PathPattern:        "/customer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersGetCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersGetCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_GetCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersGetCustomer2 rpcs get certificate certificate usage request returns certificate usage response
*/

func (a *Client) CustomersGetCustomer2(params *CustomersGetCustomer2Params, opts ...ClientOption) (*CustomersGetCustomer2OK, error) {
	if params == nil {
		params = NewCustomersGetCustomer2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_GetCustomer2",
		Method:             "GET",
		PathPattern:        "/customer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersGetCustomer2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersGetCustomer2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_GetCustomer2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersLicenseUsage customers license usage API
*/

func (a *Client) CustomersLicenseUsage(params *CustomersLicenseUsageParams, opts ...ClientOption) (*CustomersLicenseUsageOK, error) {
	if params == nil {
		params = NewCustomersLicenseUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_LicenseUsage",
		Method:             "GET",
		PathPattern:        "/customer/{customer_id}/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersLicenseUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersLicenseUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_LicenseUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersLicenseUsage2 customers license usage2 API
*/

func (a *Client) CustomersLicenseUsage2(params *CustomersLicenseUsage2Params, opts ...ClientOption) (*CustomersLicenseUsage2OK, error) {
	if params == nil {
		params = NewCustomersLicenseUsage2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_LicenseUsage2",
		Method:             "GET",
		PathPattern:        "/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersLicenseUsage2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersLicenseUsage2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_LicenseUsage2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersLicenseUsage3 customers license usage3 API
*/

func (a *Client) CustomersLicenseUsage3(params *CustomersLicenseUsage3Params, opts ...ClientOption) (*CustomersLicenseUsage3OK, error) {
	if params == nil {
		params = NewCustomersLicenseUsage3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_LicenseUsage3",
		Method:             "GET",
		PathPattern:        "/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersLicenseUsage3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersLicenseUsage3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_LicenseUsage3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersLicenseUsers customers license users API
*/

func (a *Client) CustomersLicenseUsers(params *CustomersLicenseUsersParams, opts ...ClientOption) (*CustomersLicenseUsersOK, error) {
	if params == nil {
		params = NewCustomersLicenseUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_LicenseUsers",
		Method:             "GET",
		PathPattern:        "/products/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersLicenseUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersLicenseUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_LicenseUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersServerInfo customers server info API
*/
func (a *Client) CustomersServerInfo(opts ...ClientOption) (*CustomersServerInfoOK, error) {
	params := NewCustomersServerInfoParams()
	return a.CustomersServerInfoWithParams(params, opts...)
}

func (a *Client) CustomersServerInfoWithParams(params *CustomersServerInfoParams, opts ...ClientOption) (*CustomersServerInfoOK, error) {
	if params == nil {
		params = NewCustomersServerInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_ServerInfo",
		Method:             "GET",
		PathPattern:        "/srvinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersServerInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersServerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_ServerInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersUpdateCustomer customers update customer API
*/

func (a *Client) CustomersUpdateCustomer(params *CustomersUpdateCustomerParams, opts ...ClientOption) (*CustomersUpdateCustomerOK, error) {
	if params == nil {
		params = NewCustomersUpdateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customers_UpdateCustomer",
		Method:             "PUT",
		PathPattern:        "/customer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersUpdateCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersUpdateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Customers_UpdateCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
