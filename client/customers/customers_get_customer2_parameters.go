// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomersGetCustomer2Params creates a new CustomersGetCustomer2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomersGetCustomer2Params() *CustomersGetCustomer2Params {
	return &CustomersGetCustomer2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomersGetCustomer2ParamsWithTimeout creates a new CustomersGetCustomer2Params object
// with the ability to set a timeout on a request.
func NewCustomersGetCustomer2ParamsWithTimeout(timeout time.Duration) *CustomersGetCustomer2Params {
	return &CustomersGetCustomer2Params{
		timeout: timeout,
	}
}

// NewCustomersGetCustomer2ParamsWithContext creates a new CustomersGetCustomer2Params object
// with the ability to set a context for a request.
func NewCustomersGetCustomer2ParamsWithContext(ctx context.Context) *CustomersGetCustomer2Params {
	return &CustomersGetCustomer2Params{
		Context: ctx,
	}
}

// NewCustomersGetCustomer2ParamsWithHTTPClient creates a new CustomersGetCustomer2Params object
// with the ability to set a custom HTTPClient for a request.
func NewCustomersGetCustomer2ParamsWithHTTPClient(client *http.Client) *CustomersGetCustomer2Params {
	return &CustomersGetCustomer2Params{
		HTTPClient: client,
	}
}

/*
CustomersGetCustomer2Params contains all the parameters to send to the API endpoint

	for the customers get customer2 operation.

	Typically these are written to a http.Request.
*/
type CustomersGetCustomer2Params struct {

	/* DomainID.

	   identifier

	   Format: int64
	*/
	DomainID *string

	/* DomainName.

	   display name
	*/
	DomainName *string

	/* Fields.

	     Request Controls

	serial,
	*/
	Fields []string

	/* ID.

	     Available Filters

	show by customer id; serial number (uuid)
	*/
	ID string

	// Sort.
	Sort []string

	/* Valid.

	   show if valid only!
	*/
	Valid *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customers get customer2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersGetCustomer2Params) WithDefaults() *CustomersGetCustomer2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customers get customer2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersGetCustomer2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithTimeout(timeout time.Duration) *CustomersGetCustomer2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithContext(ctx context.Context) *CustomersGetCustomer2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithHTTPClient(client *http.Client) *CustomersGetCustomer2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithDomainID(domainID *string) *CustomersGetCustomer2Params {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WithDomainName adds the domainName to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithDomainName(domainName *string) *CustomersGetCustomer2Params {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetDomainName(domainName *string) {
	o.DomainName = domainName
}

// WithFields adds the fields to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithFields(fields []string) *CustomersGetCustomer2Params {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithID(id string) *CustomersGetCustomer2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetID(id string) {
	o.ID = id
}

// WithSort adds the sort to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithSort(sort []string) *CustomersGetCustomer2Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetSort(sort []string) {
	o.Sort = sort
}

// WithValid adds the valid to the customers get customer2 params
func (o *CustomersGetCustomer2Params) WithValid(valid *bool) *CustomersGetCustomer2Params {
	o.SetValid(valid)
	return o
}

// SetValid adds the valid to the customers get customer2 params
func (o *CustomersGetCustomer2Params) SetValid(valid *bool) {
	o.Valid = valid
}

// WriteToRequest writes these params to a swagger request
func (o *CustomersGetCustomer2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainID != nil {

		// query param domain.id
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domain.id", qDomainID); err != nil {
				return err
			}
		}
	}

	if o.DomainName != nil {

		// query param domain.name
		var qrDomainName string

		if o.DomainName != nil {
			qrDomainName = *o.DomainName
		}
		qDomainName := qrDomainName
		if qDomainName != "" {

			if err := r.SetQueryParam("domain.name", qDomainName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.Valid != nil {

		// query param valid
		var qrValid bool

		if o.Valid != nil {
			qrValid = *o.Valid
		}
		qValid := swag.FormatBool(qrValid)
		if qValid != "" {

			if err := r.SetQueryParam("valid", qValid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCustomersGetCustomer2 binds the parameter fields
func (o *CustomersGetCustomer2Params) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamCustomersGetCustomer2 binds the parameter sort
func (o *CustomersGetCustomer2Params) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
