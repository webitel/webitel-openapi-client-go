// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomersLicenseUsageParams creates a new CustomersLicenseUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomersLicenseUsageParams() *CustomersLicenseUsageParams {
	return &CustomersLicenseUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomersLicenseUsageParamsWithTimeout creates a new CustomersLicenseUsageParams object
// with the ability to set a timeout on a request.
func NewCustomersLicenseUsageParamsWithTimeout(timeout time.Duration) *CustomersLicenseUsageParams {
	return &CustomersLicenseUsageParams{
		timeout: timeout,
	}
}

// NewCustomersLicenseUsageParamsWithContext creates a new CustomersLicenseUsageParams object
// with the ability to set a context for a request.
func NewCustomersLicenseUsageParamsWithContext(ctx context.Context) *CustomersLicenseUsageParams {
	return &CustomersLicenseUsageParams{
		Context: ctx,
	}
}

// NewCustomersLicenseUsageParamsWithHTTPClient creates a new CustomersLicenseUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomersLicenseUsageParamsWithHTTPClient(client *http.Client) *CustomersLicenseUsageParams {
	return &CustomersLicenseUsageParams{
		HTTPClient: client,
	}
}

/*
CustomersLicenseUsageParams contains all the parameters to send to the API endpoint

	for the customers license usage operation.

	Typically these are written to a http.Request.
*/
type CustomersLicenseUsageParams struct {

	// CustomerID.
	CustomerID string

	/* DomainID.

	   identifier

	   Format: int64
	*/
	DomainID *string

	/* DomainName.

	   display name
	*/
	DomainName *string

	/* Fields.

	   set of output fields
	*/
	Fields []string

	/* ID.

	   by serial number(s)
	*/
	ID []string

	/* Page.

	   default: 1

	   Format: int32
	*/
	Page *int32

	/* Product.

	   by product name(s)
	*/
	Product []string

	/* Q.

	   filter: term of search
	*/
	Q *string

	/* Size.

	     ----- Search Options ----- //

	default: 16

	     Format: int32
	*/
	Size *int32

	/* Sort.

	   e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	*/
	Sort []string

	/* UserID.

	   identifier

	   Format: int64
	*/
	UserID *string

	/* UserName.

	   display name
	*/
	UserName *string

	/* Valid.

	     view: all|valid|grantable

	show: available to be granted
	*/
	Valid *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customers license usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersLicenseUsageParams) WithDefaults() *CustomersLicenseUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customers license usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersLicenseUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customers license usage params
func (o *CustomersLicenseUsageParams) WithTimeout(timeout time.Duration) *CustomersLicenseUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customers license usage params
func (o *CustomersLicenseUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customers license usage params
func (o *CustomersLicenseUsageParams) WithContext(ctx context.Context) *CustomersLicenseUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customers license usage params
func (o *CustomersLicenseUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customers license usage params
func (o *CustomersLicenseUsageParams) WithHTTPClient(client *http.Client) *CustomersLicenseUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customers license usage params
func (o *CustomersLicenseUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the customers license usage params
func (o *CustomersLicenseUsageParams) WithCustomerID(customerID string) *CustomersLicenseUsageParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the customers license usage params
func (o *CustomersLicenseUsageParams) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithDomainID adds the domainID to the customers license usage params
func (o *CustomersLicenseUsageParams) WithDomainID(domainID *string) *CustomersLicenseUsageParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the customers license usage params
func (o *CustomersLicenseUsageParams) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WithDomainName adds the domainName to the customers license usage params
func (o *CustomersLicenseUsageParams) WithDomainName(domainName *string) *CustomersLicenseUsageParams {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the customers license usage params
func (o *CustomersLicenseUsageParams) SetDomainName(domainName *string) {
	o.DomainName = domainName
}

// WithFields adds the fields to the customers license usage params
func (o *CustomersLicenseUsageParams) WithFields(fields []string) *CustomersLicenseUsageParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the customers license usage params
func (o *CustomersLicenseUsageParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the customers license usage params
func (o *CustomersLicenseUsageParams) WithID(id []string) *CustomersLicenseUsageParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customers license usage params
func (o *CustomersLicenseUsageParams) SetID(id []string) {
	o.ID = id
}

// WithPage adds the page to the customers license usage params
func (o *CustomersLicenseUsageParams) WithPage(page *int32) *CustomersLicenseUsageParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the customers license usage params
func (o *CustomersLicenseUsageParams) SetPage(page *int32) {
	o.Page = page
}

// WithProduct adds the product to the customers license usage params
func (o *CustomersLicenseUsageParams) WithProduct(product []string) *CustomersLicenseUsageParams {
	o.SetProduct(product)
	return o
}

// SetProduct adds the product to the customers license usage params
func (o *CustomersLicenseUsageParams) SetProduct(product []string) {
	o.Product = product
}

// WithQ adds the q to the customers license usage params
func (o *CustomersLicenseUsageParams) WithQ(q *string) *CustomersLicenseUsageParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the customers license usage params
func (o *CustomersLicenseUsageParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the customers license usage params
func (o *CustomersLicenseUsageParams) WithSize(size *int32) *CustomersLicenseUsageParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the customers license usage params
func (o *CustomersLicenseUsageParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the customers license usage params
func (o *CustomersLicenseUsageParams) WithSort(sort []string) *CustomersLicenseUsageParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the customers license usage params
func (o *CustomersLicenseUsageParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithUserID adds the userID to the customers license usage params
func (o *CustomersLicenseUsageParams) WithUserID(userID *string) *CustomersLicenseUsageParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the customers license usage params
func (o *CustomersLicenseUsageParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the customers license usage params
func (o *CustomersLicenseUsageParams) WithUserName(userName *string) *CustomersLicenseUsageParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the customers license usage params
func (o *CustomersLicenseUsageParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WithValid adds the valid to the customers license usage params
func (o *CustomersLicenseUsageParams) WithValid(valid *bool) *CustomersLicenseUsageParams {
	o.SetValid(valid)
	return o
}

// SetValid adds the valid to the customers license usage params
func (o *CustomersLicenseUsageParams) SetValid(valid *bool) {
	o.Valid = valid
}

// WriteToRequest writes these params to a swagger request
func (o *CustomersLicenseUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customer_id
	if err := r.SetPathParam("customer_id", o.CustomerID); err != nil {
		return err
	}

	if o.DomainID != nil {

		// query param domain.id
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domain.id", qDomainID); err != nil {
				return err
			}
		}
	}

	if o.DomainName != nil {

		// query param domain.name
		var qrDomainName string

		if o.DomainName != nil {
			qrDomainName = *o.DomainName
		}
		qDomainName := qrDomainName
		if qDomainName != "" {

			if err := r.SetQueryParam("domain.name", qDomainName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Product != nil {

		// binding items for product
		joinedProduct := o.bindParamProduct(reg)

		// query array param product
		if err := r.SetQueryParam("product", joinedProduct...); err != nil {
			return err
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.UserID != nil {

		// query param user.id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param user.name
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if o.Valid != nil {

		// query param valid
		var qrValid bool

		if o.Valid != nil {
			qrValid = *o.Valid
		}
		qValid := swag.FormatBool(qrValid)
		if qValid != "" {

			if err := r.SetQueryParam("valid", qValid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCustomersLicenseUsage binds the parameter fields
func (o *CustomersLicenseUsageParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamCustomersLicenseUsage binds the parameter id
func (o *CustomersLicenseUsageParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamCustomersLicenseUsage binds the parameter product
func (o *CustomersLicenseUsageParams) bindParamProduct(formats strfmt.Registry) []string {
	productIR := o.Product

	var productIC []string
	for _, productIIR := range productIR { // explode []string

		productIIV := productIIR // string as string
		productIC = append(productIC, productIIV)
	}

	// items.CollectionFormat: "multi"
	productIS := swag.JoinByFormat(productIC, "multi")

	return productIS
}

// bindParamCustomersLicenseUsage binds the parameter sort
func (o *CustomersLicenseUsageParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
