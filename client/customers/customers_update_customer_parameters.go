// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomersUpdateCustomerParams creates a new CustomersUpdateCustomerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomersUpdateCustomerParams() *CustomersUpdateCustomerParams {
	return &CustomersUpdateCustomerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomersUpdateCustomerParamsWithTimeout creates a new CustomersUpdateCustomerParams object
// with the ability to set a timeout on a request.
func NewCustomersUpdateCustomerParamsWithTimeout(timeout time.Duration) *CustomersUpdateCustomerParams {
	return &CustomersUpdateCustomerParams{
		timeout: timeout,
	}
}

// NewCustomersUpdateCustomerParamsWithContext creates a new CustomersUpdateCustomerParams object
// with the ability to set a context for a request.
func NewCustomersUpdateCustomerParamsWithContext(ctx context.Context) *CustomersUpdateCustomerParams {
	return &CustomersUpdateCustomerParams{
		Context: ctx,
	}
}

// NewCustomersUpdateCustomerParamsWithHTTPClient creates a new CustomersUpdateCustomerParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomersUpdateCustomerParamsWithHTTPClient(client *http.Client) *CustomersUpdateCustomerParams {
	return &CustomersUpdateCustomerParams{
		HTTPClient: client,
	}
}

/*
CustomersUpdateCustomerParams contains all the parameters to send to the API endpoint

	for the customers update customer operation.

	Typically these are written to a http.Request.
*/
type CustomersUpdateCustomerParams struct {

	/* Certificate.

	   [optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding

	   Format: byte
	*/
	Certificate *strfmt.Base64

	/* LogoPicture.

	   [optional] logo source image

	   Format: byte
	*/
	LogoPicture *strfmt.Base64

	/* Organization.

	   [optional] e.g.: Example Org.
	*/
	Organization *string

	// Revoke.
	Revoke *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customers update customer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersUpdateCustomerParams) WithDefaults() *CustomersUpdateCustomerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customers update customer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomersUpdateCustomerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithTimeout(timeout time.Duration) *CustomersUpdateCustomerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithContext(ctx context.Context) *CustomersUpdateCustomerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithHTTPClient(client *http.Client) *CustomersUpdateCustomerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertificate adds the certificate to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithCertificate(certificate *strfmt.Base64) *CustomersUpdateCustomerParams {
	o.SetCertificate(certificate)
	return o
}

// SetCertificate adds the certificate to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetCertificate(certificate *strfmt.Base64) {
	o.Certificate = certificate
}

// WithLogoPicture adds the logoPicture to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithLogoPicture(logoPicture *strfmt.Base64) *CustomersUpdateCustomerParams {
	o.SetLogoPicture(logoPicture)
	return o
}

// SetLogoPicture adds the logoPicture to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetLogoPicture(logoPicture *strfmt.Base64) {
	o.LogoPicture = logoPicture
}

// WithOrganization adds the organization to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithOrganization(organization *string) *CustomersUpdateCustomerParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetOrganization(organization *string) {
	o.Organization = organization
}

// WithRevoke adds the revoke to the customers update customer params
func (o *CustomersUpdateCustomerParams) WithRevoke(revoke *bool) *CustomersUpdateCustomerParams {
	o.SetRevoke(revoke)
	return o
}

// SetRevoke adds the revoke to the customers update customer params
func (o *CustomersUpdateCustomerParams) SetRevoke(revoke *bool) {
	o.Revoke = revoke
}

// WriteToRequest writes these params to a swagger request
func (o *CustomersUpdateCustomerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Certificate != nil {

		// query param certificate
		var qrCertificate strfmt.Base64

		if o.Certificate != nil {
			qrCertificate = *o.Certificate
		}
		qCertificate := qrCertificate.String()
		if qCertificate != "" {

			if err := r.SetQueryParam("certificate", qCertificate); err != nil {
				return err
			}
		}
	}

	if o.LogoPicture != nil {

		// query param logo_picture
		var qrLogoPicture strfmt.Base64

		if o.LogoPicture != nil {
			qrLogoPicture = *o.LogoPicture
		}
		qLogoPicture := qrLogoPicture.String()
		if qLogoPicture != "" {

			if err := r.SetQueryParam("logo_picture", qLogoPicture); err != nil {
				return err
			}
		}
	}

	if o.Organization != nil {

		// query param organization
		var qrOrganization string

		if o.Organization != nil {
			qrOrganization = *o.Organization
		}
		qOrganization := qrOrganization
		if qOrganization != "" {

			if err := r.SetQueryParam("organization", qOrganization); err != nil {
				return err
			}
		}
	}

	if o.Revoke != nil {

		// query param revoke
		var qrRevoke bool

		if o.Revoke != nil {
			qrRevoke = *o.Revoke
		}
		qRevoke := swag.FormatBool(qrRevoke)
		if qRevoke != "" {

			if err := r.SetQueryParam("revoke", qRevoke); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
