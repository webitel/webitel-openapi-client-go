// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DevicesCreateDevice(device *models.APIDevice, opts ...ClientOption) (*DevicesCreateDeviceOK, error)
	DevicesCreateDeviceWithParams(params *DevicesCreateDeviceParams, opts ...ClientOption) (*DevicesCreateDeviceOK, error)

	DevicesDeleteDevice(params *DevicesDeleteDeviceParams, opts ...ClientOption) (*DevicesDeleteDeviceOK, error)

	DevicesDeleteDevice2(params *DevicesDeleteDevice2Params, opts ...ClientOption) (*DevicesDeleteDevice2OK, error)

	DevicesListRegistrations(params *DevicesListRegistrationsParams, opts ...ClientOption) (*DevicesListRegistrationsOK, error)

	DevicesReadDevice(params *DevicesReadDeviceParams, opts ...ClientOption) (*DevicesReadDeviceOK, error)

	DevicesSearchDevice(params *DevicesSearchDeviceParams, opts ...ClientOption) (*DevicesSearchDeviceOK, error)

	DevicesSearchDeviceAudit(params *DevicesSearchDeviceAuditParams, opts ...ClientOption) (*DevicesSearchDeviceAuditOK, error)

	DevicesUpdateDevice(params *DevicesUpdateDeviceParams, opts ...ClientOption) (*DevicesUpdateDeviceOK, error)

	DevicesUpdateDevice2(params *DevicesUpdateDevice2Params, opts ...ClientOption) (*DevicesUpdateDevice2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DevicesCreateDevice devices create device API
*/
func (a *Client) DevicesCreateDevice(device *models.APIDevice, opts ...ClientOption) (*DevicesCreateDeviceOK, error) {
	params := NewDevicesCreateDeviceParams().WithDevice(device)
	return a.DevicesCreateDeviceWithParams(params, opts...)
}

func (a *Client) DevicesCreateDeviceWithParams(params *DevicesCreateDeviceParams, opts ...ClientOption) (*DevicesCreateDeviceOK, error) {
	if params == nil {
		params = NewDevicesCreateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_CreateDevice",
		Method:             "POST",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesCreateDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesCreateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_CreateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesDeleteDevice devices delete device API
*/

func (a *Client) DevicesDeleteDevice(params *DevicesDeleteDeviceParams, opts ...ClientOption) (*DevicesDeleteDeviceOK, error) {
	if params == nil {
		params = NewDevicesDeleteDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_DeleteDevice",
		Method:             "DELETE",
		PathPattern:        "/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesDeleteDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesDeleteDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_DeleteDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesDeleteDevice2 devices delete device2 API
*/

func (a *Client) DevicesDeleteDevice2(params *DevicesDeleteDevice2Params, opts ...ClientOption) (*DevicesDeleteDevice2OK, error) {
	if params == nil {
		params = NewDevicesDeleteDevice2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_DeleteDevice2",
		Method:             "DELETE",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesDeleteDevice2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesDeleteDevice2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_DeleteDevice2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesListRegistrations devices list registrations API
*/

func (a *Client) DevicesListRegistrations(params *DevicesListRegistrationsParams, opts ...ClientOption) (*DevicesListRegistrationsOK, error) {
	if params == nil {
		params = NewDevicesListRegistrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_ListRegistrations",
		Method:             "GET",
		PathPattern:        "/devices/{device.id}/registered",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesListRegistrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesListRegistrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ListRegistrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesReadDevice devices read device API
*/

func (a *Client) DevicesReadDevice(params *DevicesReadDeviceParams, opts ...ClientOption) (*DevicesReadDeviceOK, error) {
	if params == nil {
		params = NewDevicesReadDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_ReadDevice",
		Method:             "GET",
		PathPattern:        "/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesReadDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesReadDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ReadDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesSearchDevice devices search device API
*/

func (a *Client) DevicesSearchDevice(params *DevicesSearchDeviceParams, opts ...ClientOption) (*DevicesSearchDeviceOK, error) {
	if params == nil {
		params = NewDevicesSearchDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_SearchDevice",
		Method:             "GET",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesSearchDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesSearchDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_SearchDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesSearchDeviceAudit details 1 m
*/

func (a *Client) DevicesSearchDeviceAudit(params *DevicesSearchDeviceAuditParams, opts ...ClientOption) (*DevicesSearchDeviceAuditOK, error) {
	if params == nil {
		params = NewDevicesSearchDeviceAuditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_SearchDeviceAudit",
		Method:             "GET",
		PathPattern:        "/devices/{device.id}/users/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesSearchDeviceAuditReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesSearchDeviceAuditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_SearchDeviceAudit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesUpdateDevice devices update device API
*/

func (a *Client) DevicesUpdateDevice(params *DevicesUpdateDeviceParams, opts ...ClientOption) (*DevicesUpdateDeviceOK, error) {
	if params == nil {
		params = NewDevicesUpdateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_UpdateDevice",
		Method:             "PUT",
		PathPattern:        "/devices/{device.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DevicesUpdateDevice2 devices update device2 API
*/

func (a *Client) DevicesUpdateDevice2(params *DevicesUpdateDevice2Params, opts ...ClientOption) (*DevicesUpdateDevice2OK, error) {
	if params == nil {
		params = NewDevicesUpdateDevice2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Devices_UpdateDevice2",
		Method:             "PATCH",
		PathPattern:        "/devices/{device.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateDevice2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateDevice2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateDevice2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
