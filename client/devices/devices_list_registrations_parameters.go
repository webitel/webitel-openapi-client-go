// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDevicesListRegistrationsParams creates a new DevicesListRegistrationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDevicesListRegistrationsParams() *DevicesListRegistrationsParams {
	return &DevicesListRegistrationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDevicesListRegistrationsParamsWithTimeout creates a new DevicesListRegistrationsParams object
// with the ability to set a timeout on a request.
func NewDevicesListRegistrationsParamsWithTimeout(timeout time.Duration) *DevicesListRegistrationsParams {
	return &DevicesListRegistrationsParams{
		timeout: timeout,
	}
}

// NewDevicesListRegistrationsParamsWithContext creates a new DevicesListRegistrationsParams object
// with the ability to set a context for a request.
func NewDevicesListRegistrationsParamsWithContext(ctx context.Context) *DevicesListRegistrationsParams {
	return &DevicesListRegistrationsParams{
		Context: ctx,
	}
}

// NewDevicesListRegistrationsParamsWithHTTPClient creates a new DevicesListRegistrationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDevicesListRegistrationsParamsWithHTTPClient(client *http.Client) *DevicesListRegistrationsParams {
	return &DevicesListRegistrationsParams{
		HTTPClient: client,
	}
}

/*
DevicesListRegistrationsParams contains all the parameters to send to the API endpoint

	for the devices list registrations operation.

	Typically these are written to a http.Request.
*/
type DevicesListRegistrationsParams struct {

	/* DeviceID.

	   Object ID

	   Format: int64
	*/
	DeviceID string

	/* DeviceName.

	   Display Name
	*/
	DeviceName *string

	/* UserID.

	   Object ID

	   Format: int64
	*/
	UserID *string

	/* UserName.

	   Display Name
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the devices list registrations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesListRegistrationsParams) WithDefaults() *DevicesListRegistrationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the devices list registrations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesListRegistrationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithTimeout(timeout time.Duration) *DevicesListRegistrationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithContext(ctx context.Context) *DevicesListRegistrationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithHTTPClient(client *http.Client) *DevicesListRegistrationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithDeviceID(deviceID string) *DevicesListRegistrationsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithDeviceName adds the deviceName to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithDeviceName(deviceName *string) *DevicesListRegistrationsParams {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithUserID adds the userID to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithUserID(userID *string) *DevicesListRegistrationsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the devices list registrations params
func (o *DevicesListRegistrationsParams) WithUserName(userName *string) *DevicesListRegistrationsParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the devices list registrations params
func (o *DevicesListRegistrationsParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *DevicesListRegistrationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device.id
	if err := r.SetPathParam("device.id", o.DeviceID); err != nil {
		return err
	}

	if o.DeviceName != nil {

		// query param device.name
		var qrDeviceName string

		if o.DeviceName != nil {
			qrDeviceName = *o.DeviceName
		}
		qDeviceName := qrDeviceName
		if qDeviceName != "" {

			if err := r.SetQueryParam("device.name", qDeviceName); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user.id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param user.name
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
