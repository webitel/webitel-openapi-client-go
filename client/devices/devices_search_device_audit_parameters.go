// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDevicesSearchDeviceAuditParams creates a new DevicesSearchDeviceAuditParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDevicesSearchDeviceAuditParams() *DevicesSearchDeviceAuditParams {
	return &DevicesSearchDeviceAuditParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDevicesSearchDeviceAuditParamsWithTimeout creates a new DevicesSearchDeviceAuditParams object
// with the ability to set a timeout on a request.
func NewDevicesSearchDeviceAuditParamsWithTimeout(timeout time.Duration) *DevicesSearchDeviceAuditParams {
	return &DevicesSearchDeviceAuditParams{
		timeout: timeout,
	}
}

// NewDevicesSearchDeviceAuditParamsWithContext creates a new DevicesSearchDeviceAuditParams object
// with the ability to set a context for a request.
func NewDevicesSearchDeviceAuditParamsWithContext(ctx context.Context) *DevicesSearchDeviceAuditParams {
	return &DevicesSearchDeviceAuditParams{
		Context: ctx,
	}
}

// NewDevicesSearchDeviceAuditParamsWithHTTPClient creates a new DevicesSearchDeviceAuditParams object
// with the ability to set a custom HTTPClient for a request.
func NewDevicesSearchDeviceAuditParamsWithHTTPClient(client *http.Client) *DevicesSearchDeviceAuditParams {
	return &DevicesSearchDeviceAuditParams{
		HTTPClient: client,
	}
}

/*
DevicesSearchDeviceAuditParams contains all the parameters to send to the API endpoint

	for the devices search device audit operation.

	Typically these are written to a http.Request.
*/
type DevicesSearchDeviceAuditParams struct {

	/* DeviceID.

	   Object ID

	   Format: int64
	*/
	DeviceID string

	/* DeviceName.

	   Display Name
	*/
	DeviceName *string

	/* Fields.

	   Search Options
	*/
	Fields []string

	// Page.
	//
	// Format: int32
	Page *int32

	// Size.
	//
	// Format: int32
	Size *int32

	// Sort.
	Sort []string

	/* TimeFrom.

	     Filter: timing range (optional)

	unix milliseconds

	     Format: int64
	*/
	TimeFrom *string

	/* TimeTill.

	   unix milliseconds

	   Format: int64
	*/
	TimeTill *string

	/* UserID.

	   Object ID

	   Format: int64
	*/
	UserID *string

	/* UserName.

	   Display Name
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the devices search device audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesSearchDeviceAuditParams) WithDefaults() *DevicesSearchDeviceAuditParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the devices search device audit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesSearchDeviceAuditParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithTimeout(timeout time.Duration) *DevicesSearchDeviceAuditParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithContext(ctx context.Context) *DevicesSearchDeviceAuditParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithHTTPClient(client *http.Client) *DevicesSearchDeviceAuditParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithDeviceID(deviceID string) *DevicesSearchDeviceAuditParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithDeviceName adds the deviceName to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithDeviceName(deviceName *string) *DevicesSearchDeviceAuditParams {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithFields adds the fields to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithFields(fields []string) *DevicesSearchDeviceAuditParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithPage adds the page to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithPage(page *int32) *DevicesSearchDeviceAuditParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetPage(page *int32) {
	o.Page = page
}

// WithSize adds the size to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithSize(size *int32) *DevicesSearchDeviceAuditParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithSort(sort []string) *DevicesSearchDeviceAuditParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithTimeFrom adds the timeFrom to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithTimeFrom(timeFrom *string) *DevicesSearchDeviceAuditParams {
	o.SetTimeFrom(timeFrom)
	return o
}

// SetTimeFrom adds the timeFrom to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetTimeFrom(timeFrom *string) {
	o.TimeFrom = timeFrom
}

// WithTimeTill adds the timeTill to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithTimeTill(timeTill *string) *DevicesSearchDeviceAuditParams {
	o.SetTimeTill(timeTill)
	return o
}

// SetTimeTill adds the timeTill to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetTimeTill(timeTill *string) {
	o.TimeTill = timeTill
}

// WithUserID adds the userID to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithUserID(userID *string) *DevicesSearchDeviceAuditParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) WithUserName(userName *string) *DevicesSearchDeviceAuditParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the devices search device audit params
func (o *DevicesSearchDeviceAuditParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *DevicesSearchDeviceAuditParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device.id
	if err := r.SetPathParam("device.id", o.DeviceID); err != nil {
		return err
	}

	if o.DeviceName != nil {

		// query param device.name
		var qrDeviceName string

		if o.DeviceName != nil {
			qrDeviceName = *o.DeviceName
		}
		qDeviceName := qrDeviceName
		if qDeviceName != "" {

			if err := r.SetQueryParam("device.name", qDeviceName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.TimeFrom != nil {

		// query param time_from
		var qrTimeFrom string

		if o.TimeFrom != nil {
			qrTimeFrom = *o.TimeFrom
		}
		qTimeFrom := qrTimeFrom
		if qTimeFrom != "" {

			if err := r.SetQueryParam("time_from", qTimeFrom); err != nil {
				return err
			}
		}
	}

	if o.TimeTill != nil {

		// query param time_till
		var qrTimeTill string

		if o.TimeTill != nil {
			qrTimeTill = *o.TimeTill
		}
		qTimeTill := qrTimeTill
		if qTimeTill != "" {

			if err := r.SetQueryParam("time_till", qTimeTill); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user.id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param user.name
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDevicesSearchDeviceAudit binds the parameter fields
func (o *DevicesSearchDeviceAuditParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamDevicesSearchDeviceAudit binds the parameter sort
func (o *DevicesSearchDeviceAuditParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
