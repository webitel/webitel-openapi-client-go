// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDevicesSearchDeviceParams creates a new DevicesSearchDeviceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDevicesSearchDeviceParams() *DevicesSearchDeviceParams {
	return &DevicesSearchDeviceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDevicesSearchDeviceParamsWithTimeout creates a new DevicesSearchDeviceParams object
// with the ability to set a timeout on a request.
func NewDevicesSearchDeviceParamsWithTimeout(timeout time.Duration) *DevicesSearchDeviceParams {
	return &DevicesSearchDeviceParams{
		timeout: timeout,
	}
}

// NewDevicesSearchDeviceParamsWithContext creates a new DevicesSearchDeviceParams object
// with the ability to set a context for a request.
func NewDevicesSearchDeviceParamsWithContext(ctx context.Context) *DevicesSearchDeviceParams {
	return &DevicesSearchDeviceParams{
		Context: ctx,
	}
}

// NewDevicesSearchDeviceParamsWithHTTPClient creates a new DevicesSearchDeviceParams object
// with the ability to set a custom HTTPClient for a request.
func NewDevicesSearchDeviceParamsWithHTTPClient(client *http.Client) *DevicesSearchDeviceParams {
	return &DevicesSearchDeviceParams{
		HTTPClient: client,
	}
}

/*
DevicesSearchDeviceParams contains all the parameters to send to the API endpoint

	for the devices search device operation.

	Typically these are written to a http.Request.
*/
type DevicesSearchDeviceParams struct {

	/* Access.

	   [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
	*/
	Access *string

	/* Account.

	     ----- Device-Specific Filters ----------------

	substring like '%name%'
	*/
	Account *string

	/* Fields.

	   attributes list
	*/
	Fields []string

	/* Hotdesk.

	   filter: has hotdesk (=pattern); is hotdesk (=*)
	*/
	Hotdesk *string

	/* Ids.

	     ----- Search Basic Filters ---------------------------

	selection: by unique identifier
	*/
	Ids []string

	/* IP.

	   filter: by IP address
	*/
	IP *string

	/* Mac.

	   filter: by MAC address
	*/
	Mac *string

	/* Name.

	   case-ignore substring match: ILIKE '*' - any; '?' - one
	*/
	Name *string

	/* Page.

	   default: 1

	   Format: int32
	*/
	Page *int32

	/* Q.

	   term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]
	*/
	Q *string

	/* Size.

	     ----- Select Options -------------------------

	default: 16

	     Format: int32
	*/
	Size *int32

	/* Sort.

	   e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	*/
	Sort []string

	/* UserID.

	   Object ID

	   Format: int64
	*/
	UserID *string

	/* UserName.

	   Display Name
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the devices search device params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesSearchDeviceParams) WithDefaults() *DevicesSearchDeviceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the devices search device params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DevicesSearchDeviceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the devices search device params
func (o *DevicesSearchDeviceParams) WithTimeout(timeout time.Duration) *DevicesSearchDeviceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the devices search device params
func (o *DevicesSearchDeviceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the devices search device params
func (o *DevicesSearchDeviceParams) WithContext(ctx context.Context) *DevicesSearchDeviceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the devices search device params
func (o *DevicesSearchDeviceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the devices search device params
func (o *DevicesSearchDeviceParams) WithHTTPClient(client *http.Client) *DevicesSearchDeviceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the devices search device params
func (o *DevicesSearchDeviceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccess adds the access to the devices search device params
func (o *DevicesSearchDeviceParams) WithAccess(access *string) *DevicesSearchDeviceParams {
	o.SetAccess(access)
	return o
}

// SetAccess adds the access to the devices search device params
func (o *DevicesSearchDeviceParams) SetAccess(access *string) {
	o.Access = access
}

// WithAccount adds the account to the devices search device params
func (o *DevicesSearchDeviceParams) WithAccount(account *string) *DevicesSearchDeviceParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the devices search device params
func (o *DevicesSearchDeviceParams) SetAccount(account *string) {
	o.Account = account
}

// WithFields adds the fields to the devices search device params
func (o *DevicesSearchDeviceParams) WithFields(fields []string) *DevicesSearchDeviceParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the devices search device params
func (o *DevicesSearchDeviceParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHotdesk adds the hotdesk to the devices search device params
func (o *DevicesSearchDeviceParams) WithHotdesk(hotdesk *string) *DevicesSearchDeviceParams {
	o.SetHotdesk(hotdesk)
	return o
}

// SetHotdesk adds the hotdesk to the devices search device params
func (o *DevicesSearchDeviceParams) SetHotdesk(hotdesk *string) {
	o.Hotdesk = hotdesk
}

// WithIds adds the ids to the devices search device params
func (o *DevicesSearchDeviceParams) WithIds(ids []string) *DevicesSearchDeviceParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the devices search device params
func (o *DevicesSearchDeviceParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithIP adds the ip to the devices search device params
func (o *DevicesSearchDeviceParams) WithIP(ip *string) *DevicesSearchDeviceParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the devices search device params
func (o *DevicesSearchDeviceParams) SetIP(ip *string) {
	o.IP = ip
}

// WithMac adds the mac to the devices search device params
func (o *DevicesSearchDeviceParams) WithMac(mac *string) *DevicesSearchDeviceParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the devices search device params
func (o *DevicesSearchDeviceParams) SetMac(mac *string) {
	o.Mac = mac
}

// WithName adds the name to the devices search device params
func (o *DevicesSearchDeviceParams) WithName(name *string) *DevicesSearchDeviceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the devices search device params
func (o *DevicesSearchDeviceParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the devices search device params
func (o *DevicesSearchDeviceParams) WithPage(page *int32) *DevicesSearchDeviceParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the devices search device params
func (o *DevicesSearchDeviceParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the devices search device params
func (o *DevicesSearchDeviceParams) WithQ(q *string) *DevicesSearchDeviceParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the devices search device params
func (o *DevicesSearchDeviceParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the devices search device params
func (o *DevicesSearchDeviceParams) WithSize(size *int32) *DevicesSearchDeviceParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the devices search device params
func (o *DevicesSearchDeviceParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the devices search device params
func (o *DevicesSearchDeviceParams) WithSort(sort []string) *DevicesSearchDeviceParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the devices search device params
func (o *DevicesSearchDeviceParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithUserID adds the userID to the devices search device params
func (o *DevicesSearchDeviceParams) WithUserID(userID *string) *DevicesSearchDeviceParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the devices search device params
func (o *DevicesSearchDeviceParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the devices search device params
func (o *DevicesSearchDeviceParams) WithUserName(userName *string) *DevicesSearchDeviceParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the devices search device params
func (o *DevicesSearchDeviceParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *DevicesSearchDeviceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Access != nil {

		// query param access
		var qrAccess string

		if o.Access != nil {
			qrAccess = *o.Access
		}
		qAccess := qrAccess
		if qAccess != "" {

			if err := r.SetQueryParam("access", qAccess); err != nil {
				return err
			}
		}
	}

	if o.Account != nil {

		// query param account
		var qrAccount string

		if o.Account != nil {
			qrAccount = *o.Account
		}
		qAccount := qrAccount
		if qAccount != "" {

			if err := r.SetQueryParam("account", qAccount); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Hotdesk != nil {

		// query param hotdesk
		var qrHotdesk string

		if o.Hotdesk != nil {
			qrHotdesk = *o.Hotdesk
		}
		qHotdesk := qrHotdesk
		if qHotdesk != "" {

			if err := r.SetQueryParam("hotdesk", qHotdesk); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IP != nil {

		// query param ip
		var qrIP string

		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {

			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}
	}

	if o.Mac != nil {

		// query param mac
		var qrMac string

		if o.Mac != nil {
			qrMac = *o.Mac
		}
		qMac := qrMac
		if qMac != "" {

			if err := r.SetQueryParam("mac", qMac); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.UserID != nil {

		// query param user.id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param user.name
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDevicesSearchDevice binds the parameter fields
func (o *DevicesSearchDeviceParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamDevicesSearchDevice binds the parameter ids
func (o *DevicesSearchDeviceParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamDevicesSearchDevice binds the parameter sort
func (o *DevicesSearchDeviceParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
