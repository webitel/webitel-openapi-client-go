// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DomainsCreateDomain(body *models.APICreateDomainRequest, opts ...ClientOption) (*DomainsCreateDomainOK, error)
	DomainsCreateDomainWithParams(params *DomainsCreateDomainParams, opts ...ClientOption) (*DomainsCreateDomainOK, error)

	DomainsDeleteDomain(params *DomainsDeleteDomainParams, opts ...ClientOption) (*DomainsDeleteDomainOK, error)

	DomainsDeleteDomain2(params *DomainsDeleteDomain2Params, opts ...ClientOption) (*DomainsDeleteDomain2OK, error)

	DomainsReadDomain(params *DomainsReadDomainParams, opts ...ClientOption) (*DomainsReadDomainOK, error)

	DomainsReadDomain2(params *DomainsReadDomain2Params, opts ...ClientOption) (*DomainsReadDomain2OK, error)

	DomainsSearchDomains(params *DomainsSearchDomainsParams, opts ...ClientOption) (*DomainsSearchDomainsOK, error)

	DomainsUpdateDomain(domainDc string, body *models.APIDomainsUpdateDomainBody, opts ...ClientOption) (*DomainsUpdateDomainOK, error)
	DomainsUpdateDomainWithParams(params *DomainsUpdateDomainParams, opts ...ClientOption) (*DomainsUpdateDomainOK, error)

	DomainsUpdateDomain2(domainDc string, body *models.APIDomainsUpdateDomainBody, opts ...ClientOption) (*DomainsUpdateDomain2OK, error)
	DomainsUpdateDomain2WithParams(params *DomainsUpdateDomain2Params, opts ...ClientOption) (*DomainsUpdateDomain2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DomainsCreateDomain domains create domain API
*/
func (a *Client) DomainsCreateDomain(body *models.APICreateDomainRequest, opts ...ClientOption) (*DomainsCreateDomainOK, error) {
	params := NewDomainsCreateDomainParams().WithBody(body)
	return a.DomainsCreateDomainWithParams(params, opts...)
}

func (a *Client) DomainsCreateDomainWithParams(params *DomainsCreateDomainParams, opts ...ClientOption) (*DomainsCreateDomainOK, error) {
	if params == nil {
		params = NewDomainsCreateDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_CreateDomain",
		Method:             "POST",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsCreateDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsCreateDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_CreateDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsDeleteDomain domains delete domain API
*/

func (a *Client) DomainsDeleteDomain(params *DomainsDeleteDomainParams, opts ...ClientOption) (*DomainsDeleteDomainOK, error) {
	if params == nil {
		params = NewDomainsDeleteDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_DeleteDomain",
		Method:             "DELETE",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsDeleteDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsDeleteDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_DeleteDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsDeleteDomain2 domains delete domain2 API
*/

func (a *Client) DomainsDeleteDomain2(params *DomainsDeleteDomain2Params, opts ...ClientOption) (*DomainsDeleteDomain2OK, error) {
	if params == nil {
		params = NewDomainsDeleteDomain2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_DeleteDomain2",
		Method:             "DELETE",
		PathPattern:        "/domains/{dc}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsDeleteDomain2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsDeleteDomain2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_DeleteDomain2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsReadDomain domains read domain API
*/

func (a *Client) DomainsReadDomain(params *DomainsReadDomainParams, opts ...ClientOption) (*DomainsReadDomainOK, error) {
	if params == nil {
		params = NewDomainsReadDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_ReadDomain",
		Method:             "GET",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsReadDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsReadDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_ReadDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsReadDomain2 domains read domain2 API
*/

func (a *Client) DomainsReadDomain2(params *DomainsReadDomain2Params, opts ...ClientOption) (*DomainsReadDomain2OK, error) {
	if params == nil {
		params = NewDomainsReadDomain2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_ReadDomain2",
		Method:             "GET",
		PathPattern:        "/domains/{dc}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsReadDomain2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsReadDomain2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_ReadDomain2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsSearchDomains domains search domains API
*/

func (a *Client) DomainsSearchDomains(params *DomainsSearchDomainsParams, opts ...ClientOption) (*DomainsSearchDomainsOK, error) {
	if params == nil {
		params = NewDomainsSearchDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_SearchDomains",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsSearchDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsSearchDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_SearchDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsUpdateDomain domains update domain API
*/
func (a *Client) DomainsUpdateDomain(domainDc string, body *models.APIDomainsUpdateDomainBody, opts ...ClientOption) (*DomainsUpdateDomainOK, error) {
	params := NewDomainsUpdateDomainParams().WithBody(body).WithDomainDc(domainDc)
	return a.DomainsUpdateDomainWithParams(params, opts...)
}

func (a *Client) DomainsUpdateDomainWithParams(params *DomainsUpdateDomainParams, opts ...ClientOption) (*DomainsUpdateDomainOK, error) {
	if params == nil {
		params = NewDomainsUpdateDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_UpdateDomain",
		Method:             "PUT",
		PathPattern:        "/domains/{domain.dc}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsUpdateDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsUpdateDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_UpdateDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsUpdateDomain2 domains update domain2 API
*/
func (a *Client) DomainsUpdateDomain2(domainDc string, body *models.APIDomainsUpdateDomainBody, opts ...ClientOption) (*DomainsUpdateDomain2OK, error) {
	params := NewDomainsUpdateDomain2Params().WithBody(body).WithDomainDc(domainDc)
	return a.DomainsUpdateDomain2WithParams(params, opts...)
}

func (a *Client) DomainsUpdateDomain2WithParams(params *DomainsUpdateDomain2Params, opts ...ClientOption) (*DomainsUpdateDomain2OK, error) {
	if params == nil {
		params = NewDomainsUpdateDomain2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Domains_UpdateDomain2",
		Method:             "PATCH",
		PathPattern:        "/domains/{domain.dc}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsUpdateDomain2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsUpdateDomain2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Domains_UpdateDomain2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
