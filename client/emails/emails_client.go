// Code generated by go-swagger; DO NOT EDIT.

package emails

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new emails API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for emails API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EmailsDeleteEmail(params *EmailsDeleteEmailParams, opts ...ClientOption) (*EmailsDeleteEmailOK, error)

	EmailsDeleteEmails(params *EmailsDeleteEmailsParams, opts ...ClientOption) (*EmailsDeleteEmailsOK, error)

	EmailsListEmails(params *EmailsListEmailsParams, opts ...ClientOption) (*EmailsListEmailsOK, error)

	EmailsLocateEmail(params *EmailsLocateEmailParams, opts ...ClientOption) (*EmailsLocateEmailOK, error)

	EmailsMergeEmails(params *EmailsMergeEmailsParams, opts ...ClientOption) (*EmailsMergeEmailsOK, error)

	EmailsResetEmails(params *EmailsResetEmailsParams, opts ...ClientOption) (*EmailsResetEmailsOK, error)

	EmailsUpdateEmail(params *EmailsUpdateEmailParams, opts ...ClientOption) (*EmailsUpdateEmailOK, error)

	EmailsUpdateEmail2(params *EmailsUpdateEmail2Params, opts ...ClientOption) (*EmailsUpdateEmail2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EmailsDeleteEmail removes the contact s email address link
*/

func (a *Client) EmailsDeleteEmail(params *EmailsDeleteEmailParams, opts ...ClientOption) (*EmailsDeleteEmailOK, error) {
	if params == nil {
		params = NewEmailsDeleteEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_DeleteEmail",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/emails/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsDeleteEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsDeleteEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_DeleteEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsDeleteEmails removes email address es of the contact
*/

func (a *Client) EmailsDeleteEmails(params *EmailsDeleteEmailsParams, opts ...ClientOption) (*EmailsDeleteEmailsOK, error) {
	if params == nil {
		params = NewEmailsDeleteEmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_DeleteEmails",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsDeleteEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsDeleteEmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_DeleteEmails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsListEmails locates email address es of the contact
*/

func (a *Client) EmailsListEmails(params *EmailsListEmailsParams, opts ...ClientOption) (*EmailsListEmailsOK, error) {
	if params == nil {
		params = NewEmailsListEmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_ListEmails",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsListEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsListEmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_ListEmails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsLocateEmail locates the email address link
*/

func (a *Client) EmailsLocateEmail(params *EmailsLocateEmailParams, opts ...ClientOption) (*EmailsLocateEmailOK, error) {
	if params == nil {
		params = NewEmailsLocateEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_LocateEmail",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/emails/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsLocateEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsLocateEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_LocateEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsMergeEmails updates or append email address es of the contact
*/

func (a *Client) EmailsMergeEmails(params *EmailsMergeEmailsParams, opts ...ClientOption) (*EmailsMergeEmailsOK, error) {
	if params == nil {
		params = NewEmailsMergeEmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_MergeEmails",
		Method:             "POST",
		PathPattern:        "/contacts/{contact_id}/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsMergeEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsMergeEmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_MergeEmails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsResetEmails resets all emails of the contact according to the input dataset
*/

func (a *Client) EmailsResetEmails(params *EmailsResetEmailsParams, opts ...ClientOption) (*EmailsResetEmailsOK, error) {
	if params == nil {
		params = NewEmailsResetEmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_ResetEmails",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsResetEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsResetEmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_ResetEmails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsUpdateEmail updates the contact s email address link details
*/

func (a *Client) EmailsUpdateEmail(params *EmailsUpdateEmailParams, opts ...ClientOption) (*EmailsUpdateEmailOK, error) {
	if params == nil {
		params = NewEmailsUpdateEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_UpdateEmail",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/emails/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsUpdateEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsUpdateEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_UpdateEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailsUpdateEmail2 updates the contact s email address link details
*/

func (a *Client) EmailsUpdateEmail2(params *EmailsUpdateEmail2Params, opts ...ClientOption) (*EmailsUpdateEmail2OK, error) {
	if params == nil {
		params = NewEmailsUpdateEmail2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Emails_UpdateEmail2",
		Method:             "PATCH",
		PathPattern:        "/contacts/{contact_id}/emails/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailsUpdateEmail2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailsUpdateEmail2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Emails_UpdateEmail2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
