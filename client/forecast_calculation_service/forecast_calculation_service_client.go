// Code generated by go-swagger; DO NOT EDIT.

package forecast_calculation_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new forecast calculation service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for forecast calculation service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ForecastCalculationServiceCreateForecastCalculation(body *models.WfmCreateForecastCalculationRequest, opts ...ClientOption) (*ForecastCalculationServiceCreateForecastCalculationOK, error)
	ForecastCalculationServiceCreateForecastCalculationWithParams(params *ForecastCalculationServiceCreateForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceCreateForecastCalculationOK, error)

	ForecastCalculationServiceDeleteForecastCalculation(id string, opts ...ClientOption) (*ForecastCalculationServiceDeleteForecastCalculationOK, error)
	ForecastCalculationServiceDeleteForecastCalculationWithParams(params *ForecastCalculationServiceDeleteForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceDeleteForecastCalculationOK, error)

	ForecastCalculationServiceExecuteForecastCalculation(params *ForecastCalculationServiceExecuteForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceExecuteForecastCalculationOK, error)

	ForecastCalculationServiceReadForecastCalculation(params *ForecastCalculationServiceReadForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceReadForecastCalculationOK, error)

	ForecastCalculationServiceSearchForecastCalculation(params *ForecastCalculationServiceSearchForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceSearchForecastCalculationOK, error)

	ForecastCalculationServiceUpdateForecastCalculation(itemID string, body *models.ForecastCalculationServiceUpdateForecastCalculationParamsBody, opts ...ClientOption) (*ForecastCalculationServiceUpdateForecastCalculationOK, error)
	ForecastCalculationServiceUpdateForecastCalculationWithParams(params *ForecastCalculationServiceUpdateForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceUpdateForecastCalculationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ForecastCalculationServiceCreateForecastCalculation forecast calculation service create forecast calculation API
*/
func (a *Client) ForecastCalculationServiceCreateForecastCalculation(body *models.WfmCreateForecastCalculationRequest, opts ...ClientOption) (*ForecastCalculationServiceCreateForecastCalculationOK, error) {
	params := NewForecastCalculationServiceCreateForecastCalculationParams().WithBody(body)
	return a.ForecastCalculationServiceCreateForecastCalculationWithParams(params, opts...)
}

func (a *Client) ForecastCalculationServiceCreateForecastCalculationWithParams(params *ForecastCalculationServiceCreateForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceCreateForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceCreateForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_CreateForecastCalculation",
		Method:             "POST",
		PathPattern:        "/wfm/lookups/forecast_calculation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceCreateForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceCreateForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceCreateForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ForecastCalculationServiceDeleteForecastCalculation forecast calculation service delete forecast calculation API
*/
func (a *Client) ForecastCalculationServiceDeleteForecastCalculation(id string, opts ...ClientOption) (*ForecastCalculationServiceDeleteForecastCalculationOK, error) {
	params := NewForecastCalculationServiceDeleteForecastCalculationParams().WithID(id)
	return a.ForecastCalculationServiceDeleteForecastCalculationWithParams(params, opts...)
}

func (a *Client) ForecastCalculationServiceDeleteForecastCalculationWithParams(params *ForecastCalculationServiceDeleteForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceDeleteForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceDeleteForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_DeleteForecastCalculation",
		Method:             "DELETE",
		PathPattern:        "/wfm/lookups/forecast_calculation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceDeleteForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceDeleteForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceDeleteForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ForecastCalculationServiceExecuteForecastCalculation forecast calculation service execute forecast calculation API
*/

func (a *Client) ForecastCalculationServiceExecuteForecastCalculation(params *ForecastCalculationServiceExecuteForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceExecuteForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceExecuteForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_ExecuteForecastCalculation",
		Method:             "GET",
		PathPattern:        "/wfm/lookups/forecast_calculation/{id_1}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceExecuteForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceExecuteForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceExecuteForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ForecastCalculationServiceReadForecastCalculation forecast calculation service read forecast calculation API
*/

func (a *Client) ForecastCalculationServiceReadForecastCalculation(params *ForecastCalculationServiceReadForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceReadForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceReadForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_ReadForecastCalculation",
		Method:             "GET",
		PathPattern:        "/wfm/lookups/forecast_calculation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceReadForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceReadForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceReadForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ForecastCalculationServiceSearchForecastCalculation forecast calculation service search forecast calculation API
*/

func (a *Client) ForecastCalculationServiceSearchForecastCalculation(params *ForecastCalculationServiceSearchForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceSearchForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceSearchForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_SearchForecastCalculation",
		Method:             "GET",
		PathPattern:        "/wfm/lookups/forecast_calculation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceSearchForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceSearchForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceSearchForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ForecastCalculationServiceUpdateForecastCalculation forecast calculation service update forecast calculation API
*/
func (a *Client) ForecastCalculationServiceUpdateForecastCalculation(itemID string, body *models.ForecastCalculationServiceUpdateForecastCalculationParamsBody, opts ...ClientOption) (*ForecastCalculationServiceUpdateForecastCalculationOK, error) {
	params := NewForecastCalculationServiceUpdateForecastCalculationParams().WithBody(body).WithItemID(itemID)
	return a.ForecastCalculationServiceUpdateForecastCalculationWithParams(params, opts...)
}

func (a *Client) ForecastCalculationServiceUpdateForecastCalculationWithParams(params *ForecastCalculationServiceUpdateForecastCalculationParams, opts ...ClientOption) (*ForecastCalculationServiceUpdateForecastCalculationOK, error) {
	if params == nil {
		params = NewForecastCalculationServiceUpdateForecastCalculationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForecastCalculationService_UpdateForecastCalculation",
		Method:             "PUT",
		PathPattern:        "/wfm/lookups/forecast_calculation/{item.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForecastCalculationServiceUpdateForecastCalculationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForecastCalculationServiceUpdateForecastCalculationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ForecastCalculationServiceUpdateForecastCalculationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
