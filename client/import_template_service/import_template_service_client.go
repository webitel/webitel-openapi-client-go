// Code generated by go-swagger; DO NOT EDIT.

package import_template_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new import template service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for import template service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateImportTemplate(body *models.StorageCreateImportTemplateRequest, opts ...ClientOption) (*CreateImportTemplateOK, error)
	CreateImportTemplateWithParams(params *CreateImportTemplateParams, opts ...ClientOption) (*CreateImportTemplateOK, error)

	DeleteImportTemplate(id int32, opts ...ClientOption) (*DeleteImportTemplateOK, error)
	DeleteImportTemplateWithParams(params *DeleteImportTemplateParams, opts ...ClientOption) (*DeleteImportTemplateOK, error)

	PatchImportTemplate(id int32, body *models.StoragePatchImportTemplateRequest, opts ...ClientOption) (*PatchImportTemplateOK, error)
	PatchImportTemplateWithParams(params *PatchImportTemplateParams, opts ...ClientOption) (*PatchImportTemplateOK, error)

	ReadImportTemplate(id int32, opts ...ClientOption) (*ReadImportTemplateOK, error)
	ReadImportTemplateWithParams(params *ReadImportTemplateParams, opts ...ClientOption) (*ReadImportTemplateOK, error)

	SearchImportTemplate(params *SearchImportTemplateParams, opts ...ClientOption) (*SearchImportTemplateOK, error)

	UpdateImportTemplate(id int32, body *models.StorageUpdateImportTemplateRequest, opts ...ClientOption) (*UpdateImportTemplateOK, error)
	UpdateImportTemplateWithParams(params *UpdateImportTemplateParams, opts ...ClientOption) (*UpdateImportTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateImportTemplate create import template API
*/
func (a *Client) CreateImportTemplate(body *models.StorageCreateImportTemplateRequest, opts ...ClientOption) (*CreateImportTemplateOK, error) {
	params := NewCreateImportTemplateParams().WithBody(body)
	return a.CreateImportTemplateWithParams(params, opts...)
}

func (a *Client) CreateImportTemplateWithParams(params *CreateImportTemplateParams, opts ...ClientOption) (*CreateImportTemplateOK, error) {
	if params == nil {
		params = NewCreateImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateImportTemplate",
		Method:             "POST",
		PathPattern:        "/storage/import_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteImportTemplate delete import template API
*/
func (a *Client) DeleteImportTemplate(id int32, opts ...ClientOption) (*DeleteImportTemplateOK, error) {
	params := NewDeleteImportTemplateParams().WithID(id)
	return a.DeleteImportTemplateWithParams(params, opts...)
}

func (a *Client) DeleteImportTemplateWithParams(params *DeleteImportTemplateParams, opts ...ClientOption) (*DeleteImportTemplateOK, error) {
	if params == nil {
		params = NewDeleteImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteImportTemplate",
		Method:             "DELETE",
		PathPattern:        "/storage/import_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchImportTemplate patch import template API
*/
func (a *Client) PatchImportTemplate(id int32, body *models.StoragePatchImportTemplateRequest, opts ...ClientOption) (*PatchImportTemplateOK, error) {
	params := NewPatchImportTemplateParams().WithBody(body).WithID(id)
	return a.PatchImportTemplateWithParams(params, opts...)
}

func (a *Client) PatchImportTemplateWithParams(params *PatchImportTemplateParams, opts ...ClientOption) (*PatchImportTemplateOK, error) {
	if params == nil {
		params = NewPatchImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchImportTemplate",
		Method:             "PATCH",
		PathPattern:        "/storage/import_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadImportTemplate read import template API
*/
func (a *Client) ReadImportTemplate(id int32, opts ...ClientOption) (*ReadImportTemplateOK, error) {
	params := NewReadImportTemplateParams().WithID(id)
	return a.ReadImportTemplateWithParams(params, opts...)
}

func (a *Client) ReadImportTemplateWithParams(params *ReadImportTemplateParams, opts ...ClientOption) (*ReadImportTemplateOK, error) {
	if params == nil {
		params = NewReadImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadImportTemplate",
		Method:             "GET",
		PathPattern:        "/storage/import_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchImportTemplate search import template API
*/

func (a *Client) SearchImportTemplate(params *SearchImportTemplateParams, opts ...ClientOption) (*SearchImportTemplateOK, error) {
	if params == nil {
		params = NewSearchImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchImportTemplate",
		Method:             "GET",
		PathPattern:        "/storage/import_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImportTemplate update import template API
*/
func (a *Client) UpdateImportTemplate(id int32, body *models.StorageUpdateImportTemplateRequest, opts ...ClientOption) (*UpdateImportTemplateOK, error) {
	params := NewUpdateImportTemplateParams().WithBody(body).WithID(id)
	return a.UpdateImportTemplateWithParams(params, opts...)
}

func (a *Client) UpdateImportTemplateWithParams(params *UpdateImportTemplateParams, opts ...ClientOption) (*UpdateImportTemplateOK, error) {
	if params == nil {
		params = NewUpdateImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateImportTemplate",
		Method:             "PUT",
		PathPattern:        "/storage/import_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateImportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
