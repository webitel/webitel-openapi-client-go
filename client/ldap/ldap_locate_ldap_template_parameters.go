// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLDAPLocateLDAPTemplateParams creates a new LDAPLocateLDAPTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLDAPLocateLDAPTemplateParams() *LDAPLocateLDAPTemplateParams {
	return &LDAPLocateLDAPTemplateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLDAPLocateLDAPTemplateParamsWithTimeout creates a new LDAPLocateLDAPTemplateParams object
// with the ability to set a timeout on a request.
func NewLDAPLocateLDAPTemplateParamsWithTimeout(timeout time.Duration) *LDAPLocateLDAPTemplateParams {
	return &LDAPLocateLDAPTemplateParams{
		timeout: timeout,
	}
}

// NewLDAPLocateLDAPTemplateParamsWithContext creates a new LDAPLocateLDAPTemplateParams object
// with the ability to set a context for a request.
func NewLDAPLocateLDAPTemplateParamsWithContext(ctx context.Context) *LDAPLocateLDAPTemplateParams {
	return &LDAPLocateLDAPTemplateParams{
		Context: ctx,
	}
}

// NewLDAPLocateLDAPTemplateParamsWithHTTPClient creates a new LDAPLocateLDAPTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewLDAPLocateLDAPTemplateParamsWithHTTPClient(client *http.Client) *LDAPLocateLDAPTemplateParams {
	return &LDAPLocateLDAPTemplateParams{
		HTTPClient: client,
	}
}

/*
LDAPLocateLDAPTemplateParams contains all the parameters to send to the API endpoint

	for the LDAP locate LDAP template operation.

	Typically these are written to a http.Request.
*/
type LDAPLocateLDAPTemplateParams struct {

	// BaseDn.
	BaseDn *string

	/* CatalogID.

	   REQUIRED. Parent LDAP catalog IDentifier

	   Format: int64
	*/
	CatalogID string

	// Disabled.
	Disabled *bool

	// Enabled.
	Enabled *bool

	/* Fields.

	   attributes list
	*/
	Fields []string

	/* ID.

	     ----- Search Basic Filters ---------------------------
	OPTIONAL. Search templates by .id
	*/
	ID []string

	// Name.
	Name *string

	// Objclass.
	Objclass *string

	/* Page.

	     ----- Select Options -------------------------

	default: 1

	     Format: int32
	*/
	Page *int32

	/* Q.

	   OPTIONAL. Filter(s) SET
	*/
	Q *string

	/* Size.

	   default: 16

	   Format: int32
	*/
	Size *int32

	/* Sort.

	   e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the LDAP locate LDAP template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LDAPLocateLDAPTemplateParams) WithDefaults() *LDAPLocateLDAPTemplateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the LDAP locate LDAP template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LDAPLocateLDAPTemplateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithTimeout(timeout time.Duration) *LDAPLocateLDAPTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithContext(ctx context.Context) *LDAPLocateLDAPTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithHTTPClient(client *http.Client) *LDAPLocateLDAPTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseDn adds the baseDn to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithBaseDn(baseDn *string) *LDAPLocateLDAPTemplateParams {
	o.SetBaseDn(baseDn)
	return o
}

// SetBaseDn adds the baseDn to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetBaseDn(baseDn *string) {
	o.BaseDn = baseDn
}

// WithCatalogID adds the catalogID to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithCatalogID(catalogID string) *LDAPLocateLDAPTemplateParams {
	o.SetCatalogID(catalogID)
	return o
}

// SetCatalogID adds the catalogId to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetCatalogID(catalogID string) {
	o.CatalogID = catalogID
}

// WithDisabled adds the disabled to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithDisabled(disabled *bool) *LDAPLocateLDAPTemplateParams {
	o.SetDisabled(disabled)
	return o
}

// SetDisabled adds the disabled to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetDisabled(disabled *bool) {
	o.Disabled = disabled
}

// WithEnabled adds the enabled to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithEnabled(enabled *bool) *LDAPLocateLDAPTemplateParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithFields adds the fields to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithFields(fields []string) *LDAPLocateLDAPTemplateParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithID(id []string) *LDAPLocateLDAPTemplateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetID(id []string) {
	o.ID = id
}

// WithName adds the name to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithName(name *string) *LDAPLocateLDAPTemplateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetName(name *string) {
	o.Name = name
}

// WithObjclass adds the objclass to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithObjclass(objclass *string) *LDAPLocateLDAPTemplateParams {
	o.SetObjclass(objclass)
	return o
}

// SetObjclass adds the objclass to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetObjclass(objclass *string) {
	o.Objclass = objclass
}

// WithPage adds the page to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithPage(page *int32) *LDAPLocateLDAPTemplateParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithQ(q *string) *LDAPLocateLDAPTemplateParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithSize(size *int32) *LDAPLocateLDAPTemplateParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) WithSort(sort []string) *LDAPLocateLDAPTemplateParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the LDAP locate LDAP template params
func (o *LDAPLocateLDAPTemplateParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *LDAPLocateLDAPTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BaseDn != nil {

		// query param base_dn
		var qrBaseDn string

		if o.BaseDn != nil {
			qrBaseDn = *o.BaseDn
		}
		qBaseDn := qrBaseDn
		if qBaseDn != "" {

			if err := r.SetQueryParam("base_dn", qBaseDn); err != nil {
				return err
			}
		}
	}

	// path param catalog_id
	if err := r.SetPathParam("catalog_id", o.CatalogID); err != nil {
		return err
	}

	if o.Disabled != nil {

		// query param disabled
		var qrDisabled bool

		if o.Disabled != nil {
			qrDisabled = *o.Disabled
		}
		qDisabled := swag.FormatBool(qrDisabled)
		if qDisabled != "" {

			if err := r.SetQueryParam("disabled", qDisabled); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// path array param id
		// SetPathParam does not support variadic arguments, since we used JoinByFormat
		// we can send the first item in the array as it's all the items of the previous
		// array joined together
		if len(joinedID) > 0 {
			if err := r.SetPathParam("id", joinedID[0]); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Objclass != nil {

		// query param objclass
		var qrObjclass string

		if o.Objclass != nil {
			qrObjclass = *o.Objclass
		}
		qObjclass := qrObjclass
		if qObjclass != "" {

			if err := r.SetQueryParam("objclass", qObjclass); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLDAPLocateLDAPTemplate binds the parameter fields
func (o *LDAPLocateLDAPTemplateParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamLDAPLocateLDAPTemplate binds the parameter id
func (o *LDAPLocateLDAPTemplateParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "csv"
	iDIS := swag.JoinByFormat(iDIC, "csv")

	return iDIS
}

// bindParamLDAPLocateLDAPTemplate binds the parameter sort
func (o *LDAPLocateLDAPTemplateParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
