// Code generated by go-swagger; DO NOT EDIT.

package list_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new list service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for list service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateList(body *models.EngineCreateListRequest, opts ...ClientOption) (*CreateListOK, error)
	CreateListWithParams(params *CreateListParams, opts ...ClientOption) (*CreateListOK, error)

	CreateListCommunication(listID string, body *models.EngineCreateListCommunicationRequest, opts ...ClientOption) (*CreateListCommunicationOK, error)
	CreateListCommunicationWithParams(params *CreateListCommunicationParams, opts ...ClientOption) (*CreateListCommunicationOK, error)

	DeleteList(params *DeleteListParams, opts ...ClientOption) (*DeleteListOK, error)

	DeleteListCommunication(params *DeleteListCommunicationParams, opts ...ClientOption) (*DeleteListCommunicationOK, error)

	ReadList(params *ReadListParams, opts ...ClientOption) (*ReadListOK, error)

	ReadListCommunication(params *ReadListCommunicationParams, opts ...ClientOption) (*ReadListCommunicationOK, error)

	SearchList(params *SearchListParams, opts ...ClientOption) (*SearchListOK, error)

	SearchListCommunication(params *SearchListCommunicationParams, opts ...ClientOption) (*SearchListCommunicationOK, error)

	UpdateList(id string, body *models.EngineUpdateListRequest, opts ...ClientOption) (*UpdateListOK, error)
	UpdateListWithParams(params *UpdateListParams, opts ...ClientOption) (*UpdateListOK, error)

	UpdateListCommunication(params *UpdateListCommunicationParams, opts ...ClientOption) (*UpdateListCommunicationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateList creates list
*/
func (a *Client) CreateList(body *models.EngineCreateListRequest, opts ...ClientOption) (*CreateListOK, error) {
	params := NewCreateListParams().WithBody(body)
	return a.CreateListWithParams(params, opts...)
}

func (a *Client) CreateListWithParams(params *CreateListParams, opts ...ClientOption) (*CreateListOK, error) {
	if params == nil {
		params = NewCreateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateList",
		Method:             "POST",
		PathPattern:        "/call_center/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateListCommunication creates list communication
*/
func (a *Client) CreateListCommunication(listID string, body *models.EngineCreateListCommunicationRequest, opts ...ClientOption) (*CreateListCommunicationOK, error) {
	params := NewCreateListCommunicationParams().WithBody(body).WithListID(listID)
	return a.CreateListCommunicationWithParams(params, opts...)
}

func (a *Client) CreateListCommunicationWithParams(params *CreateListCommunicationParams, opts ...ClientOption) (*CreateListCommunicationOK, error) {
	if params == nil {
		params = NewCreateListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateListCommunication",
		Method:             "POST",
		PathPattern:        "/call_center/list/{list_id}/communication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateListCommunicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateListCommunicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteList removes list
*/

func (a *Client) DeleteList(params *DeleteListParams, opts ...ClientOption) (*DeleteListOK, error) {
	if params == nil {
		params = NewDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteList",
		Method:             "DELETE",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteListCommunication removes list communication
*/

func (a *Client) DeleteListCommunication(params *DeleteListCommunicationParams, opts ...ClientOption) (*DeleteListCommunicationOK, error) {
	if params == nil {
		params = NewDeleteListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteListCommunication",
		Method:             "DELETE",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteListCommunicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteListCommunicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadList lists item
*/

func (a *Client) ReadList(params *ReadListParams, opts ...ClientOption) (*ReadListOK, error) {
	if params == nil {
		params = NewReadListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadList",
		Method:             "GET",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadListCommunication lists item
*/

func (a *Client) ReadListCommunication(params *ReadListCommunicationParams, opts ...ClientOption) (*ReadListCommunicationOK, error) {
	if params == nil {
		params = NewReadListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadListCommunication",
		Method:             "GET",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadListCommunicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadListCommunicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchList lists of list
*/

func (a *Client) SearchList(params *SearchListParams, opts ...ClientOption) (*SearchListOK, error) {
	if params == nil {
		params = NewSearchListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchList",
		Method:             "GET",
		PathPattern:        "/call_center/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchListCommunication lists of list
*/

func (a *Client) SearchListCommunication(params *SearchListCommunicationParams, opts ...ClientOption) (*SearchListCommunicationOK, error) {
	if params == nil {
		params = NewSearchListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchListCommunication",
		Method:             "GET",
		PathPattern:        "/call_center/list/{list_id}/communication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchListCommunicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchListCommunicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateList updates list
*/
func (a *Client) UpdateList(id string, body *models.EngineUpdateListRequest, opts ...ClientOption) (*UpdateListOK, error) {
	params := NewUpdateListParams().WithBody(body).WithID(id)
	return a.UpdateListWithParams(params, opts...)
}

func (a *Client) UpdateListWithParams(params *UpdateListParams, opts ...ClientOption) (*UpdateListOK, error) {
	if params == nil {
		params = NewUpdateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateList",
		Method:             "PUT",
		PathPattern:        "/call_center/list/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateListCommunication updates list communication
*/

func (a *Client) UpdateListCommunication(params *UpdateListCommunicationParams, opts ...ClientOption) (*UpdateListCommunicationOK, error) {
	if params == nil {
		params = NewUpdateListCommunicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateListCommunication",
		Method:             "PUT",
		PathPattern:        "/call_center/list/{list_id}/communication/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateListCommunicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateListCommunicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateListCommunicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
