// Code generated by go-swagger; DO NOT EDIT.

package logger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new logger service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for logger service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LoggerServiceDeleteConfigLogs(configID string, body *models.LoggerDeleteConfigLogsRequest, opts ...ClientOption) (*LoggerServiceDeleteConfigLogsOK, error)
	LoggerServiceDeleteConfigLogsWithParams(params *LoggerServiceDeleteConfigLogsParams, opts ...ClientOption) (*LoggerServiceDeleteConfigLogsOK, error)

	LoggerServiceSearchLogByConfigID(params *LoggerServiceSearchLogByConfigIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByConfigIDOK, error)

	LoggerServiceSearchLogByRecordID(params *LoggerServiceSearchLogByRecordIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByRecordIDOK, error)

	LoggerServiceSearchLogByUserID(params *LoggerServiceSearchLogByUserIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByUserIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LoggerServiceDeleteConfigLogs logger service delete config logs API
*/
func (a *Client) LoggerServiceDeleteConfigLogs(configID string, body *models.LoggerDeleteConfigLogsRequest, opts ...ClientOption) (*LoggerServiceDeleteConfigLogsOK, error) {
	params := NewLoggerServiceDeleteConfigLogsParams().WithBody(body).WithConfigID(configID)
	return a.LoggerServiceDeleteConfigLogsWithParams(params, opts...)
}

func (a *Client) LoggerServiceDeleteConfigLogsWithParams(params *LoggerServiceDeleteConfigLogsParams, opts ...ClientOption) (*LoggerServiceDeleteConfigLogsOK, error) {
	if params == nil {
		params = NewLoggerServiceDeleteConfigLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoggerService_DeleteConfigLogs",
		Method:             "DELETE",
		PathPattern:        "/logger/config/{config_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoggerServiceDeleteConfigLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoggerServiceDeleteConfigLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoggerServiceDeleteConfigLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoggerServiceSearchLogByConfigID logger service search log by config Id API
*/

func (a *Client) LoggerServiceSearchLogByConfigID(params *LoggerServiceSearchLogByConfigIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByConfigIDOK, error) {
	if params == nil {
		params = NewLoggerServiceSearchLogByConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoggerService_SearchLogByConfigId",
		Method:             "GET",
		PathPattern:        "/logger/config/{config_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoggerServiceSearchLogByConfigIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoggerServiceSearchLogByConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoggerServiceSearchLogByConfigIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoggerServiceSearchLogByRecordID logger service search log by record Id API
*/

func (a *Client) LoggerServiceSearchLogByRecordID(params *LoggerServiceSearchLogByRecordIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByRecordIDOK, error) {
	if params == nil {
		params = NewLoggerServiceSearchLogByRecordIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoggerService_SearchLogByRecordId",
		Method:             "GET",
		PathPattern:        "/logger/{object}/record/{record_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoggerServiceSearchLogByRecordIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoggerServiceSearchLogByRecordIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoggerServiceSearchLogByRecordIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoggerServiceSearchLogByUserID logger service search log by user Id API
*/

func (a *Client) LoggerServiceSearchLogByUserID(params *LoggerServiceSearchLogByUserIDParams, opts ...ClientOption) (*LoggerServiceSearchLogByUserIDOK, error) {
	if params == nil {
		params = NewLoggerServiceSearchLogByUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoggerService_SearchLogByUserId",
		Method:             "GET",
		PathPattern:        "/logger/user/{user_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoggerServiceSearchLogByUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoggerServiceSearchLogByUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoggerServiceSearchLogByUserIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
