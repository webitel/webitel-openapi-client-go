// Code generated by go-swagger; DO NOT EDIT.

package logger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// LoggerServiceDeleteConfigLogsReader is a Reader for the LoggerServiceDeleteConfigLogs structure.
type LoggerServiceDeleteConfigLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoggerServiceDeleteConfigLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoggerServiceDeleteConfigLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewLoggerServiceDeleteConfigLogsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoggerServiceDeleteConfigLogsOK creates a LoggerServiceDeleteConfigLogsOK with default headers values
func NewLoggerServiceDeleteConfigLogsOK() *LoggerServiceDeleteConfigLogsOK {
	return &LoggerServiceDeleteConfigLogsOK{}
}

/*
LoggerServiceDeleteConfigLogsOK describes a response with status code 200, with default header values.

A successful response.
*/
type LoggerServiceDeleteConfigLogsOK struct {
	Payload *models.LoggerDeleteConfigLogsResponse
}

// IsSuccess returns true when this logger service delete config logs Ok response has a 2xx status code
func (o *LoggerServiceDeleteConfigLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this logger service delete config logs Ok response has a 3xx status code
func (o *LoggerServiceDeleteConfigLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logger service delete config logs Ok response has a 4xx status code
func (o *LoggerServiceDeleteConfigLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this logger service delete config logs Ok response has a 5xx status code
func (o *LoggerServiceDeleteConfigLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this logger service delete config logs Ok response a status code equal to that given
func (o *LoggerServiceDeleteConfigLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the logger service delete config logs Ok response
func (o *LoggerServiceDeleteConfigLogsOK) Code() int {
	return 200
}

func (o *LoggerServiceDeleteConfigLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /logger/config/{config_id}/logs][%d] loggerServiceDeleteConfigLogsOk %s", 200, payload)
}

func (o *LoggerServiceDeleteConfigLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /logger/config/{config_id}/logs][%d] loggerServiceDeleteConfigLogsOk %s", 200, payload)
}

func (o *LoggerServiceDeleteConfigLogsOK) GetPayload() *models.LoggerDeleteConfigLogsResponse {
	return o.Payload
}

func (o *LoggerServiceDeleteConfigLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoggerDeleteConfigLogsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoggerServiceDeleteConfigLogsDefault creates a LoggerServiceDeleteConfigLogsDefault with default headers values
func NewLoggerServiceDeleteConfigLogsDefault(code int) *LoggerServiceDeleteConfigLogsDefault {
	return &LoggerServiceDeleteConfigLogsDefault{
		_statusCode: code,
	}
}

/*
LoggerServiceDeleteConfigLogsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type LoggerServiceDeleteConfigLogsDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// IsSuccess returns true when this logger service delete config logs default response has a 2xx status code
func (o *LoggerServiceDeleteConfigLogsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this logger service delete config logs default response has a 3xx status code
func (o *LoggerServiceDeleteConfigLogsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this logger service delete config logs default response has a 4xx status code
func (o *LoggerServiceDeleteConfigLogsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this logger service delete config logs default response has a 5xx status code
func (o *LoggerServiceDeleteConfigLogsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this logger service delete config logs default response a status code equal to that given
func (o *LoggerServiceDeleteConfigLogsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the logger service delete config logs default response
func (o *LoggerServiceDeleteConfigLogsDefault) Code() int {
	return o._statusCode
}

func (o *LoggerServiceDeleteConfigLogsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /logger/config/{config_id}/logs][%d] LoggerService_DeleteConfigLogs default %s", o._statusCode, payload)
}

func (o *LoggerServiceDeleteConfigLogsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /logger/config/{config_id}/logs][%d] LoggerService_DeleteConfigLogs default %s", o._statusCode, payload)
}

func (o *LoggerServiceDeleteConfigLogsDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *LoggerServiceDeleteConfigLogsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
