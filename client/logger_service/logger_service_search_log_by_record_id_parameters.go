// Code generated by go-swagger; DO NOT EDIT.

package logger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLoggerServiceSearchLogByRecordIDParams creates a new LoggerServiceSearchLogByRecordIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLoggerServiceSearchLogByRecordIDParams() *LoggerServiceSearchLogByRecordIDParams {
	return &LoggerServiceSearchLogByRecordIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLoggerServiceSearchLogByRecordIDParamsWithTimeout creates a new LoggerServiceSearchLogByRecordIDParams object
// with the ability to set a timeout on a request.
func NewLoggerServiceSearchLogByRecordIDParamsWithTimeout(timeout time.Duration) *LoggerServiceSearchLogByRecordIDParams {
	return &LoggerServiceSearchLogByRecordIDParams{
		timeout: timeout,
	}
}

// NewLoggerServiceSearchLogByRecordIDParamsWithContext creates a new LoggerServiceSearchLogByRecordIDParams object
// with the ability to set a context for a request.
func NewLoggerServiceSearchLogByRecordIDParamsWithContext(ctx context.Context) *LoggerServiceSearchLogByRecordIDParams {
	return &LoggerServiceSearchLogByRecordIDParams{
		Context: ctx,
	}
}

// NewLoggerServiceSearchLogByRecordIDParamsWithHTTPClient creates a new LoggerServiceSearchLogByRecordIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewLoggerServiceSearchLogByRecordIDParamsWithHTTPClient(client *http.Client) *LoggerServiceSearchLogByRecordIDParams {
	return &LoggerServiceSearchLogByRecordIDParams{
		HTTPClient: client,
	}
}

/*
LoggerServiceSearchLogByRecordIDParams contains all the parameters to send to the API endpoint

	for the logger service search log by record Id operation.

	Typically these are written to a http.Request.
*/
type LoggerServiceSearchLogByRecordIDParams struct {

	/* Action.

	   GENERAL filters.
	*/
	Action []string

	// DateFrom.
	//
	// Format: int64
	DateFrom *string

	// DateTo.
	//
	// Format: int64
	DateTo *string

	// Fields.
	Fields []string

	/* Object.

	   SPECIFIC filter
	*/
	Object string

	// Page.
	//
	// Format: int32
	Page *int32

	// Q.
	Q *string

	/* RecordID.

	   REQUIRED filter

	   Format: int32
	*/
	RecordID int32

	// Size.
	//
	// Format: int32
	Size *int32

	// Sort.
	Sort *string

	// UserID.
	UserID []string

	// UserIP.
	UserIP *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the logger service search log by record Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoggerServiceSearchLogByRecordIDParams) WithDefaults() *LoggerServiceSearchLogByRecordIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the logger service search log by record Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoggerServiceSearchLogByRecordIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithTimeout(timeout time.Duration) *LoggerServiceSearchLogByRecordIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithContext(ctx context.Context) *LoggerServiceSearchLogByRecordIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithHTTPClient(client *http.Client) *LoggerServiceSearchLogByRecordIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithAction(action []string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetAction(action []string) {
	o.Action = action
}

// WithDateFrom adds the dateFrom to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithDateFrom(dateFrom *string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithDateTo(dateTo *string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithFields(fields []string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithObject adds the object to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithObject(object string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetObject(object)
	return o
}

// SetObject adds the object to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetObject(object string) {
	o.Object = object
}

// WithPage adds the page to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithPage(page *int32) *LoggerServiceSearchLogByRecordIDParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithQ(q *string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetQ(q *string) {
	o.Q = q
}

// WithRecordID adds the recordID to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithRecordID(recordID int32) *LoggerServiceSearchLogByRecordIDParams {
	o.SetRecordID(recordID)
	return o
}

// SetRecordID adds the recordId to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetRecordID(recordID int32) {
	o.RecordID = recordID
}

// WithSize adds the size to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithSize(size *int32) *LoggerServiceSearchLogByRecordIDParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithSort(sort *string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUserID adds the userID to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithUserID(userID []string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WithUserIP adds the userIP to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) WithUserIP(userIP *string) *LoggerServiceSearchLogByRecordIDParams {
	o.SetUserIP(userIP)
	return o
}

// SetUserIP adds the userIp to the logger service search log by record Id params
func (o *LoggerServiceSearchLogByRecordIDParams) SetUserIP(userIP *string) {
	o.UserIP = userIP
}

// WriteToRequest writes these params to a swagger request
func (o *LoggerServiceSearchLogByRecordIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// binding items for action
		joinedAction := o.bindParamAction(reg)

		// query array param action
		if err := r.SetQueryParam("action", joinedAction...); err != nil {
			return err
		}
	}

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom string

		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {

			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}
	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo string

		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {

			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	// path param object
	if err := r.SetPathParam("object", o.Object); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	// path param record_id
	if err := r.SetPathParam("record_id", swag.FormatInt32(o.RecordID)); err != nil {
		return err
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// binding items for user_id
		joinedUserID := o.bindParamUserID(reg)

		// query array param user_id
		if err := r.SetQueryParam("user_id", joinedUserID...); err != nil {
			return err
		}
	}

	if o.UserIP != nil {

		// query param user_ip
		var qrUserIP string

		if o.UserIP != nil {
			qrUserIP = *o.UserIP
		}
		qUserIP := qrUserIP
		if qUserIP != "" {

			if err := r.SetQueryParam("user_ip", qUserIP); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLoggerServiceSearchLogByRecordID binds the parameter action
func (o *LoggerServiceSearchLogByRecordIDParams) bindParamAction(formats strfmt.Registry) []string {
	actionIR := o.Action

	var actionIC []string
	for _, actionIIR := range actionIR { // explode []string

		actionIIV := actionIIR // string as string
		actionIC = append(actionIC, actionIIV)
	}

	// items.CollectionFormat: "multi"
	actionIS := swag.JoinByFormat(actionIC, "multi")

	return actionIS
}

// bindParamLoggerServiceSearchLogByRecordID binds the parameter fields
func (o *LoggerServiceSearchLogByRecordIDParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamLoggerServiceSearchLogByRecordID binds the parameter user_id
func (o *LoggerServiceSearchLogByRecordIDParams) bindParamUserID(formats strfmt.Registry) []string {
	userIDIR := o.UserID

	var userIDIC []string
	for _, userIDIIR := range userIDIR { // explode []string

		userIDIIV := userIDIIR // string as string
		userIDIC = append(userIDIC, userIDIIV)
	}

	// items.CollectionFormat: "multi"
	userIDIS := swag.JoinByFormat(userIDIC, "multi")

	return userIDIS
}
