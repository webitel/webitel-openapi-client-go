// Code generated by go-swagger; DO NOT EDIT.

package logger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLoggerServiceSearchLogByUserIDParams creates a new LoggerServiceSearchLogByUserIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLoggerServiceSearchLogByUserIDParams() *LoggerServiceSearchLogByUserIDParams {
	return &LoggerServiceSearchLogByUserIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLoggerServiceSearchLogByUserIDParamsWithTimeout creates a new LoggerServiceSearchLogByUserIDParams object
// with the ability to set a timeout on a request.
func NewLoggerServiceSearchLogByUserIDParamsWithTimeout(timeout time.Duration) *LoggerServiceSearchLogByUserIDParams {
	return &LoggerServiceSearchLogByUserIDParams{
		timeout: timeout,
	}
}

// NewLoggerServiceSearchLogByUserIDParamsWithContext creates a new LoggerServiceSearchLogByUserIDParams object
// with the ability to set a context for a request.
func NewLoggerServiceSearchLogByUserIDParamsWithContext(ctx context.Context) *LoggerServiceSearchLogByUserIDParams {
	return &LoggerServiceSearchLogByUserIDParams{
		Context: ctx,
	}
}

// NewLoggerServiceSearchLogByUserIDParamsWithHTTPClient creates a new LoggerServiceSearchLogByUserIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewLoggerServiceSearchLogByUserIDParamsWithHTTPClient(client *http.Client) *LoggerServiceSearchLogByUserIDParams {
	return &LoggerServiceSearchLogByUserIDParams{
		HTTPClient: client,
	}
}

/*
LoggerServiceSearchLogByUserIDParams contains all the parameters to send to the API endpoint

	for the logger service search log by user Id operation.

	Typically these are written to a http.Request.
*/
type LoggerServiceSearchLogByUserIDParams struct {

	/* Action.

	   GENERAL filters.
	*/
	Action []string

	// DateFrom.
	//
	// Format: int64
	DateFrom *string

	// DateTo.
	//
	// Format: int64
	DateTo *string

	// Fields.
	Fields []string

	/* ObjectID.

	   SPECIFIC filter.
	*/
	ObjectID []string

	// Page.
	//
	// Format: int32
	Page *int32

	// Q.
	Q *string

	// Size.
	//
	// Format: int32
	Size *int32

	// Sort.
	Sort *string

	/* UserID.

	   REQUIRED filter

	   Format: int32
	*/
	UserID int32

	// UserIP.
	UserIP *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the logger service search log by user Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoggerServiceSearchLogByUserIDParams) WithDefaults() *LoggerServiceSearchLogByUserIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the logger service search log by user Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoggerServiceSearchLogByUserIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithTimeout(timeout time.Duration) *LoggerServiceSearchLogByUserIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithContext(ctx context.Context) *LoggerServiceSearchLogByUserIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithHTTPClient(client *http.Client) *LoggerServiceSearchLogByUserIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithAction(action []string) *LoggerServiceSearchLogByUserIDParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetAction(action []string) {
	o.Action = action
}

// WithDateFrom adds the dateFrom to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithDateFrom(dateFrom *string) *LoggerServiceSearchLogByUserIDParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithDateTo(dateTo *string) *LoggerServiceSearchLogByUserIDParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithFields(fields []string) *LoggerServiceSearchLogByUserIDParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithObjectID adds the objectID to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithObjectID(objectID []string) *LoggerServiceSearchLogByUserIDParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetObjectID(objectID []string) {
	o.ObjectID = objectID
}

// WithPage adds the page to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithPage(page *int32) *LoggerServiceSearchLogByUserIDParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithQ(q *string) *LoggerServiceSearchLogByUserIDParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithSize(size *int32) *LoggerServiceSearchLogByUserIDParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithSort(sort *string) *LoggerServiceSearchLogByUserIDParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUserID adds the userID to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithUserID(userID int32) *LoggerServiceSearchLogByUserIDParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetUserID(userID int32) {
	o.UserID = userID
}

// WithUserIP adds the userIP to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) WithUserIP(userIP *string) *LoggerServiceSearchLogByUserIDParams {
	o.SetUserIP(userIP)
	return o
}

// SetUserIP adds the userIp to the logger service search log by user Id params
func (o *LoggerServiceSearchLogByUserIDParams) SetUserIP(userIP *string) {
	o.UserIP = userIP
}

// WriteToRequest writes these params to a swagger request
func (o *LoggerServiceSearchLogByUserIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// binding items for action
		joinedAction := o.bindParamAction(reg)

		// query array param action
		if err := r.SetQueryParam("action", joinedAction...); err != nil {
			return err
		}
	}

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom string

		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {

			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}
	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo string

		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {

			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ObjectID != nil {

		// binding items for object_id
		joinedObjectID := o.bindParamObjectID(reg)

		// query array param object_id
		if err := r.SetQueryParam("object_id", joinedObjectID...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	// path param user_id
	if err := r.SetPathParam("user_id", swag.FormatInt32(o.UserID)); err != nil {
		return err
	}

	if o.UserIP != nil {

		// query param user_ip
		var qrUserIP string

		if o.UserIP != nil {
			qrUserIP = *o.UserIP
		}
		qUserIP := qrUserIP
		if qUserIP != "" {

			if err := r.SetQueryParam("user_ip", qUserIP); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLoggerServiceSearchLogByUserID binds the parameter action
func (o *LoggerServiceSearchLogByUserIDParams) bindParamAction(formats strfmt.Registry) []string {
	actionIR := o.Action

	var actionIC []string
	for _, actionIIR := range actionIR { // explode []string

		actionIIV := actionIIR // string as string
		actionIC = append(actionIC, actionIIV)
	}

	// items.CollectionFormat: "multi"
	actionIS := swag.JoinByFormat(actionIC, "multi")

	return actionIS
}

// bindParamLoggerServiceSearchLogByUserID binds the parameter fields
func (o *LoggerServiceSearchLogByUserIDParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamLoggerServiceSearchLogByUserID binds the parameter object_id
func (o *LoggerServiceSearchLogByUserIDParams) bindParamObjectID(formats strfmt.Registry) []string {
	objectIDIR := o.ObjectID

	var objectIDIC []string
	for _, objectIDIIR := range objectIDIR { // explode []string

		objectIDIIV := objectIDIIR // string as string
		objectIDIC = append(objectIDIC, objectIDIIV)
	}

	// items.CollectionFormat: "multi"
	objectIDIS := swag.JoinByFormat(objectIDIC, "multi")

	return objectIDIS
}
