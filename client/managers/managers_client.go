// Code generated by go-swagger; DO NOT EDIT.

package managers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new managers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for managers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ManagersDeleteManager(params *ManagersDeleteManagerParams, opts ...ClientOption) (*ManagersDeleteManagerOK, error)

	ManagersDeleteManagers(params *ManagersDeleteManagersParams, opts ...ClientOption) (*ManagersDeleteManagersOK, error)

	ManagersListManagers(params *ManagersListManagersParams, opts ...ClientOption) (*ManagersListManagersOK, error)

	ManagersLocateManager(params *ManagersLocateManagerParams, opts ...ClientOption) (*ManagersLocateManagerOK, error)

	ManagersMergeManagers(params *ManagersMergeManagersParams, opts ...ClientOption) (*ManagersMergeManagersOK, error)

	ManagersResetManagers(params *ManagersResetManagersParams, opts ...ClientOption) (*ManagersResetManagersOK, error)

	ManagersUpdateManager(params *ManagersUpdateManagerParams, opts ...ClientOption) (*ManagersUpdateManagerOK, error)

	ManagersUpdateManager2(params *ManagersUpdateManager2Params, opts ...ClientOption) (*ManagersUpdateManager2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ManagersDeleteManager removes the contact s manager address link
*/

func (a *Client) ManagersDeleteManager(params *ManagersDeleteManagerParams, opts ...ClientOption) (*ManagersDeleteManagerOK, error) {
	if params == nil {
		params = NewManagersDeleteManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_DeleteManager",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/managers/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersDeleteManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersDeleteManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_DeleteManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersDeleteManagers removes contact managers associations
*/

func (a *Client) ManagersDeleteManagers(params *ManagersDeleteManagersParams, opts ...ClientOption) (*ManagersDeleteManagersOK, error) {
	if params == nil {
		params = NewManagersDeleteManagersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_DeleteManagers",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersDeleteManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersDeleteManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_DeleteManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersListManagers searches the contact s managers
*/

func (a *Client) ManagersListManagers(params *ManagersListManagersParams, opts ...ClientOption) (*ManagersListManagersOK, error) {
	if params == nil {
		params = NewManagersListManagersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_ListManagers",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersListManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersListManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_ListManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersLocateManager locates the manager address link
*/

func (a *Client) ManagersLocateManager(params *ManagersLocateManagerParams, opts ...ClientOption) (*ManagersLocateManagerOK, error) {
	if params == nil {
		params = NewManagersLocateManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_LocateManager",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/managers/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersLocateManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersLocateManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_LocateManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersMergeManagers associates new managers to the contact
*/

func (a *Client) ManagersMergeManagers(params *ManagersMergeManagersParams, opts ...ClientOption) (*ManagersMergeManagersOK, error) {
	if params == nil {
		params = NewManagersMergeManagersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_MergeManagers",
		Method:             "POST",
		PathPattern:        "/contacts/{contact_id}/managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersMergeManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersMergeManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_MergeManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersResetManagers resets managers to fit the specified final set
*/

func (a *Client) ManagersResetManagers(params *ManagersResetManagersParams, opts ...ClientOption) (*ManagersResetManagersOK, error) {
	if params == nil {
		params = NewManagersResetManagersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_ResetManagers",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersResetManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersResetManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_ResetManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersUpdateManager updates the contact s manager address link details
*/

func (a *Client) ManagersUpdateManager(params *ManagersUpdateManagerParams, opts ...ClientOption) (*ManagersUpdateManagerOK, error) {
	if params == nil {
		params = NewManagersUpdateManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_UpdateManager",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/managers/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersUpdateManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersUpdateManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_UpdateManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersUpdateManager2 updates the contact s manager address link details
*/

func (a *Client) ManagersUpdateManager2(params *ManagersUpdateManager2Params, opts ...ClientOption) (*ManagersUpdateManager2OK, error) {
	if params == nil {
		params = NewManagersUpdateManager2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Managers_UpdateManager2",
		Method:             "PATCH",
		PathPattern:        "/contacts/{contact_id}/managers/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersUpdateManager2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersUpdateManager2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Managers_UpdateManager2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
