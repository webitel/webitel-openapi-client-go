// Code generated by go-swagger; DO NOT EDIT.

package managers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// NewManagersMergeManagersParams creates a new ManagersMergeManagersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewManagersMergeManagersParams() *ManagersMergeManagersParams {
	return &ManagersMergeManagersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewManagersMergeManagersParamsWithTimeout creates a new ManagersMergeManagersParams object
// with the ability to set a timeout on a request.
func NewManagersMergeManagersParamsWithTimeout(timeout time.Duration) *ManagersMergeManagersParams {
	return &ManagersMergeManagersParams{
		timeout: timeout,
	}
}

// NewManagersMergeManagersParamsWithContext creates a new ManagersMergeManagersParams object
// with the ability to set a context for a request.
func NewManagersMergeManagersParamsWithContext(ctx context.Context) *ManagersMergeManagersParams {
	return &ManagersMergeManagersParams{
		Context: ctx,
	}
}

// NewManagersMergeManagersParamsWithHTTPClient creates a new ManagersMergeManagersParams object
// with the ability to set a custom HTTPClient for a request.
func NewManagersMergeManagersParamsWithHTTPClient(client *http.Client) *ManagersMergeManagersParams {
	return &ManagersMergeManagersParams{
		HTTPClient: client,
	}
}

/*
ManagersMergeManagersParams contains all the parameters to send to the API endpoint

	for the managers merge managers operation.

	Typically these are written to a http.Request.
*/
type ManagersMergeManagersParams struct {

	/* ContactID.

	   Link contact ID.
	*/
	ContactID string

	/* Fields.

	   Fields to be retrieved as a result.
	*/
	Fields []string

	/* Input.

	     Array of the unique User(s) to associate with the Contact.
	Any duplicate of an already linked user{id} will result in an error.
	*/
	Input []*models.WebitelContactsInputManager

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the managers merge managers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ManagersMergeManagersParams) WithDefaults() *ManagersMergeManagersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the managers merge managers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ManagersMergeManagersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the managers merge managers params
func (o *ManagersMergeManagersParams) WithTimeout(timeout time.Duration) *ManagersMergeManagersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the managers merge managers params
func (o *ManagersMergeManagersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the managers merge managers params
func (o *ManagersMergeManagersParams) WithContext(ctx context.Context) *ManagersMergeManagersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the managers merge managers params
func (o *ManagersMergeManagersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the managers merge managers params
func (o *ManagersMergeManagersParams) WithHTTPClient(client *http.Client) *ManagersMergeManagersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the managers merge managers params
func (o *ManagersMergeManagersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactID adds the contactID to the managers merge managers params
func (o *ManagersMergeManagersParams) WithContactID(contactID string) *ManagersMergeManagersParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the managers merge managers params
func (o *ManagersMergeManagersParams) SetContactID(contactID string) {
	o.ContactID = contactID
}

// WithFields adds the fields to the managers merge managers params
func (o *ManagersMergeManagersParams) WithFields(fields []string) *ManagersMergeManagersParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the managers merge managers params
func (o *ManagersMergeManagersParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithInput adds the input to the managers merge managers params
func (o *ManagersMergeManagersParams) WithInput(input []*models.WebitelContactsInputManager) *ManagersMergeManagersParams {
	o.SetInput(input)
	return o
}

// SetInput adds the input to the managers merge managers params
func (o *ManagersMergeManagersParams) SetInput(input []*models.WebitelContactsInputManager) {
	o.Input = input
}

// WriteToRequest writes these params to a swagger request
func (o *ManagersMergeManagersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contact_id
	if err := r.SetPathParam("contact_id", o.ContactID); err != nil {
		return err
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}
	if o.Input != nil {
		if err := r.SetBodyParam(o.Input); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamManagersMergeManagers binds the parameter fields
func (o *ManagersMergeManagersParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
