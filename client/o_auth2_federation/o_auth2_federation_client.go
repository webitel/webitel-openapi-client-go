// Code generated by go-swagger; DO NOT EDIT.

package o_auth2_federation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new o auth2 federation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o auth2 federation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OAuth2FederationCreateOAuthService(body *models.APIOAuthService, opts ...ClientOption) (*OAuth2FederationCreateOAuthServiceOK, error)
	OAuth2FederationCreateOAuthServiceWithParams(params *OAuth2FederationCreateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationCreateOAuthServiceOK, error)

	OAuth2FederationDeleteOAuthService(body *models.APIDeleteOAuthServiceRequest, opts ...ClientOption) (*OAuth2FederationDeleteOAuthServiceOK, error)
	OAuth2FederationDeleteOAuthServiceWithParams(params *OAuth2FederationDeleteOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationDeleteOAuthServiceOK, error)

	OAuth2FederationDeleteOAuthService2(id []string, body *models.APIOAuth2FederationDeleteOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationDeleteOAuthService2OK, error)
	OAuth2FederationDeleteOAuthService2WithParams(params *OAuth2FederationDeleteOAuthService2Params, opts ...ClientOption) (*OAuth2FederationDeleteOAuthService2OK, error)

	OAuth2FederationLocateOAuthService(params *OAuth2FederationLocateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationLocateOAuthServiceOK, error)

	OAuth2FederationSearchOAuthService(params *OAuth2FederationSearchOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationSearchOAuthServiceOK, error)

	OAuth2FederationUpdateOAuthService(changesID string, body *models.APIOAuth2FederationUpdateOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationUpdateOAuthServiceOK, error)
	OAuth2FederationUpdateOAuthServiceWithParams(params *OAuth2FederationUpdateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationUpdateOAuthServiceOK, error)

	OAuth2FederationUpdateOAuthService2(changesID string, body *models.APIOAuth2FederationUpdateOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationUpdateOAuthService2OK, error)
	OAuth2FederationUpdateOAuthService2WithParams(params *OAuth2FederationUpdateOAuthService2Params, opts ...ClientOption) (*OAuth2FederationUpdateOAuthService2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
OAuth2FederationCreateOAuthService o auth2 federation create o auth service API
*/
func (a *Client) OAuth2FederationCreateOAuthService(body *models.APIOAuthService, opts ...ClientOption) (*OAuth2FederationCreateOAuthServiceOK, error) {
	params := NewOAuth2FederationCreateOAuthServiceParams().WithBody(body)
	return a.OAuth2FederationCreateOAuthServiceWithParams(params, opts...)
}

func (a *Client) OAuth2FederationCreateOAuthServiceWithParams(params *OAuth2FederationCreateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationCreateOAuthServiceOK, error) {
	if params == nil {
		params = NewOAuth2FederationCreateOAuthServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_CreateOAuthService",
		Method:             "POST",
		PathPattern:        "/oauth/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationCreateOAuthServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationCreateOAuthServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_CreateOAuthService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationDeleteOAuthService o auth2 federation delete o auth service API
*/
func (a *Client) OAuth2FederationDeleteOAuthService(body *models.APIDeleteOAuthServiceRequest, opts ...ClientOption) (*OAuth2FederationDeleteOAuthServiceOK, error) {
	params := NewOAuth2FederationDeleteOAuthServiceParams().WithBody(body)
	return a.OAuth2FederationDeleteOAuthServiceWithParams(params, opts...)
}

func (a *Client) OAuth2FederationDeleteOAuthServiceWithParams(params *OAuth2FederationDeleteOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationDeleteOAuthServiceOK, error) {
	if params == nil {
		params = NewOAuth2FederationDeleteOAuthServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_DeleteOAuthService",
		Method:             "DELETE",
		PathPattern:        "/oauth/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationDeleteOAuthServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationDeleteOAuthServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_DeleteOAuthService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationDeleteOAuthService2 o auth2 federation delete o auth service2 API
*/
func (a *Client) OAuth2FederationDeleteOAuthService2(id []string, body *models.APIOAuth2FederationDeleteOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationDeleteOAuthService2OK, error) {
	params := NewOAuth2FederationDeleteOAuthService2Params().WithBody(body).WithID(id)
	return a.OAuth2FederationDeleteOAuthService2WithParams(params, opts...)
}

func (a *Client) OAuth2FederationDeleteOAuthService2WithParams(params *OAuth2FederationDeleteOAuthService2Params, opts ...ClientOption) (*OAuth2FederationDeleteOAuthService2OK, error) {
	if params == nil {
		params = NewOAuth2FederationDeleteOAuthService2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_DeleteOAuthService2",
		Method:             "DELETE",
		PathPattern:        "/oauth/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationDeleteOAuthService2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationDeleteOAuthService2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_DeleteOAuthService2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationLocateOAuthService o auth2 federation locate o auth service API
*/

func (a *Client) OAuth2FederationLocateOAuthService(params *OAuth2FederationLocateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationLocateOAuthServiceOK, error) {
	if params == nil {
		params = NewOAuth2FederationLocateOAuthServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_LocateOAuthService",
		Method:             "GET",
		PathPattern:        "/oauth/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationLocateOAuthServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationLocateOAuthServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_LocateOAuthService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationSearchOAuthService o auth2 federation search o auth service API
*/

func (a *Client) OAuth2FederationSearchOAuthService(params *OAuth2FederationSearchOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationSearchOAuthServiceOK, error) {
	if params == nil {
		params = NewOAuth2FederationSearchOAuthServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_SearchOAuthService",
		Method:             "GET",
		PathPattern:        "/oauth/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationSearchOAuthServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationSearchOAuthServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_SearchOAuthService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationUpdateOAuthService o auth2 federation update o auth service API
*/
func (a *Client) OAuth2FederationUpdateOAuthService(changesID string, body *models.APIOAuth2FederationUpdateOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationUpdateOAuthServiceOK, error) {
	params := NewOAuth2FederationUpdateOAuthServiceParams().WithBody(body).WithChangesID(changesID)
	return a.OAuth2FederationUpdateOAuthServiceWithParams(params, opts...)
}

func (a *Client) OAuth2FederationUpdateOAuthServiceWithParams(params *OAuth2FederationUpdateOAuthServiceParams, opts ...ClientOption) (*OAuth2FederationUpdateOAuthServiceOK, error) {
	if params == nil {
		params = NewOAuth2FederationUpdateOAuthServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_UpdateOAuthService",
		Method:             "PUT",
		PathPattern:        "/oauth/apps/{changes.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationUpdateOAuthServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationUpdateOAuthServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_UpdateOAuthService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OAuth2FederationUpdateOAuthService2 o auth2 federation update o auth service2 API
*/
func (a *Client) OAuth2FederationUpdateOAuthService2(changesID string, body *models.APIOAuth2FederationUpdateOAuthServiceBody, opts ...ClientOption) (*OAuth2FederationUpdateOAuthService2OK, error) {
	params := NewOAuth2FederationUpdateOAuthService2Params().WithBody(body).WithChangesID(changesID)
	return a.OAuth2FederationUpdateOAuthService2WithParams(params, opts...)
}

func (a *Client) OAuth2FederationUpdateOAuthService2WithParams(params *OAuth2FederationUpdateOAuthService2Params, opts ...ClientOption) (*OAuth2FederationUpdateOAuthService2OK, error) {
	if params == nil {
		params = NewOAuth2FederationUpdateOAuthService2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "OAuth2Federation_UpdateOAuthService2",
		Method:             "PATCH",
		PathPattern:        "/oauth/apps/{changes.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OAuth2FederationUpdateOAuthService2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OAuth2FederationUpdateOAuthService2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OAuth2Federation_UpdateOAuthService2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
