// Code generated by go-swagger; DO NOT EDIT.

package o_auth2_federation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewOAuth2FederationSearchOAuthServiceParams creates a new OAuth2FederationSearchOAuthServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOAuth2FederationSearchOAuthServiceParams() *OAuth2FederationSearchOAuthServiceParams {
	return &OAuth2FederationSearchOAuthServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOAuth2FederationSearchOAuthServiceParamsWithTimeout creates a new OAuth2FederationSearchOAuthServiceParams object
// with the ability to set a timeout on a request.
func NewOAuth2FederationSearchOAuthServiceParamsWithTimeout(timeout time.Duration) *OAuth2FederationSearchOAuthServiceParams {
	return &OAuth2FederationSearchOAuthServiceParams{
		timeout: timeout,
	}
}

// NewOAuth2FederationSearchOAuthServiceParamsWithContext creates a new OAuth2FederationSearchOAuthServiceParams object
// with the ability to set a context for a request.
func NewOAuth2FederationSearchOAuthServiceParamsWithContext(ctx context.Context) *OAuth2FederationSearchOAuthServiceParams {
	return &OAuth2FederationSearchOAuthServiceParams{
		Context: ctx,
	}
}

// NewOAuth2FederationSearchOAuthServiceParamsWithHTTPClient creates a new OAuth2FederationSearchOAuthServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewOAuth2FederationSearchOAuthServiceParamsWithHTTPClient(client *http.Client) *OAuth2FederationSearchOAuthServiceParams {
	return &OAuth2FederationSearchOAuthServiceParams{
		HTTPClient: client,
	}
}

/*
OAuth2FederationSearchOAuthServiceParams contains all the parameters to send to the API endpoint

	for the o auth2 federation search o auth service operation.

	Typically these are written to a http.Request.
*/
type OAuth2FederationSearchOAuthServiceParams struct {

	/* Access.

	   [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
	*/
	Access *string

	/* Enabled.

	   ----- OAuthService-Specific Filters ----------------
	*/
	Enabled *bool

	/* Fields.

	   attributes list
	*/
	Fields []string

	/* ID.

	     ----- Search Basic Filters ---------------------------

	selection: by unique identifier
	*/
	ID []string

	/* Name.

	   case-ignore substring match: ILIKE '*' - any; '?' - one
	*/
	Name *string

	/* Page.

	     ----- Select Options -------------------------

	default: 1

	     Format: int32
	*/
	Page *int32

	/* Q.

	   term-of-search: lookup[name]
	*/
	Q *string

	/* Size.

	   default: 16

	   Format: int32
	*/
	Size *int32

	/* Sort.

	   e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the o auth2 federation search o auth service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OAuth2FederationSearchOAuthServiceParams) WithDefaults() *OAuth2FederationSearchOAuthServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the o auth2 federation search o auth service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OAuth2FederationSearchOAuthServiceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithTimeout(timeout time.Duration) *OAuth2FederationSearchOAuthServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithContext(ctx context.Context) *OAuth2FederationSearchOAuthServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithHTTPClient(client *http.Client) *OAuth2FederationSearchOAuthServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccess adds the access to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithAccess(access *string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetAccess(access)
	return o
}

// SetAccess adds the access to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetAccess(access *string) {
	o.Access = access
}

// WithEnabled adds the enabled to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithEnabled(enabled *bool) *OAuth2FederationSearchOAuthServiceParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithFields adds the fields to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithFields(fields []string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithID(id []string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetID(id []string) {
	o.ID = id
}

// WithName adds the name to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithName(name *string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithPage(page *int32) *OAuth2FederationSearchOAuthServiceParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithQ(q *string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithSize(size *int32) *OAuth2FederationSearchOAuthServiceParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) WithSort(sort []string) *OAuth2FederationSearchOAuthServiceParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the o auth2 federation search o auth service params
func (o *OAuth2FederationSearchOAuthServiceParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *OAuth2FederationSearchOAuthServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Access != nil {

		// query param access
		var qrAccess string

		if o.Access != nil {
			qrAccess = *o.Access
		}
		qAccess := qrAccess
		if qAccess != "" {

			if err := r.SetQueryParam("access", qAccess); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamOAuth2FederationSearchOAuthService binds the parameter fields
func (o *OAuth2FederationSearchOAuthServiceParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamOAuth2FederationSearchOAuthService binds the parameter id
func (o *OAuth2FederationSearchOAuthServiceParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamOAuth2FederationSearchOAuthService binds the parameter sort
func (o *OAuth2FederationSearchOAuthServiceParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
