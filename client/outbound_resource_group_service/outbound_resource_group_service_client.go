// Code generated by go-swagger; DO NOT EDIT.

package outbound_resource_group_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new outbound resource group service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for outbound resource group service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOutboundResourceGroup(body *models.EngineCreateOutboundResourceGroupRequest, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error)
	CreateOutboundResourceGroupWithParams(params *CreateOutboundResourceGroupParams, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error)

	CreateOutboundResourceInGroup(groupID string, body *models.EngineCreateOutboundResourceInGroupRequest, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error)
	CreateOutboundResourceInGroupWithParams(params *CreateOutboundResourceInGroupParams, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error)

	DeleteOutboundResourceGroup(params *DeleteOutboundResourceGroupParams, opts ...ClientOption) (*DeleteOutboundResourceGroupOK, error)

	DeleteOutboundResourceInGroup(params *DeleteOutboundResourceInGroupParams, opts ...ClientOption) (*DeleteOutboundResourceInGroupOK, error)

	ReadOutboundResourceGroup(params *ReadOutboundResourceGroupParams, opts ...ClientOption) (*ReadOutboundResourceGroupOK, error)

	ReadOutboundResourceInGroup(params *ReadOutboundResourceInGroupParams, opts ...ClientOption) (*ReadOutboundResourceInGroupOK, error)

	SearchOutboundResourceGroup(params *SearchOutboundResourceGroupParams, opts ...ClientOption) (*SearchOutboundResourceGroupOK, error)

	SearchOutboundResourceInGroup(params *SearchOutboundResourceInGroupParams, opts ...ClientOption) (*SearchOutboundResourceInGroupOK, error)

	UpdateOutboundResourceGroup(id string, body *models.EngineUpdateOutboundResourceGroupRequest, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error)
	UpdateOutboundResourceGroupWithParams(params *UpdateOutboundResourceGroupParams, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error)

	UpdateOutboundResourceInGroup(params *UpdateOutboundResourceInGroupParams, opts ...ClientOption) (*UpdateOutboundResourceInGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOutboundResourceGroup creates outbound resource group
*/
func (a *Client) CreateOutboundResourceGroup(body *models.EngineCreateOutboundResourceGroupRequest, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error) {
	params := NewCreateOutboundResourceGroupParams().WithBody(body)
	return a.CreateOutboundResourceGroupWithParams(params, opts...)
}

func (a *Client) CreateOutboundResourceGroupWithParams(params *CreateOutboundResourceGroupParams, opts ...ClientOption) (*CreateOutboundResourceGroupOK, error) {
	if params == nil {
		params = NewCreateOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceGroup",
		Method:             "POST",
		PathPattern:        "/call_center/resource_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOutboundResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOutboundResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOutboundResourceInGroup creates outbound resource group
*/
func (a *Client) CreateOutboundResourceInGroup(groupID string, body *models.EngineCreateOutboundResourceInGroupRequest, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error) {
	params := NewCreateOutboundResourceInGroupParams().WithBody(body).WithGroupID(groupID)
	return a.CreateOutboundResourceInGroupWithParams(params, opts...)
}

func (a *Client) CreateOutboundResourceInGroupWithParams(params *CreateOutboundResourceInGroupParams, opts ...ClientOption) (*CreateOutboundResourceInGroupOK, error) {
	if params == nil {
		params = NewCreateOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceInGroup",
		Method:             "POST",
		PathPattern:        "/call_center/resource_group/{group_id}/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOutboundResourceInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOutboundResourceInGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOutboundResourceGroup removes outbound resource group
*/

func (a *Client) DeleteOutboundResourceGroup(params *DeleteOutboundResourceGroupParams, opts ...ClientOption) (*DeleteOutboundResourceGroupOK, error) {
	if params == nil {
		params = NewDeleteOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceGroup",
		Method:             "DELETE",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOutboundResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOutboundResourceInGroup removes outbound resource in group
*/

func (a *Client) DeleteOutboundResourceInGroup(params *DeleteOutboundResourceInGroupParams, opts ...ClientOption) (*DeleteOutboundResourceInGroupOK, error) {
	if params == nil {
		params = NewDeleteOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceInGroup",
		Method:             "DELETE",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOutboundResourceInGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadOutboundResourceGroup outbounds resource group item
*/

func (a *Client) ReadOutboundResourceGroup(params *ReadOutboundResourceGroupParams, opts ...ClientOption) (*ReadOutboundResourceGroupOK, error) {
	if params == nil {
		params = NewReadOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResourceGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadOutboundResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadOutboundResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadOutboundResourceInGroup outbounds resource in group item
*/

func (a *Client) ReadOutboundResourceInGroup(params *ReadOutboundResourceInGroupParams, opts ...ClientOption) (*ReadOutboundResourceInGroupOK, error) {
	if params == nil {
		params = NewReadOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResourceInGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadOutboundResourceInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadOutboundResourceInGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchOutboundResourceGroup lists of outbound resource group
*/

func (a *Client) SearchOutboundResourceGroup(params *SearchOutboundResourceGroupParams, opts ...ClientOption) (*SearchOutboundResourceGroupOK, error) {
	if params == nil {
		params = NewSearchOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResourceGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchOutboundResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchOutboundResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchOutboundResourceInGroup lists of outbound resource in group
*/

func (a *Client) SearchOutboundResourceInGroup(params *SearchOutboundResourceInGroupParams, opts ...ClientOption) (*SearchOutboundResourceInGroupOK, error) {
	if params == nil {
		params = NewSearchOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResourceInGroup",
		Method:             "GET",
		PathPattern:        "/call_center/resource_group/{group_id}/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchOutboundResourceInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchOutboundResourceInGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOutboundResourceGroup updates outbound resource group
*/
func (a *Client) UpdateOutboundResourceGroup(id string, body *models.EngineUpdateOutboundResourceGroupRequest, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error) {
	params := NewUpdateOutboundResourceGroupParams().WithBody(body).WithID(id)
	return a.UpdateOutboundResourceGroupWithParams(params, opts...)
}

func (a *Client) UpdateOutboundResourceGroupWithParams(params *UpdateOutboundResourceGroupParams, opts ...ClientOption) (*UpdateOutboundResourceGroupOK, error) {
	if params == nil {
		params = NewUpdateOutboundResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResourceGroup",
		Method:             "PUT",
		PathPattern:        "/call_center/resource_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOutboundResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOutboundResourceInGroup updates outbound resource in group
*/

func (a *Client) UpdateOutboundResourceInGroup(params *UpdateOutboundResourceInGroupParams, opts ...ClientOption) (*UpdateOutboundResourceInGroupOK, error) {
	if params == nil {
		params = NewUpdateOutboundResourceInGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResourceInGroup",
		Method:             "PUT",
		PathPattern:        "/call_center/resource_group/{group_id}/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceInGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceInGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOutboundResourceInGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
