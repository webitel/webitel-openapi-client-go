// Code generated by go-swagger; DO NOT EDIT.

package outbound_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteOutboundResourceDisplaysParams creates a new DeleteOutboundResourceDisplaysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteOutboundResourceDisplaysParams() *DeleteOutboundResourceDisplaysParams {
	return &DeleteOutboundResourceDisplaysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteOutboundResourceDisplaysParamsWithTimeout creates a new DeleteOutboundResourceDisplaysParams object
// with the ability to set a timeout on a request.
func NewDeleteOutboundResourceDisplaysParamsWithTimeout(timeout time.Duration) *DeleteOutboundResourceDisplaysParams {
	return &DeleteOutboundResourceDisplaysParams{
		timeout: timeout,
	}
}

// NewDeleteOutboundResourceDisplaysParamsWithContext creates a new DeleteOutboundResourceDisplaysParams object
// with the ability to set a context for a request.
func NewDeleteOutboundResourceDisplaysParamsWithContext(ctx context.Context) *DeleteOutboundResourceDisplaysParams {
	return &DeleteOutboundResourceDisplaysParams{
		Context: ctx,
	}
}

// NewDeleteOutboundResourceDisplaysParamsWithHTTPClient creates a new DeleteOutboundResourceDisplaysParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteOutboundResourceDisplaysParamsWithHTTPClient(client *http.Client) *DeleteOutboundResourceDisplaysParams {
	return &DeleteOutboundResourceDisplaysParams{
		HTTPClient: client,
	}
}

/*
DeleteOutboundResourceDisplaysParams contains all the parameters to send to the API endpoint

	for the delete outbound resource displays operation.

	Typically these are written to a http.Request.
*/
type DeleteOutboundResourceDisplaysParams struct {

	// Items.
	Items []string

	// ResourceID.
	//
	// Format: int64
	ResourceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete outbound resource displays params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOutboundResourceDisplaysParams) WithDefaults() *DeleteOutboundResourceDisplaysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete outbound resource displays params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOutboundResourceDisplaysParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) WithTimeout(timeout time.Duration) *DeleteOutboundResourceDisplaysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) WithContext(ctx context.Context) *DeleteOutboundResourceDisplaysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) WithHTTPClient(client *http.Client) *DeleteOutboundResourceDisplaysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItems adds the items to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) WithItems(items []string) *DeleteOutboundResourceDisplaysParams {
	o.SetItems(items)
	return o
}

// SetItems adds the items to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) SetItems(items []string) {
	o.Items = items
}

// WithResourceID adds the resourceID to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) WithResourceID(resourceID string) *DeleteOutboundResourceDisplaysParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the delete outbound resource displays params
func (o *DeleteOutboundResourceDisplaysParams) SetResourceID(resourceID string) {
	o.ResourceID = resourceID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteOutboundResourceDisplaysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Items != nil {

		// binding items for items
		joinedItems := o.bindParamItems(reg)

		// query array param items
		if err := r.SetQueryParam("items", joinedItems...); err != nil {
			return err
		}
	}

	// path param resource_id
	if err := r.SetPathParam("resource_id", o.ResourceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDeleteOutboundResourceDisplays binds the parameter items
func (o *DeleteOutboundResourceDisplaysParams) bindParamItems(formats strfmt.Registry) []string {
	itemsIR := o.Items

	var itemsIC []string
	for _, itemsIIR := range itemsIR { // explode []string

		itemsIIV := itemsIIR // string as string
		itemsIC = append(itemsIC, itemsIIV)
	}

	// items.CollectionFormat: "multi"
	itemsIS := swag.JoinByFormat(itemsIC, "multi")

	return itemsIS
}
