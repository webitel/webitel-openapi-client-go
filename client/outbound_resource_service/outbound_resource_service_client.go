// Code generated by go-swagger; DO NOT EDIT.

package outbound_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new outbound resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for outbound resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOutboundResource(body *models.EngineCreateOutboundResourceRequest, opts ...ClientOption) (*CreateOutboundResourceOK, error)
	CreateOutboundResourceWithParams(params *CreateOutboundResourceParams, opts ...ClientOption) (*CreateOutboundResourceOK, error)

	CreateOutboundResourceDisplay(resourceID string, body *models.EngineCreateOutboundResourceDisplayRequest, opts ...ClientOption) (*CreateOutboundResourceDisplayOK, error)
	CreateOutboundResourceDisplayWithParams(params *CreateOutboundResourceDisplayParams, opts ...ClientOption) (*CreateOutboundResourceDisplayOK, error)

	CreateOutboundResourceDisplayBulk(resourceID string, body *models.EngineCreateOutboundResourceDisplayBulkRequest, opts ...ClientOption) (*CreateOutboundResourceDisplayBulkOK, error)
	CreateOutboundResourceDisplayBulkWithParams(params *CreateOutboundResourceDisplayBulkParams, opts ...ClientOption) (*CreateOutboundResourceDisplayBulkOK, error)

	DeleteOutboundResource(params *DeleteOutboundResourceParams, opts ...ClientOption) (*DeleteOutboundResourceOK, error)

	DeleteOutboundResourceDisplay(params *DeleteOutboundResourceDisplayParams, opts ...ClientOption) (*DeleteOutboundResourceDisplayOK, error)

	DeleteOutboundResourceDisplays(params *DeleteOutboundResourceDisplaysParams, opts ...ClientOption) (*DeleteOutboundResourceDisplaysOK, error)

	PatchOutboundResource(id string, body *models.EnginePatchOutboundResourceRequest, opts ...ClientOption) (*PatchOutboundResourceOK, error)
	PatchOutboundResourceWithParams(params *PatchOutboundResourceParams, opts ...ClientOption) (*PatchOutboundResourceOK, error)

	ReadOutboundResource(params *ReadOutboundResourceParams, opts ...ClientOption) (*ReadOutboundResourceOK, error)

	ReadOutboundResourceDisplay(params *ReadOutboundResourceDisplayParams, opts ...ClientOption) (*ReadOutboundResourceDisplayOK, error)

	SearchOutboundResource(params *SearchOutboundResourceParams, opts ...ClientOption) (*SearchOutboundResourceOK, error)

	SearchOutboundResourceDisplay(params *SearchOutboundResourceDisplayParams, opts ...ClientOption) (*SearchOutboundResourceDisplayOK, error)

	UpdateOutboundResource(id string, body *models.EngineUpdateOutboundResourceRequest, opts ...ClientOption) (*UpdateOutboundResourceOK, error)
	UpdateOutboundResourceWithParams(params *UpdateOutboundResourceParams, opts ...ClientOption) (*UpdateOutboundResourceOK, error)

	UpdateOutboundResourceDisplay(params *UpdateOutboundResourceDisplayParams, opts ...ClientOption) (*UpdateOutboundResourceDisplayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOutboundResource creates outbound resource
*/
func (a *Client) CreateOutboundResource(body *models.EngineCreateOutboundResourceRequest, opts ...ClientOption) (*CreateOutboundResourceOK, error) {
	params := NewCreateOutboundResourceParams().WithBody(body)
	return a.CreateOutboundResourceWithParams(params, opts...)
}

func (a *Client) CreateOutboundResourceWithParams(params *CreateOutboundResourceParams, opts ...ClientOption) (*CreateOutboundResourceOK, error) {
	if params == nil {
		params = NewCreateOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResource",
		Method:             "POST",
		PathPattern:        "/call_center/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOutboundResourceDisplay creates create outbound resource display
*/
func (a *Client) CreateOutboundResourceDisplay(resourceID string, body *models.EngineCreateOutboundResourceDisplayRequest, opts ...ClientOption) (*CreateOutboundResourceDisplayOK, error) {
	params := NewCreateOutboundResourceDisplayParams().WithBody(body).WithResourceID(resourceID)
	return a.CreateOutboundResourceDisplayWithParams(params, opts...)
}

func (a *Client) CreateOutboundResourceDisplayWithParams(params *CreateOutboundResourceDisplayParams, opts ...ClientOption) (*CreateOutboundResourceDisplayOK, error) {
	if params == nil {
		params = NewCreateOutboundResourceDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceDisplay",
		Method:             "POST",
		PathPattern:        "/call_center/resources/{resource_id}/display",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOutboundResourceDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOutboundResourceDisplayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOutboundResourceDisplayBulk creates create outbound resource display
*/
func (a *Client) CreateOutboundResourceDisplayBulk(resourceID string, body *models.EngineCreateOutboundResourceDisplayBulkRequest, opts ...ClientOption) (*CreateOutboundResourceDisplayBulkOK, error) {
	params := NewCreateOutboundResourceDisplayBulkParams().WithBody(body).WithResourceID(resourceID)
	return a.CreateOutboundResourceDisplayBulkWithParams(params, opts...)
}

func (a *Client) CreateOutboundResourceDisplayBulkWithParams(params *CreateOutboundResourceDisplayBulkParams, opts ...ClientOption) (*CreateOutboundResourceDisplayBulkOK, error) {
	if params == nil {
		params = NewCreateOutboundResourceDisplayBulkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOutboundResourceDisplayBulk",
		Method:             "POST",
		PathPattern:        "/call_center/resources/{resource_id}/display/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOutboundResourceDisplayBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOutboundResourceDisplayBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOutboundResourceDisplayBulkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOutboundResource removes outbound resource
*/

func (a *Client) DeleteOutboundResource(params *DeleteOutboundResourceParams, opts ...ClientOption) (*DeleteOutboundResourceOK, error) {
	if params == nil {
		params = NewDeleteOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResource",
		Method:             "DELETE",
		PathPattern:        "/call_center/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOutboundResourceDisplay removes resource display
*/

func (a *Client) DeleteOutboundResourceDisplay(params *DeleteOutboundResourceDisplayParams, opts ...ClientOption) (*DeleteOutboundResourceDisplayOK, error) {
	if params == nil {
		params = NewDeleteOutboundResourceDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceDisplay",
		Method:             "DELETE",
		PathPattern:        "/call_center/resources/{resource_id}/display/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOutboundResourceDisplayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOutboundResourceDisplays removes resource displays
*/

func (a *Client) DeleteOutboundResourceDisplays(params *DeleteOutboundResourceDisplaysParams, opts ...ClientOption) (*DeleteOutboundResourceDisplaysOK, error) {
	if params == nil {
		params = NewDeleteOutboundResourceDisplaysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOutboundResourceDisplays",
		Method:             "DELETE",
		PathPattern:        "/call_center/resources/{resource_id}/display",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOutboundResourceDisplaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutboundResourceDisplaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOutboundResourceDisplaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchOutboundResource patches outbound resource
*/
func (a *Client) PatchOutboundResource(id string, body *models.EnginePatchOutboundResourceRequest, opts ...ClientOption) (*PatchOutboundResourceOK, error) {
	params := NewPatchOutboundResourceParams().WithBody(body).WithID(id)
	return a.PatchOutboundResourceWithParams(params, opts...)
}

func (a *Client) PatchOutboundResourceWithParams(params *PatchOutboundResourceParams, opts ...ClientOption) (*PatchOutboundResourceOK, error) {
	if params == nil {
		params = NewPatchOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchOutboundResource",
		Method:             "PATCH",
		PathPattern:        "/call_center/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadOutboundResource outbounds resource item
*/

func (a *Client) ReadOutboundResource(params *ReadOutboundResourceParams, opts ...ClientOption) (*ReadOutboundResourceOK, error) {
	if params == nil {
		params = NewReadOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResource",
		Method:             "GET",
		PathPattern:        "/call_center/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadOutboundResourceDisplay resources display item
*/

func (a *Client) ReadOutboundResourceDisplay(params *ReadOutboundResourceDisplayParams, opts ...ClientOption) (*ReadOutboundResourceDisplayOK, error) {
	if params == nil {
		params = NewReadOutboundResourceDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOutboundResourceDisplay",
		Method:             "GET",
		PathPattern:        "/call_center/resources/{resource_id}/display/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadOutboundResourceDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOutboundResourceDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadOutboundResourceDisplayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchOutboundResource lists of outbound resource
*/

func (a *Client) SearchOutboundResource(params *SearchOutboundResourceParams, opts ...ClientOption) (*SearchOutboundResourceOK, error) {
	if params == nil {
		params = NewSearchOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResource",
		Method:             "GET",
		PathPattern:        "/call_center/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchOutboundResourceDisplay lists of resource display
*/

func (a *Client) SearchOutboundResourceDisplay(params *SearchOutboundResourceDisplayParams, opts ...ClientOption) (*SearchOutboundResourceDisplayOK, error) {
	if params == nil {
		params = NewSearchOutboundResourceDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchOutboundResourceDisplay",
		Method:             "GET",
		PathPattern:        "/call_center/resources/{resource_id}/display",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchOutboundResourceDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOutboundResourceDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchOutboundResourceDisplayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOutboundResource updates outbound resource
*/
func (a *Client) UpdateOutboundResource(id string, body *models.EngineUpdateOutboundResourceRequest, opts ...ClientOption) (*UpdateOutboundResourceOK, error) {
	params := NewUpdateOutboundResourceParams().WithBody(body).WithID(id)
	return a.UpdateOutboundResourceWithParams(params, opts...)
}

func (a *Client) UpdateOutboundResourceWithParams(params *UpdateOutboundResourceParams, opts ...ClientOption) (*UpdateOutboundResourceOK, error) {
	if params == nil {
		params = NewUpdateOutboundResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResource",
		Method:             "PUT",
		PathPattern:        "/call_center/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOutboundResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOutboundResourceDisplay updates resource display
*/

func (a *Client) UpdateOutboundResourceDisplay(params *UpdateOutboundResourceDisplayParams, opts ...ClientOption) (*UpdateOutboundResourceDisplayOK, error) {
	if params == nil {
		params = NewUpdateOutboundResourceDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOutboundResourceDisplay",
		Method:             "PUT",
		PathPattern:        "/call_center/resources/{resource_id}/display/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOutboundResourceDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOutboundResourceDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOutboundResourceDisplayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
