// Code generated by go-swagger; DO NOT EDIT.

package phones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new phones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for phones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PhonesDeletePhone(params *PhonesDeletePhoneParams, opts ...ClientOption) (*PhonesDeletePhoneOK, error)

	PhonesDeletePhones(params *PhonesDeletePhonesParams, opts ...ClientOption) (*PhonesDeletePhonesOK, error)

	PhonesListPhones(params *PhonesListPhonesParams, opts ...ClientOption) (*PhonesListPhonesOK, error)

	PhonesLocatePhone(params *PhonesLocatePhoneParams, opts ...ClientOption) (*PhonesLocatePhoneOK, error)

	PhonesMergePhones(params *PhonesMergePhonesParams, opts ...ClientOption) (*PhonesMergePhonesOK, error)

	PhonesResetPhones(params *PhonesResetPhonesParams, opts ...ClientOption) (*PhonesResetPhonesOK, error)

	PhonesUpdatePhone(params *PhonesUpdatePhoneParams, opts ...ClientOption) (*PhonesUpdatePhoneOK, error)

	PhonesUpdatePhone2(params *PhonesUpdatePhone2Params, opts ...ClientOption) (*PhonesUpdatePhone2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PhonesDeletePhone removes the contact s phone number
*/

func (a *Client) PhonesDeletePhone(params *PhonesDeletePhoneParams, opts ...ClientOption) (*PhonesDeletePhoneOK, error) {
	if params == nil {
		params = NewPhonesDeletePhoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_DeletePhone",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/phones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesDeletePhoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesDeletePhoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_DeletePhone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesDeletePhones removes the contact s phone number association s
*/

func (a *Client) PhonesDeletePhones(params *PhonesDeletePhonesParams, opts ...ClientOption) (*PhonesDeletePhonesOK, error) {
	if params == nil {
		params = NewPhonesDeletePhonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_DeletePhones",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesDeletePhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesDeletePhonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_DeletePhones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesListPhones searches phone number s
*/

func (a *Client) PhonesListPhones(params *PhonesListPhonesParams, opts ...ClientOption) (*PhonesListPhonesOK, error) {
	if params == nil {
		params = NewPhonesListPhonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_ListPhones",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesListPhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesListPhonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_ListPhones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesLocatePhone locates the contact s phone number association
*/

func (a *Client) PhonesLocatePhone(params *PhonesLocatePhoneParams, opts ...ClientOption) (*PhonesLocatePhoneOK, error) {
	if params == nil {
		params = NewPhonesLocatePhoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_LocatePhone",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/phones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesLocatePhoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesLocatePhoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_LocatePhone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesMergePhones associates phone number s with the contact
*/

func (a *Client) PhonesMergePhones(params *PhonesMergePhonesParams, opts ...ClientOption) (*PhonesMergePhonesOK, error) {
	if params == nil {
		params = NewPhonesMergePhonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_MergePhones",
		Method:             "POST",
		PathPattern:        "/contacts/{contact_id}/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesMergePhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesMergePhonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_MergePhones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesResetPhones resets the contact s phone numbers to fit given data set
*/

func (a *Client) PhonesResetPhones(params *PhonesResetPhonesParams, opts ...ClientOption) (*PhonesResetPhonesOK, error) {
	if params == nil {
		params = NewPhonesResetPhonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_ResetPhones",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesResetPhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesResetPhonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_ResetPhones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesUpdatePhone updates the contact s phone number association details
*/

func (a *Client) PhonesUpdatePhone(params *PhonesUpdatePhoneParams, opts ...ClientOption) (*PhonesUpdatePhoneOK, error) {
	if params == nil {
		params = NewPhonesUpdatePhoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_UpdatePhone",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/phones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesUpdatePhoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesUpdatePhoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_UpdatePhone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonesUpdatePhone2 updates the contact s phone number association details
*/

func (a *Client) PhonesUpdatePhone2(params *PhonesUpdatePhone2Params, opts ...ClientOption) (*PhonesUpdatePhone2OK, error) {
	if params == nil {
		params = NewPhonesUpdatePhone2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Phones_UpdatePhone2",
		Method:             "PATCH",
		PathPattern:        "/contacts/{contact_id}/phones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonesUpdatePhone2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonesUpdatePhone2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Phones_UpdatePhone2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
