// Code generated by go-swagger; DO NOT EDIT.

package queue_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// PatchQueueReader is a Reader for the PatchQueue structure.
type PatchQueueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchQueueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchQueueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPatchQueueDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchQueueOK creates a PatchQueueOK with default headers values
func NewPatchQueueOK() *PatchQueueOK {
	return &PatchQueueOK{}
}

/*
PatchQueueOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchQueueOK struct {
	Payload *models.EngineQueue
}

// IsSuccess returns true when this patch queue Ok response has a 2xx status code
func (o *PatchQueueOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch queue Ok response has a 3xx status code
func (o *PatchQueueOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch queue Ok response has a 4xx status code
func (o *PatchQueueOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch queue Ok response has a 5xx status code
func (o *PatchQueueOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch queue Ok response a status code equal to that given
func (o *PatchQueueOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch queue Ok response
func (o *PatchQueueOK) Code() int {
	return 200
}

func (o *PatchQueueOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /call_center/queues/{id}][%d] patchQueueOk %s", 200, payload)
}

func (o *PatchQueueOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /call_center/queues/{id}][%d] patchQueueOk %s", 200, payload)
}

func (o *PatchQueueOK) GetPayload() *models.EngineQueue {
	return o.Payload
}

func (o *PatchQueueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineQueue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchQueueDefault creates a PatchQueueDefault with default headers values
func NewPatchQueueDefault(code int) *PatchQueueDefault {
	return &PatchQueueDefault{
		_statusCode: code,
	}
}

/*
PatchQueueDefault describes a response with status code -1, with default header values.

Server error
*/
type PatchQueueDefault struct {
	_statusCode int

	Payload *models.EngineAPIError
}

// IsSuccess returns true when this patch queue default response has a 2xx status code
func (o *PatchQueueDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch queue default response has a 3xx status code
func (o *PatchQueueDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch queue default response has a 4xx status code
func (o *PatchQueueDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch queue default response has a 5xx status code
func (o *PatchQueueDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch queue default response a status code equal to that given
func (o *PatchQueueDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch queue default response
func (o *PatchQueueDefault) Code() int {
	return o._statusCode
}

func (o *PatchQueueDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /call_center/queues/{id}][%d] PatchQueue default %s", o._statusCode, payload)
}

func (o *PatchQueueDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /call_center/queues/{id}][%d] PatchQueue default %s", o._statusCode, payload)
}

func (o *PatchQueueDefault) GetPayload() *models.EngineAPIError {
	return o.Payload
}

func (o *PatchQueueDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EngineAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
