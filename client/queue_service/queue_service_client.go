// Code generated by go-swagger; DO NOT EDIT.

package queue_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new queue service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueue(body *models.EngineCreateQueueRequest, opts ...ClientOption) (*CreateQueueOK, error)
	CreateQueueWithParams(params *CreateQueueParams, opts ...ClientOption) (*CreateQueueOK, error)

	DeleteQueue(params *DeleteQueueParams, opts ...ClientOption) (*DeleteQueueOK, error)

	PatchQueue(id string, body *models.EnginePatchQueueRequest, opts ...ClientOption) (*PatchQueueOK, error)
	PatchQueueWithParams(params *PatchQueueParams, opts ...ClientOption) (*PatchQueueOK, error)

	ReadQueue(params *ReadQueueParams, opts ...ClientOption) (*ReadQueueOK, error)

	SearchQueue(params *SearchQueueParams, opts ...ClientOption) (*SearchQueueOK, error)

	SearchQueueReportGeneral(params *SearchQueueReportGeneralParams, opts ...ClientOption) (*SearchQueueReportGeneralOK, error)

	SearchQueueTags(params *SearchQueueTagsParams, opts ...ClientOption) (*SearchQueueTagsOK, error)

	UpdateQueue(id string, body *models.EngineUpdateQueueRequest, opts ...ClientOption) (*UpdateQueueOK, error)
	UpdateQueueWithParams(params *UpdateQueueParams, opts ...ClientOption) (*UpdateQueueOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateQueue creates queue
*/
func (a *Client) CreateQueue(body *models.EngineCreateQueueRequest, opts ...ClientOption) (*CreateQueueOK, error) {
	params := NewCreateQueueParams().WithBody(body)
	return a.CreateQueueWithParams(params, opts...)
}

func (a *Client) CreateQueueWithParams(params *CreateQueueParams, opts ...ClientOption) (*CreateQueueOK, error) {
	if params == nil {
		params = NewCreateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueue",
		Method:             "POST",
		PathPattern:        "/call_center/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteQueue removes queue
*/

func (a *Client) DeleteQueue(params *DeleteQueueParams, opts ...ClientOption) (*DeleteQueueOK, error) {
	if params == nil {
		params = NewDeleteQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueue",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchQueue patches queue
*/
func (a *Client) PatchQueue(id string, body *models.EnginePatchQueueRequest, opts ...ClientOption) (*PatchQueueOK, error) {
	params := NewPatchQueueParams().WithBody(body).WithID(id)
	return a.PatchQueueWithParams(params, opts...)
}

func (a *Client) PatchQueueWithParams(params *PatchQueueParams, opts ...ClientOption) (*PatchQueueOK, error) {
	if params == nil {
		params = NewPatchQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueue",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadQueue queues item
*/

func (a *Client) ReadQueue(params *ReadQueueParams, opts ...ClientOption) (*ReadQueueOK, error) {
	if params == nil {
		params = NewReadQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueue",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchQueue lists of queue
*/

func (a *Client) SearchQueue(params *SearchQueueParams, opts ...ClientOption) (*SearchQueueOK, error) {
	if params == nil {
		params = NewSearchQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueue",
		Method:             "GET",
		PathPattern:        "/call_center/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchQueueReportGeneral search queue report general API
*/

func (a *Client) SearchQueueReportGeneral(params *SearchQueueReportGeneralParams, opts ...ClientOption) (*SearchQueueReportGeneralOK, error) {
	if params == nil {
		params = NewSearchQueueReportGeneralParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueReportGeneral",
		Method:             "GET",
		PathPattern:        "/call_center/queues/reports/general",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchQueueReportGeneralReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueReportGeneralOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchQueueReportGeneralDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchQueueTags lists routing schema tags
*/

func (a *Client) SearchQueueTags(params *SearchQueueTagsParams, opts ...ClientOption) (*SearchQueueTagsOK, error) {
	if params == nil {
		params = NewSearchQueueTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueTags",
		Method:             "GET",
		PathPattern:        "/call_center/queues/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchQueueTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchQueueTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateQueue updates queue
*/
func (a *Client) UpdateQueue(id string, body *models.EngineUpdateQueueRequest, opts ...ClientOption) (*UpdateQueueOK, error) {
	params := NewUpdateQueueParams().WithBody(body).WithID(id)
	return a.UpdateQueueWithParams(params, opts...)
}

func (a *Client) UpdateQueueWithParams(params *UpdateQueueParams, opts ...ClientOption) (*UpdateQueueOK, error) {
	if params == nil {
		params = NewUpdateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueue",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateQueueDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
