// Code generated by go-swagger; DO NOT EDIT.

package queue_skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new queue skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queue skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueueSkill(queueID int64, body *models.EngineCreateQueueSkillRequest, opts ...ClientOption) (*CreateQueueSkillOK, error)
	CreateQueueSkillWithParams(params *CreateQueueSkillParams, opts ...ClientOption) (*CreateQueueSkillOK, error)

	DeleteQueueSkill(queueID int64, id int64, opts ...ClientOption) (*DeleteQueueSkillOK, error)
	DeleteQueueSkillWithParams(params *DeleteQueueSkillParams, opts ...ClientOption) (*DeleteQueueSkillOK, error)

	PatchQueueSkill(params *PatchQueueSkillParams, opts ...ClientOption) (*PatchQueueSkillOK, error)

	ReadQueueSkill(queueID int64, id int64, opts ...ClientOption) (*ReadQueueSkillOK, error)
	ReadQueueSkillWithParams(params *ReadQueueSkillParams, opts ...ClientOption) (*ReadQueueSkillOK, error)

	SearchQueueSkill(params *SearchQueueSkillParams, opts ...ClientOption) (*SearchQueueSkillOK, error)

	UpdateQueueSkill(params *UpdateQueueSkillParams, opts ...ClientOption) (*UpdateQueueSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateQueueSkill create queue skill API
*/
func (a *Client) CreateQueueSkill(queueID int64, body *models.EngineCreateQueueSkillRequest, opts ...ClientOption) (*CreateQueueSkillOK, error) {
	params := NewCreateQueueSkillParams().WithBody(body).WithQueueID(queueID)
	return a.CreateQueueSkillWithParams(params, opts...)
}

func (a *Client) CreateQueueSkillWithParams(params *CreateQueueSkillParams, opts ...ClientOption) (*CreateQueueSkillOK, error) {
	if params == nil {
		params = NewCreateQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueueSkill",
		Method:             "POST",
		PathPattern:        "/call_center/queues/{queue_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteQueueSkill delete queue skill API
*/
func (a *Client) DeleteQueueSkill(queueID int64, id int64, opts ...ClientOption) (*DeleteQueueSkillOK, error) {
	params := NewDeleteQueueSkillParams().WithID(id).WithQueueID(queueID)
	return a.DeleteQueueSkillWithParams(params, opts...)
}

func (a *Client) DeleteQueueSkillWithParams(params *DeleteQueueSkillParams, opts ...ClientOption) (*DeleteQueueSkillOK, error) {
	if params == nil {
		params = NewDeleteQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueueSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchQueueSkill patch queue skill API
*/

func (a *Client) PatchQueueSkill(params *PatchQueueSkillParams, opts ...ClientOption) (*PatchQueueSkillOK, error) {
	if params == nil {
		params = NewPatchQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueueSkill",
		Method:             "PATCH",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadQueueSkill read queue skill API
*/
func (a *Client) ReadQueueSkill(queueID int64, id int64, opts ...ClientOption) (*ReadQueueSkillOK, error) {
	params := NewReadQueueSkillParams().WithID(id).WithQueueID(queueID)
	return a.ReadQueueSkillWithParams(params, opts...)
}

func (a *Client) ReadQueueSkillWithParams(params *ReadQueueSkillParams, opts ...ClientOption) (*ReadQueueSkillOK, error) {
	if params == nil {
		params = NewReadQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadQueueSkill",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchQueueSkill search queue skill API
*/

func (a *Client) SearchQueueSkill(params *SearchQueueSkillParams, opts ...ClientOption) (*SearchQueueSkillOK, error) {
	if params == nil {
		params = NewSearchQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchQueueSkill",
		Method:             "GET",
		PathPattern:        "/call_center/queues/{queue_id}/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateQueueSkill update queue skill API
*/

func (a *Client) UpdateQueueSkill(params *UpdateQueueSkillParams, opts ...ClientOption) (*UpdateQueueSkillOK, error) {
	if params == nil {
		params = NewUpdateQueueSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueueSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/queues/{queue_id}/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateQueueSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateQueueSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateQueueSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
