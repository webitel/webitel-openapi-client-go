// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RolesCreateRole(body *models.APICreateRoleRequest, opts ...ClientOption) (*RolesCreateRoleOK, error)
	RolesCreateRoleWithParams(params *RolesCreateRoleParams, opts ...ClientOption) (*RolesCreateRoleOK, error)

	RolesDeleteRole(params *RolesDeleteRoleParams, opts ...ClientOption) (*RolesDeleteRoleOK, error)

	RolesReadRole(params *RolesReadRoleParams, opts ...ClientOption) (*RolesReadRoleOK, error)

	RolesRoleMetadata(params *RolesRoleMetadataParams, opts ...ClientOption) (*RolesRoleMetadataOK, error)

	RolesSearchRecordAvailableRoles(params *RolesSearchRecordAvailableRolesParams, opts ...ClientOption) (*RolesSearchRecordAvailableRolesOK, error)

	RolesSearchRoles(params *RolesSearchRolesParams, opts ...ClientOption) (*RolesSearchRolesOK, error)

	RolesUpdateRole(roleID string, body *models.APIRolesUpdateRoleBody, opts ...ClientOption) (*RolesUpdateRoleOK, error)
	RolesUpdateRoleWithParams(params *RolesUpdateRoleParams, opts ...ClientOption) (*RolesUpdateRoleOK, error)

	RolesUpdateRole2(roleID string, body *models.APIRolesUpdateRoleBody, opts ...ClientOption) (*RolesUpdateRole2OK, error)
	RolesUpdateRole2WithParams(params *RolesUpdateRole2Params, opts ...ClientOption) (*RolesUpdateRole2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RolesCreateRole roles create role API
*/
func (a *Client) RolesCreateRole(body *models.APICreateRoleRequest, opts ...ClientOption) (*RolesCreateRoleOK, error) {
	params := NewRolesCreateRoleParams().WithBody(body)
	return a.RolesCreateRoleWithParams(params, opts...)
}

func (a *Client) RolesCreateRoleWithParams(params *RolesCreateRoleParams, opts ...ClientOption) (*RolesCreateRoleOK, error) {
	if params == nil {
		params = NewRolesCreateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_CreateRole",
		Method:             "POST",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesCreateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesCreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_CreateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesDeleteRole roles delete role API
*/

func (a *Client) RolesDeleteRole(params *RolesDeleteRoleParams, opts ...ClientOption) (*RolesDeleteRoleOK, error) {
	if params == nil {
		params = NewRolesDeleteRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_DeleteRole",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesDeleteRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesDeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_DeleteRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesReadRole roles read role API
*/

func (a *Client) RolesReadRole(params *RolesReadRoleParams, opts ...ClientOption) (*RolesReadRoleOK, error) {
	if params == nil {
		params = NewRolesReadRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_ReadRole",
		Method:             "GET",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesReadRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesReadRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_ReadRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesRoleMetadata roles role metadata API
*/

func (a *Client) RolesRoleMetadata(params *RolesRoleMetadataParams, opts ...ClientOption) (*RolesRoleMetadataOK, error) {
	if params == nil {
		params = NewRolesRoleMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_RoleMetadata",
		Method:             "GET",
		PathPattern:        "/roles/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesRoleMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesRoleMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_RoleMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesSearchRecordAvailableRoles roles search record available roles API
*/

func (a *Client) RolesSearchRecordAvailableRoles(params *RolesSearchRecordAvailableRolesParams, opts ...ClientOption) (*RolesSearchRecordAvailableRolesOK, error) {
	if params == nil {
		params = NewRolesSearchRecordAvailableRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_SearchRecordAvailableRoles",
		Method:             "GET",
		PathPattern:        "/roles/objects/{object}/records/{record.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesSearchRecordAvailableRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesSearchRecordAvailableRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_SearchRecordAvailableRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesSearchRoles roles search roles API
*/

func (a *Client) RolesSearchRoles(params *RolesSearchRolesParams, opts ...ClientOption) (*RolesSearchRolesOK, error) {
	if params == nil {
		params = NewRolesSearchRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_SearchRoles",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesSearchRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesSearchRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_SearchRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesUpdateRole roles update role API
*/
func (a *Client) RolesUpdateRole(roleID string, body *models.APIRolesUpdateRoleBody, opts ...ClientOption) (*RolesUpdateRoleOK, error) {
	params := NewRolesUpdateRoleParams().WithBody(body).WithRoleID(roleID)
	return a.RolesUpdateRoleWithParams(params, opts...)
}

func (a *Client) RolesUpdateRoleWithParams(params *RolesUpdateRoleParams, opts ...ClientOption) (*RolesUpdateRoleOK, error) {
	if params == nil {
		params = NewRolesUpdateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_UpdateRole",
		Method:             "PUT",
		PathPattern:        "/roles/{role.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesUpdateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesUpdateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_UpdateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RolesUpdateRole2 roles update role2 API
*/
func (a *Client) RolesUpdateRole2(roleID string, body *models.APIRolesUpdateRoleBody, opts ...ClientOption) (*RolesUpdateRole2OK, error) {
	params := NewRolesUpdateRole2Params().WithBody(body).WithRoleID(roleID)
	return a.RolesUpdateRole2WithParams(params, opts...)
}

func (a *Client) RolesUpdateRole2WithParams(params *RolesUpdateRole2Params, opts ...ClientOption) (*RolesUpdateRole2OK, error) {
	if params == nil {
		params = NewRolesUpdateRole2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Roles_UpdateRole2",
		Method:             "PATCH",
		PathPattern:        "/roles/{role.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesUpdateRole2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesUpdateRole2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_UpdateRole2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
