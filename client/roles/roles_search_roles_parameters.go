// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRolesSearchRolesParams creates a new RolesSearchRolesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRolesSearchRolesParams() *RolesSearchRolesParams {
	return &RolesSearchRolesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRolesSearchRolesParamsWithTimeout creates a new RolesSearchRolesParams object
// with the ability to set a timeout on a request.
func NewRolesSearchRolesParamsWithTimeout(timeout time.Duration) *RolesSearchRolesParams {
	return &RolesSearchRolesParams{
		timeout: timeout,
	}
}

// NewRolesSearchRolesParamsWithContext creates a new RolesSearchRolesParams object
// with the ability to set a context for a request.
func NewRolesSearchRolesParamsWithContext(ctx context.Context) *RolesSearchRolesParams {
	return &RolesSearchRolesParams{
		Context: ctx,
	}
}

// NewRolesSearchRolesParamsWithHTTPClient creates a new RolesSearchRolesParams object
// with the ability to set a custom HTTPClient for a request.
func NewRolesSearchRolesParamsWithHTTPClient(client *http.Client) *RolesSearchRolesParams {
	return &RolesSearchRolesParams{
		HTTPClient: client,
	}
}

/*
RolesSearchRolesParams contains all the parameters to send to the API endpoint

	for the roles search roles operation.

	Typically these are written to a http.Request.
*/
type RolesSearchRolesParams struct {

	/* Fields.

	     bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of
	controls

	output
	*/
	Fields []string

	/* Ids.

	     ----- Role-specific Filters ----------------- //

	filter: .id = any(:ids...)
	*/
	Ids []string

	/* Name.

	   filter: group name like
	*/
	Name *string

	/* Page.

	   page number

	   Format: int32
	*/
	Page *int32

	/* Q.

	   filter: term of search (name, description)
	*/
	Q *string

	/* Size.

	   page size

	   Format: int32
	*/
	Size *int32

	/* Sort.

	   sort: "field" asc; "!field" desc
	*/
	Sort []string

	/* UserID.

	   Object ID

	   Format: int64
	*/
	UserID *string

	/* UserName.

	   Display Name
	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the roles search roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RolesSearchRolesParams) WithDefaults() *RolesSearchRolesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the roles search roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RolesSearchRolesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the roles search roles params
func (o *RolesSearchRolesParams) WithTimeout(timeout time.Duration) *RolesSearchRolesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the roles search roles params
func (o *RolesSearchRolesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the roles search roles params
func (o *RolesSearchRolesParams) WithContext(ctx context.Context) *RolesSearchRolesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the roles search roles params
func (o *RolesSearchRolesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the roles search roles params
func (o *RolesSearchRolesParams) WithHTTPClient(client *http.Client) *RolesSearchRolesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the roles search roles params
func (o *RolesSearchRolesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the roles search roles params
func (o *RolesSearchRolesParams) WithFields(fields []string) *RolesSearchRolesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the roles search roles params
func (o *RolesSearchRolesParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIds adds the ids to the roles search roles params
func (o *RolesSearchRolesParams) WithIds(ids []string) *RolesSearchRolesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the roles search roles params
func (o *RolesSearchRolesParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithName adds the name to the roles search roles params
func (o *RolesSearchRolesParams) WithName(name *string) *RolesSearchRolesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the roles search roles params
func (o *RolesSearchRolesParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the roles search roles params
func (o *RolesSearchRolesParams) WithPage(page *int32) *RolesSearchRolesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the roles search roles params
func (o *RolesSearchRolesParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the roles search roles params
func (o *RolesSearchRolesParams) WithQ(q *string) *RolesSearchRolesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the roles search roles params
func (o *RolesSearchRolesParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the roles search roles params
func (o *RolesSearchRolesParams) WithSize(size *int32) *RolesSearchRolesParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the roles search roles params
func (o *RolesSearchRolesParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the roles search roles params
func (o *RolesSearchRolesParams) WithSort(sort []string) *RolesSearchRolesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the roles search roles params
func (o *RolesSearchRolesParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithUserID adds the userID to the roles search roles params
func (o *RolesSearchRolesParams) WithUserID(userID *string) *RolesSearchRolesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the roles search roles params
func (o *RolesSearchRolesParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserName adds the userName to the roles search roles params
func (o *RolesSearchRolesParams) WithUserName(userName *string) *RolesSearchRolesParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the roles search roles params
func (o *RolesSearchRolesParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *RolesSearchRolesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.UserID != nil {

		// query param user.id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user.id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserName != nil {

		// query param user.name
		var qrUserName string

		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {

			if err := r.SetQueryParam("user.name", qUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamRolesSearchRoles binds the parameter fields
func (o *RolesSearchRolesParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamRolesSearchRoles binds the parameter ids
func (o *RolesSearchRolesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamRolesSearchRoles binds the parameter sort
func (o *RolesSearchRolesParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
