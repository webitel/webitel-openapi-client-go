// Code generated by go-swagger; DO NOT EDIT.

package routing_chat_plan_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new routing chat plan service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for routing chat plan service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateChatPlan(body *models.EngineCreateChatPlanRequest, opts ...ClientOption) (*CreateChatPlanOK, error)
	CreateChatPlanWithParams(params *CreateChatPlanParams, opts ...ClientOption) (*CreateChatPlanOK, error)

	DeleteChatPlan(id int32, opts ...ClientOption) (*DeleteChatPlanOK, error)
	DeleteChatPlanWithParams(params *DeleteChatPlanParams, opts ...ClientOption) (*DeleteChatPlanOK, error)

	PatchChatPlan(id int32, body *models.EnginePatchChatPlanRequest, opts ...ClientOption) (*PatchChatPlanOK, error)
	PatchChatPlanWithParams(params *PatchChatPlanParams, opts ...ClientOption) (*PatchChatPlanOK, error)

	ReadChatPlan(id int32, opts ...ClientOption) (*ReadChatPlanOK, error)
	ReadChatPlanWithParams(params *ReadChatPlanParams, opts ...ClientOption) (*ReadChatPlanOK, error)

	SearchChatPlan(params *SearchChatPlanParams, opts ...ClientOption) (*SearchChatPlanOK, error)

	UpdateChatPlan(id int32, body *models.EngineUpdateChatPlanRequest, opts ...ClientOption) (*UpdateChatPlanOK, error)
	UpdateChatPlanWithParams(params *UpdateChatPlanParams, opts ...ClientOption) (*UpdateChatPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateChatPlan create chat plan API
*/
func (a *Client) CreateChatPlan(body *models.EngineCreateChatPlanRequest, opts ...ClientOption) (*CreateChatPlanOK, error) {
	params := NewCreateChatPlanParams().WithBody(body)
	return a.CreateChatPlanWithParams(params, opts...)
}

func (a *Client) CreateChatPlanWithParams(params *CreateChatPlanParams, opts ...ClientOption) (*CreateChatPlanOK, error) {
	if params == nil {
		params = NewCreateChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateChatPlan",
		Method:             "POST",
		PathPattern:        "/routing/outbound/chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteChatPlan delete chat plan API
*/
func (a *Client) DeleteChatPlan(id int32, opts ...ClientOption) (*DeleteChatPlanOK, error) {
	params := NewDeleteChatPlanParams().WithID(id)
	return a.DeleteChatPlanWithParams(params, opts...)
}

func (a *Client) DeleteChatPlanWithParams(params *DeleteChatPlanParams, opts ...ClientOption) (*DeleteChatPlanOK, error) {
	if params == nil {
		params = NewDeleteChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteChatPlan",
		Method:             "DELETE",
		PathPattern:        "/routing/outbound/chat/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchChatPlan patch chat plan API
*/
func (a *Client) PatchChatPlan(id int32, body *models.EnginePatchChatPlanRequest, opts ...ClientOption) (*PatchChatPlanOK, error) {
	params := NewPatchChatPlanParams().WithBody(body).WithID(id)
	return a.PatchChatPlanWithParams(params, opts...)
}

func (a *Client) PatchChatPlanWithParams(params *PatchChatPlanParams, opts ...ClientOption) (*PatchChatPlanOK, error) {
	if params == nil {
		params = NewPatchChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchChatPlan",
		Method:             "PATCH",
		PathPattern:        "/routing/outbound/chat/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadChatPlan read chat plan API
*/
func (a *Client) ReadChatPlan(id int32, opts ...ClientOption) (*ReadChatPlanOK, error) {
	params := NewReadChatPlanParams().WithID(id)
	return a.ReadChatPlanWithParams(params, opts...)
}

func (a *Client) ReadChatPlanWithParams(params *ReadChatPlanParams, opts ...ClientOption) (*ReadChatPlanOK, error) {
	if params == nil {
		params = NewReadChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadChatPlan",
		Method:             "GET",
		PathPattern:        "/routing/outbound/chat/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchChatPlan search chat plan API
*/

func (a *Client) SearchChatPlan(params *SearchChatPlanParams, opts ...ClientOption) (*SearchChatPlanOK, error) {
	if params == nil {
		params = NewSearchChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchChatPlan",
		Method:             "GET",
		PathPattern:        "/routing/outbound/chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateChatPlan update chat plan API
*/
func (a *Client) UpdateChatPlan(id int32, body *models.EngineUpdateChatPlanRequest, opts ...ClientOption) (*UpdateChatPlanOK, error) {
	params := NewUpdateChatPlanParams().WithBody(body).WithID(id)
	return a.UpdateChatPlanWithParams(params, opts...)
}

func (a *Client) UpdateChatPlanWithParams(params *UpdateChatPlanParams, opts ...ClientOption) (*UpdateChatPlanOK, error) {
	if params == nil {
		params = NewUpdateChatPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateChatPlan",
		Method:             "PUT",
		PathPattern:        "/routing/outbound/chat/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateChatPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChatPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateChatPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
