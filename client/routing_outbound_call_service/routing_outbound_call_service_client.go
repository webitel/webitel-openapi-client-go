// Code generated by go-swagger; DO NOT EDIT.

package routing_outbound_call_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new routing outbound call service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for routing outbound call service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRoutingOutboundCall(body *models.EngineCreateRoutingOutboundCallRequest, opts ...ClientOption) (*CreateRoutingOutboundCallOK, error)
	CreateRoutingOutboundCallWithParams(params *CreateRoutingOutboundCallParams, opts ...ClientOption) (*CreateRoutingOutboundCallOK, error)

	DeleteRoutingOutboundCall(params *DeleteRoutingOutboundCallParams, opts ...ClientOption) (*DeleteRoutingOutboundCallOK, error)

	MovePositionRoutingOutboundCall(params *MovePositionRoutingOutboundCallParams, opts ...ClientOption) (*MovePositionRoutingOutboundCallOK, error)

	PatchRoutingOutboundCall(id string, body *models.EnginePatchRoutingOutboundCallRequest, opts ...ClientOption) (*PatchRoutingOutboundCallOK, error)
	PatchRoutingOutboundCallWithParams(params *PatchRoutingOutboundCallParams, opts ...ClientOption) (*PatchRoutingOutboundCallOK, error)

	ReadRoutingOutboundCall(params *ReadRoutingOutboundCallParams, opts ...ClientOption) (*ReadRoutingOutboundCallOK, error)

	SearchRoutingOutboundCall(params *SearchRoutingOutboundCallParams, opts ...ClientOption) (*SearchRoutingOutboundCallOK, error)

	UpdateRoutingOutboundCall(id string, body *models.EngineUpdateRoutingOutboundCallRequest, opts ...ClientOption) (*UpdateRoutingOutboundCallOK, error)
	UpdateRoutingOutboundCallWithParams(params *UpdateRoutingOutboundCallParams, opts ...ClientOption) (*UpdateRoutingOutboundCallOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRoutingOutboundCall creates routing outbound call
*/
func (a *Client) CreateRoutingOutboundCall(body *models.EngineCreateRoutingOutboundCallRequest, opts ...ClientOption) (*CreateRoutingOutboundCallOK, error) {
	params := NewCreateRoutingOutboundCallParams().WithBody(body)
	return a.CreateRoutingOutboundCallWithParams(params, opts...)
}

func (a *Client) CreateRoutingOutboundCallWithParams(params *CreateRoutingOutboundCallParams, opts ...ClientOption) (*CreateRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewCreateRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRoutingOutboundCall",
		Method:             "POST",
		PathPattern:        "/routing/outbound/calls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteRoutingOutboundCall removes routing outbound call
*/

func (a *Client) DeleteRoutingOutboundCall(params *DeleteRoutingOutboundCallParams, opts ...ClientOption) (*DeleteRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewDeleteRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoutingOutboundCall",
		Method:             "DELETE",
		PathPattern:        "/routing/outbound/calls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MovePositionRoutingOutboundCall moves routing outbound call
*/

func (a *Client) MovePositionRoutingOutboundCall(params *MovePositionRoutingOutboundCallParams, opts ...ClientOption) (*MovePositionRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewMovePositionRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MovePositionRoutingOutboundCall",
		Method:             "PATCH",
		PathPattern:        "/routing/outbound/calls/{from_id}/to/{to_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MovePositionRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MovePositionRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MovePositionRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchRoutingOutboundCall patches routing outbound call
*/
func (a *Client) PatchRoutingOutboundCall(id string, body *models.EnginePatchRoutingOutboundCallRequest, opts ...ClientOption) (*PatchRoutingOutboundCallOK, error) {
	params := NewPatchRoutingOutboundCallParams().WithBody(body).WithID(id)
	return a.PatchRoutingOutboundCallWithParams(params, opts...)
}

func (a *Client) PatchRoutingOutboundCallWithParams(params *PatchRoutingOutboundCallParams, opts ...ClientOption) (*PatchRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewPatchRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchRoutingOutboundCall",
		Method:             "PATCH",
		PathPattern:        "/routing/outbound/calls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadRoutingOutboundCall routings outbound call item
*/

func (a *Client) ReadRoutingOutboundCall(params *ReadRoutingOutboundCallParams, opts ...ClientOption) (*ReadRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewReadRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadRoutingOutboundCall",
		Method:             "GET",
		PathPattern:        "/routing/outbound/calls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchRoutingOutboundCall lists of routing outbound call
*/

func (a *Client) SearchRoutingOutboundCall(params *SearchRoutingOutboundCallParams, opts ...ClientOption) (*SearchRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewSearchRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchRoutingOutboundCall",
		Method:             "GET",
		PathPattern:        "/routing/outbound/calls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateRoutingOutboundCall updates routing outbound call
*/
func (a *Client) UpdateRoutingOutboundCall(id string, body *models.EngineUpdateRoutingOutboundCallRequest, opts ...ClientOption) (*UpdateRoutingOutboundCallOK, error) {
	params := NewUpdateRoutingOutboundCallParams().WithBody(body).WithID(id)
	return a.UpdateRoutingOutboundCallWithParams(params, opts...)
}

func (a *Client) UpdateRoutingOutboundCallWithParams(params *UpdateRoutingOutboundCallParams, opts ...ClientOption) (*UpdateRoutingOutboundCallOK, error) {
	if params == nil {
		params = NewUpdateRoutingOutboundCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRoutingOutboundCall",
		Method:             "PUT",
		PathPattern:        "/routing/outbound/calls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoutingOutboundCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoutingOutboundCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRoutingOutboundCallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
