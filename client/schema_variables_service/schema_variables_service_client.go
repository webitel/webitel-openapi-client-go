// Code generated by go-swagger; DO NOT EDIT.

package schema_variables_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new schema variables service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schema variables service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSchemaVariable(body *models.EngineCreateSchemaVariableRequest, opts ...ClientOption) (*CreateSchemaVariableOK, error)
	CreateSchemaVariableWithParams(params *CreateSchemaVariableParams, opts ...ClientOption) (*CreateSchemaVariableOK, error)

	DeleteSchemaVariable(id int32, opts ...ClientOption) (*DeleteSchemaVariableOK, error)
	DeleteSchemaVariableWithParams(params *DeleteSchemaVariableParams, opts ...ClientOption) (*DeleteSchemaVariableOK, error)

	PatchSchemaVariable(id int32, body *models.EnginePatchSchemaVariableRequest, opts ...ClientOption) (*PatchSchemaVariableOK, error)
	PatchSchemaVariableWithParams(params *PatchSchemaVariableParams, opts ...ClientOption) (*PatchSchemaVariableOK, error)

	ReadSchemaVariable(id int32, opts ...ClientOption) (*ReadSchemaVariableOK, error)
	ReadSchemaVariableWithParams(params *ReadSchemaVariableParams, opts ...ClientOption) (*ReadSchemaVariableOK, error)

	SearchSchemaVariable(params *SearchSchemaVariableParams, opts ...ClientOption) (*SearchSchemaVariableOK, error)

	UpdateSchemaVariable(id int32, body *models.EngineUpdateSchemaVariableRequest, opts ...ClientOption) (*UpdateSchemaVariableOK, error)
	UpdateSchemaVariableWithParams(params *UpdateSchemaVariableParams, opts ...ClientOption) (*UpdateSchemaVariableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSchemaVariable create schema variable API
*/
func (a *Client) CreateSchemaVariable(body *models.EngineCreateSchemaVariableRequest, opts ...ClientOption) (*CreateSchemaVariableOK, error) {
	params := NewCreateSchemaVariableParams().WithBody(body)
	return a.CreateSchemaVariableWithParams(params, opts...)
}

func (a *Client) CreateSchemaVariableWithParams(params *CreateSchemaVariableParams, opts ...ClientOption) (*CreateSchemaVariableOK, error) {
	if params == nil {
		params = NewCreateSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSchemaVariable",
		Method:             "POST",
		PathPattern:        "/routing/schema/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSchemaVariable delete schema variable API
*/
func (a *Client) DeleteSchemaVariable(id int32, opts ...ClientOption) (*DeleteSchemaVariableOK, error) {
	params := NewDeleteSchemaVariableParams().WithID(id)
	return a.DeleteSchemaVariableWithParams(params, opts...)
}

func (a *Client) DeleteSchemaVariableWithParams(params *DeleteSchemaVariableParams, opts ...ClientOption) (*DeleteSchemaVariableOK, error) {
	if params == nil {
		params = NewDeleteSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSchemaVariable",
		Method:             "DELETE",
		PathPattern:        "/routing/schema/variables/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSchemaVariable patch schema variable API
*/
func (a *Client) PatchSchemaVariable(id int32, body *models.EnginePatchSchemaVariableRequest, opts ...ClientOption) (*PatchSchemaVariableOK, error) {
	params := NewPatchSchemaVariableParams().WithBody(body).WithID(id)
	return a.PatchSchemaVariableWithParams(params, opts...)
}

func (a *Client) PatchSchemaVariableWithParams(params *PatchSchemaVariableParams, opts ...ClientOption) (*PatchSchemaVariableOK, error) {
	if params == nil {
		params = NewPatchSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchSchemaVariable",
		Method:             "PATCH",
		PathPattern:        "/routing/schema/variables/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadSchemaVariable read schema variable API
*/
func (a *Client) ReadSchemaVariable(id int32, opts ...ClientOption) (*ReadSchemaVariableOK, error) {
	params := NewReadSchemaVariableParams().WithID(id)
	return a.ReadSchemaVariableWithParams(params, opts...)
}

func (a *Client) ReadSchemaVariableWithParams(params *ReadSchemaVariableParams, opts ...ClientOption) (*ReadSchemaVariableOK, error) {
	if params == nil {
		params = NewReadSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadSchemaVariable",
		Method:             "GET",
		PathPattern:        "/routing/schema/variables/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchSchemaVariable search schema variable API
*/

func (a *Client) SearchSchemaVariable(params *SearchSchemaVariableParams, opts ...ClientOption) (*SearchSchemaVariableOK, error) {
	if params == nil {
		params = NewSearchSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchSchemaVariable",
		Method:             "GET",
		PathPattern:        "/routing/schema/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSchemaVariable update schema variable API
*/
func (a *Client) UpdateSchemaVariable(id int32, body *models.EngineUpdateSchemaVariableRequest, opts ...ClientOption) (*UpdateSchemaVariableOK, error) {
	params := NewUpdateSchemaVariableParams().WithBody(body).WithID(id)
	return a.UpdateSchemaVariableWithParams(params, opts...)
}

func (a *Client) UpdateSchemaVariableWithParams(params *UpdateSchemaVariableParams, opts ...ClientOption) (*UpdateSchemaVariableOK, error) {
	if params == nil {
		params = NewUpdateSchemaVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSchemaVariable",
		Method:             "PUT",
		PathPattern:        "/routing/schema/variables/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSchemaVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSchemaVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSchemaVariableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
