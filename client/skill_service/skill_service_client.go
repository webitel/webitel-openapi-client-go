// Code generated by go-swagger; DO NOT EDIT.

package skill_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new skill service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skill service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSkill(body *models.EngineCreateSkillRequest, opts ...ClientOption) (*CreateSkillOK, error)
	CreateSkillWithParams(params *CreateSkillParams, opts ...ClientOption) (*CreateSkillOK, error)

	CreateSkillAgent(skillID string, body *models.EngineCreateSkillAgentRequest, opts ...ClientOption) (*CreateSkillAgentOK, error)
	CreateSkillAgentWithParams(params *CreateSkillAgentParams, opts ...ClientOption) (*CreateSkillAgentOK, error)

	DeleteSkill(params *DeleteSkillParams, opts ...ClientOption) (*DeleteSkillOK, error)

	DeleteSkillAgent(skillID string, body *models.EngineDeleteSkillAgentRequest, opts ...ClientOption) (*DeleteSkillAgentOK, error)
	DeleteSkillAgentWithParams(params *DeleteSkillAgentParams, opts ...ClientOption) (*DeleteSkillAgentOK, error)

	PatchSkillAgent(skillID string, body *models.EnginePatchSkillAgentRequest, opts ...ClientOption) (*PatchSkillAgentOK, error)
	PatchSkillAgentWithParams(params *PatchSkillAgentParams, opts ...ClientOption) (*PatchSkillAgentOK, error)

	ReadSkill(params *ReadSkillParams, opts ...ClientOption) (*ReadSkillOK, error)

	SearchSkill(params *SearchSkillParams, opts ...ClientOption) (*SearchSkillOK, error)

	SearchSkillAgent(params *SearchSkillAgentParams, opts ...ClientOption) (*SearchSkillAgentOK, error)

	UpdateSkill(id string, body *models.EngineUpdateSkillRequest, opts ...ClientOption) (*UpdateSkillOK, error)
	UpdateSkillWithParams(params *UpdateSkillParams, opts ...ClientOption) (*UpdateSkillOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSkill creates skill
*/
func (a *Client) CreateSkill(body *models.EngineCreateSkillRequest, opts ...ClientOption) (*CreateSkillOK, error) {
	params := NewCreateSkillParams().WithBody(body)
	return a.CreateSkillWithParams(params, opts...)
}

func (a *Client) CreateSkillWithParams(params *CreateSkillParams, opts ...ClientOption) (*CreateSkillOK, error) {
	if params == nil {
		params = NewCreateSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSkill",
		Method:             "POST",
		PathPattern:        "/call_center/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSkillAgent create skill agent API
*/
func (a *Client) CreateSkillAgent(skillID string, body *models.EngineCreateSkillAgentRequest, opts ...ClientOption) (*CreateSkillAgentOK, error) {
	params := NewCreateSkillAgentParams().WithBody(body).WithSkillID(skillID)
	return a.CreateSkillAgentWithParams(params, opts...)
}

func (a *Client) CreateSkillAgentWithParams(params *CreateSkillAgentParams, opts ...ClientOption) (*CreateSkillAgentOK, error) {
	if params == nil {
		params = NewCreateSkillAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSkillAgent",
		Method:             "POST",
		PathPattern:        "/call_center/skills/{skill_id}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSkillAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSkillAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSkillAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSkill removes skill
*/

func (a *Client) DeleteSkill(params *DeleteSkillParams, opts ...ClientOption) (*DeleteSkillOK, error) {
	if params == nil {
		params = NewDeleteSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSkill",
		Method:             "DELETE",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSkillAgent delete skill agent API
*/
func (a *Client) DeleteSkillAgent(skillID string, body *models.EngineDeleteSkillAgentRequest, opts ...ClientOption) (*DeleteSkillAgentOK, error) {
	params := NewDeleteSkillAgentParams().WithBody(body).WithSkillID(skillID)
	return a.DeleteSkillAgentWithParams(params, opts...)
}

func (a *Client) DeleteSkillAgentWithParams(params *DeleteSkillAgentParams, opts ...ClientOption) (*DeleteSkillAgentOK, error) {
	if params == nil {
		params = NewDeleteSkillAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSkillAgent",
		Method:             "DELETE",
		PathPattern:        "/call_center/skills/{skill_id}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSkillAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSkillAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSkillAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSkillAgent patch skill agent API
*/
func (a *Client) PatchSkillAgent(skillID string, body *models.EnginePatchSkillAgentRequest, opts ...ClientOption) (*PatchSkillAgentOK, error) {
	params := NewPatchSkillAgentParams().WithBody(body).WithSkillID(skillID)
	return a.PatchSkillAgentWithParams(params, opts...)
}

func (a *Client) PatchSkillAgentWithParams(params *PatchSkillAgentParams, opts ...ClientOption) (*PatchSkillAgentOK, error) {
	if params == nil {
		params = NewPatchSkillAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchSkillAgent",
		Method:             "PATCH",
		PathPattern:        "/call_center/skills/{skill_id}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSkillAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSkillAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSkillAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadSkill skills item
*/

func (a *Client) ReadSkill(params *ReadSkillParams, opts ...ClientOption) (*ReadSkillOK, error) {
	if params == nil {
		params = NewReadSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadSkill",
		Method:             "GET",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchSkill lists of skill
*/

func (a *Client) SearchSkill(params *SearchSkillParams, opts ...ClientOption) (*SearchSkillOK, error) {
	if params == nil {
		params = NewSearchSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchSkill",
		Method:             "GET",
		PathPattern:        "/call_center/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchSkillAgent fors agents search skill agent
*/

func (a *Client) SearchSkillAgent(params *SearchSkillAgentParams, opts ...ClientOption) (*SearchSkillAgentOK, error) {
	if params == nil {
		params = NewSearchSkillAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchSkillAgent",
		Method:             "GET",
		PathPattern:        "/call_center/skills/{skill_id}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSkillAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSkillAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchSkillAgentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSkill updates skill
*/
func (a *Client) UpdateSkill(id string, body *models.EngineUpdateSkillRequest, opts ...ClientOption) (*UpdateSkillOK, error) {
	params := NewUpdateSkillParams().WithBody(body).WithID(id)
	return a.UpdateSkillWithParams(params, opts...)
}

func (a *Client) UpdateSkillWithParams(params *UpdateSkillParams, opts ...ClientOption) (*UpdateSkillOK, error) {
	if params == nil {
		params = NewUpdateSkillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSkill",
		Method:             "PUT",
		PathPattern:        "/call_center/skills/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSkillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSkillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSkillDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
