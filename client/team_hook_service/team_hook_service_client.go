// Code generated by go-swagger; DO NOT EDIT.

package team_hook_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new team hook service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team hook service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTeamHook(teamID string, body *models.EngineCreateTeamHookRequest, opts ...ClientOption) (*CreateTeamHookOK, error)
	CreateTeamHookWithParams(params *CreateTeamHookParams, opts ...ClientOption) (*CreateTeamHookOK, error)

	DeleteTeamHook(teamID string, id int64, opts ...ClientOption) (*DeleteTeamHookOK, error)
	DeleteTeamHookWithParams(params *DeleteTeamHookParams, opts ...ClientOption) (*DeleteTeamHookOK, error)

	PatchTeamHook(params *PatchTeamHookParams, opts ...ClientOption) (*PatchTeamHookOK, error)

	ReadTeamHook(teamID string, id int64, opts ...ClientOption) (*ReadTeamHookOK, error)
	ReadTeamHookWithParams(params *ReadTeamHookParams, opts ...ClientOption) (*ReadTeamHookOK, error)

	SearchTeamHook(params *SearchTeamHookParams, opts ...ClientOption) (*SearchTeamHookOK, error)

	UpdateTeamHook(params *UpdateTeamHookParams, opts ...ClientOption) (*UpdateTeamHookOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTeamHook create team hook API
*/
func (a *Client) CreateTeamHook(teamID string, body *models.EngineCreateTeamHookRequest, opts ...ClientOption) (*CreateTeamHookOK, error) {
	params := NewCreateTeamHookParams().WithBody(body).WithTeamID(teamID)
	return a.CreateTeamHookWithParams(params, opts...)
}

func (a *Client) CreateTeamHookWithParams(params *CreateTeamHookParams, opts ...ClientOption) (*CreateTeamHookOK, error) {
	if params == nil {
		params = NewCreateTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTeamHook",
		Method:             "POST",
		PathPattern:        "/call_center/teams/{team_id}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTeamHook delete team hook API
*/
func (a *Client) DeleteTeamHook(teamID string, id int64, opts ...ClientOption) (*DeleteTeamHookOK, error) {
	params := NewDeleteTeamHookParams().WithID(id).WithTeamID(teamID)
	return a.DeleteTeamHookWithParams(params, opts...)
}

func (a *Client) DeleteTeamHookWithParams(params *DeleteTeamHookParams, opts ...ClientOption) (*DeleteTeamHookOK, error) {
	if params == nil {
		params = NewDeleteTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeamHook",
		Method:             "DELETE",
		PathPattern:        "/call_center/teams/{team_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTeamHook patch team hook API
*/

func (a *Client) PatchTeamHook(params *PatchTeamHookParams, opts ...ClientOption) (*PatchTeamHookOK, error) {
	if params == nil {
		params = NewPatchTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchTeamHook",
		Method:             "PATCH",
		PathPattern:        "/call_center/teams/{team_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTeamHook read team hook API
*/
func (a *Client) ReadTeamHook(teamID string, id int64, opts ...ClientOption) (*ReadTeamHookOK, error) {
	params := NewReadTeamHookParams().WithID(id).WithTeamID(teamID)
	return a.ReadTeamHookWithParams(params, opts...)
}

func (a *Client) ReadTeamHookWithParams(params *ReadTeamHookParams, opts ...ClientOption) (*ReadTeamHookOK, error) {
	if params == nil {
		params = NewReadTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTeamHook",
		Method:             "GET",
		PathPattern:        "/call_center/teams/{team_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchTeamHook search team hook API
*/

func (a *Client) SearchTeamHook(params *SearchTeamHookParams, opts ...ClientOption) (*SearchTeamHookOK, error) {
	if params == nil {
		params = NewSearchTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTeamHook",
		Method:             "GET",
		PathPattern:        "/call_center/teams/{team_id}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTeamHook update team hook API
*/

func (a *Client) UpdateTeamHook(params *UpdateTeamHookParams, opts ...ClientOption) (*UpdateTeamHookOK, error) {
	if params == nil {
		params = NewUpdateTeamHookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTeamHook",
		Method:             "PUT",
		PathPattern:        "/call_center/teams/{team_id}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTeamHookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTeamHookDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
