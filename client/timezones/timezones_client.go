// Code generated by go-swagger; DO NOT EDIT.

package timezones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new timezones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for timezones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TimezonesDeleteTimezone(params *TimezonesDeleteTimezoneParams, opts ...ClientOption) (*TimezonesDeleteTimezoneOK, error)

	TimezonesDeleteTimezones(params *TimezonesDeleteTimezonesParams, opts ...ClientOption) (*TimezonesDeleteTimezonesOK, error)

	TimezonesListTimezones(params *TimezonesListTimezonesParams, opts ...ClientOption) (*TimezonesListTimezonesOK, error)

	TimezonesLocateTimezone(params *TimezonesLocateTimezoneParams, opts ...ClientOption) (*TimezonesLocateTimezoneOK, error)

	TimezonesMergeTimezones(params *TimezonesMergeTimezonesParams, opts ...ClientOption) (*TimezonesMergeTimezonesOK, error)

	TimezonesResetTimezones(params *TimezonesResetTimezonesParams, opts ...ClientOption) (*TimezonesResetTimezonesOK, error)

	TimezonesUpdateTimezone(params *TimezonesUpdateTimezoneParams, opts ...ClientOption) (*TimezonesUpdateTimezoneOK, error)

	TimezonesUpdateTimezone2(params *TimezonesUpdateTimezone2Params, opts ...ClientOption) (*TimezonesUpdateTimezone2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TimezonesDeleteTimezone removes the contact s timezone association
*/

func (a *Client) TimezonesDeleteTimezone(params *TimezonesDeleteTimezoneParams, opts ...ClientOption) (*TimezonesDeleteTimezoneOK, error) {
	if params == nil {
		params = NewTimezonesDeleteTimezoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_DeleteTimezone",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/timezones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesDeleteTimezoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesDeleteTimezoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_DeleteTimezone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesDeleteTimezones removes the contact s timezone s
*/

func (a *Client) TimezonesDeleteTimezones(params *TimezonesDeleteTimezonesParams, opts ...ClientOption) (*TimezonesDeleteTimezonesOK, error) {
	if params == nil {
		params = NewTimezonesDeleteTimezonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_DeleteTimezones",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contact_id}/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesDeleteTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesDeleteTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_DeleteTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesListTimezones lists of the contact s timezone s
*/

func (a *Client) TimezonesListTimezones(params *TimezonesListTimezonesParams, opts ...ClientOption) (*TimezonesListTimezonesOK, error) {
	if params == nil {
		params = NewTimezonesListTimezonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_ListTimezones",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesListTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesListTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_ListTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesLocateTimezone locates the contact s timezone association
*/

func (a *Client) TimezonesLocateTimezone(params *TimezonesLocateTimezoneParams, opts ...ClientOption) (*TimezonesLocateTimezoneOK, error) {
	if params == nil {
		params = NewTimezonesLocateTimezoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_LocateTimezone",
		Method:             "GET",
		PathPattern:        "/contacts/{contact_id}/timezones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesLocateTimezoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesLocateTimezoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_LocateTimezone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesMergeTimezones associates more timezone s with the contact
*/

func (a *Client) TimezonesMergeTimezones(params *TimezonesMergeTimezonesParams, opts ...ClientOption) (*TimezonesMergeTimezonesOK, error) {
	if params == nil {
		params = NewTimezonesMergeTimezonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_MergeTimezones",
		Method:             "POST",
		PathPattern:        "/contacts/{contact_id}/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesMergeTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesMergeTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_MergeTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesResetTimezones resets all timezones of the contact according to the input dataset
*/

func (a *Client) TimezonesResetTimezones(params *TimezonesResetTimezonesParams, opts ...ClientOption) (*TimezonesResetTimezonesOK, error) {
	if params == nil {
		params = NewTimezonesResetTimezonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_ResetTimezones",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesResetTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesResetTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_ResetTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesUpdateTimezone updates the contact s timezone details
*/

func (a *Client) TimezonesUpdateTimezone(params *TimezonesUpdateTimezoneParams, opts ...ClientOption) (*TimezonesUpdateTimezoneOK, error) {
	if params == nil {
		params = NewTimezonesUpdateTimezoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_UpdateTimezone",
		Method:             "PUT",
		PathPattern:        "/contacts/{contact_id}/timezones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesUpdateTimezoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesUpdateTimezoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_UpdateTimezone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TimezonesUpdateTimezone2 updates the contact s timezone details
*/

func (a *Client) TimezonesUpdateTimezone2(params *TimezonesUpdateTimezone2Params, opts ...ClientOption) (*TimezonesUpdateTimezone2OK, error) {
	if params == nil {
		params = NewTimezonesUpdateTimezone2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Timezones_UpdateTimezone2",
		Method:             "PATCH",
		PathPattern:        "/contacts/{contact_id}/timezones/{etag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimezonesUpdateTimezone2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimezonesUpdateTimezone2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timezones_UpdateTimezone2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
