// Code generated by go-swagger; DO NOT EDIT.

package two_factor_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new two factor authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for two factor authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TwoFactorAuthenticationGenerateUserTfaKey(userID string, opts ...ClientOption) (*TwoFactorAuthenticationGenerateUserTfaKeyOK, error)
	TwoFactorAuthenticationGenerateUserTfaKeyWithParams(params *TwoFactorAuthenticationGenerateUserTfaKeyParams, opts ...ClientOption) (*TwoFactorAuthenticationGenerateUserTfaKeyOK, error)

	TwoFactorAuthenticationGetUserTfaKey(userID string, opts ...ClientOption) (*TwoFactorAuthenticationGetUserTfaKeyOK, error)
	TwoFactorAuthenticationGetUserTfaKeyWithParams(params *TwoFactorAuthenticationGetUserTfaKeyParams, opts ...ClientOption) (*TwoFactorAuthenticationGetUserTfaKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TwoFactorAuthenticationGenerateUserTfaKey generates user tfa key generates new or regenerates secret for the concrete user
*/
func (a *Client) TwoFactorAuthenticationGenerateUserTfaKey(userID string, opts ...ClientOption) (*TwoFactorAuthenticationGenerateUserTfaKeyOK, error) {
	params := NewTwoFactorAuthenticationGenerateUserTfaKeyParams().WithUserID(userID)
	return a.TwoFactorAuthenticationGenerateUserTfaKeyWithParams(params, opts...)
}

func (a *Client) TwoFactorAuthenticationGenerateUserTfaKeyWithParams(params *TwoFactorAuthenticationGenerateUserTfaKeyParams, opts ...ClientOption) (*TwoFactorAuthenticationGenerateUserTfaKeyOK, error) {
	if params == nil {
		params = NewTwoFactorAuthenticationGenerateUserTfaKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TwoFactorAuthentication_GenerateUserTfaKey",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/2fa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TwoFactorAuthenticationGenerateUserTfaKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TwoFactorAuthenticationGenerateUserTfaKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TwoFactorAuthentication_GenerateUserTfaKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TwoFactorAuthenticationGetUserTfaKey gets user tfa key locates the secret for user and returns it as a t o t p url
*/
func (a *Client) TwoFactorAuthenticationGetUserTfaKey(userID string, opts ...ClientOption) (*TwoFactorAuthenticationGetUserTfaKeyOK, error) {
	params := NewTwoFactorAuthenticationGetUserTfaKeyParams().WithUserID(userID)
	return a.TwoFactorAuthenticationGetUserTfaKeyWithParams(params, opts...)
}

func (a *Client) TwoFactorAuthenticationGetUserTfaKeyWithParams(params *TwoFactorAuthenticationGetUserTfaKeyParams, opts ...ClientOption) (*TwoFactorAuthenticationGetUserTfaKeyOK, error) {
	if params == nil {
		params = NewTwoFactorAuthenticationGetUserTfaKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TwoFactorAuthentication_GetUserTfaKey",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/2fa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TwoFactorAuthenticationGetUserTfaKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TwoFactorAuthenticationGetUserTfaKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TwoFactorAuthentication_GetUserTfaKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
