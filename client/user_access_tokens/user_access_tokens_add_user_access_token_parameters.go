// Code generated by go-swagger; DO NOT EDIT.

package user_access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// NewUserAccessTokensAddUserAccessTokenParams creates a new UserAccessTokensAddUserAccessTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUserAccessTokensAddUserAccessTokenParams() *UserAccessTokensAddUserAccessTokenParams {
	return &UserAccessTokensAddUserAccessTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUserAccessTokensAddUserAccessTokenParamsWithTimeout creates a new UserAccessTokensAddUserAccessTokenParams object
// with the ability to set a timeout on a request.
func NewUserAccessTokensAddUserAccessTokenParamsWithTimeout(timeout time.Duration) *UserAccessTokensAddUserAccessTokenParams {
	return &UserAccessTokensAddUserAccessTokenParams{
		timeout: timeout,
	}
}

// NewUserAccessTokensAddUserAccessTokenParamsWithContext creates a new UserAccessTokensAddUserAccessTokenParams object
// with the ability to set a context for a request.
func NewUserAccessTokensAddUserAccessTokenParamsWithContext(ctx context.Context) *UserAccessTokensAddUserAccessTokenParams {
	return &UserAccessTokensAddUserAccessTokenParams{
		Context: ctx,
	}
}

// NewUserAccessTokensAddUserAccessTokenParamsWithHTTPClient creates a new UserAccessTokensAddUserAccessTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewUserAccessTokensAddUserAccessTokenParamsWithHTTPClient(client *http.Client) *UserAccessTokensAddUserAccessTokenParams {
	return &UserAccessTokensAddUserAccessTokenParams{
		HTTPClient: client,
	}
}

/*
UserAccessTokensAddUserAccessTokenParams contains all the parameters to send to the API endpoint

	for the user access tokens add user access token operation.

	Typically these are written to a http.Request.
*/
type UserAccessTokensAddUserAccessTokenParams struct {

	/* Enable.

	    ObjectId user = 1; // [required]
	string usage = 2;  // [optional] usage description
	bool enable = 3;
	*/
	Enable *bool

	/* Token.

	     processing
	------------
	token.user.id // [required] authorization
	token.usage   // [optional] short description
	*/
	Token *models.UserAccessTokensAddUserAccessTokenParamsBody

	/* TokenUserID.

	   identifier

	   Format: int64
	*/
	TokenUserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the user access tokens add user access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserAccessTokensAddUserAccessTokenParams) WithDefaults() *UserAccessTokensAddUserAccessTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the user access tokens add user access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserAccessTokensAddUserAccessTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithTimeout(timeout time.Duration) *UserAccessTokensAddUserAccessTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithContext(ctx context.Context) *UserAccessTokensAddUserAccessTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithHTTPClient(client *http.Client) *UserAccessTokensAddUserAccessTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithEnable(enable *bool) *UserAccessTokensAddUserAccessTokenParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetEnable(enable *bool) {
	o.Enable = enable
}

// WithToken adds the token to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithToken(token *models.UserAccessTokensAddUserAccessTokenParamsBody) *UserAccessTokensAddUserAccessTokenParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetToken(token *models.UserAccessTokensAddUserAccessTokenParamsBody) {
	o.Token = token
}

// WithTokenUserID adds the tokenUserID to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) WithTokenUserID(tokenUserID string) *UserAccessTokensAddUserAccessTokenParams {
	o.SetTokenUserID(tokenUserID)
	return o
}

// SetTokenUserID adds the tokenUserId to the user access tokens add user access token params
func (o *UserAccessTokensAddUserAccessTokenParams) SetTokenUserID(tokenUserID string) {
	o.TokenUserID = tokenUserID
}

// WriteToRequest writes these params to a swagger request
func (o *UserAccessTokensAddUserAccessTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enable != nil {

		// query param enable
		var qrEnable bool

		if o.Enable != nil {
			qrEnable = *o.Enable
		}
		qEnable := swag.FormatBool(qrEnable)
		if qEnable != "" {

			if err := r.SetQueryParam("enable", qEnable); err != nil {
				return err
			}
		}
	}
	if o.Token != nil {
		if err := r.SetBodyParam(o.Token); err != nil {
			return err
		}
	}

	// path param token.user.id
	if err := r.SetPathParam("token.user.id", o.TokenUserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
