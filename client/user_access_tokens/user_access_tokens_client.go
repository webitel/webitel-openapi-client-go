// Code generated by go-swagger; DO NOT EDIT.

package user_access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user access tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user access tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UserAccessTokensAddUserAccessToken(params *UserAccessTokensAddUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensAddUserAccessTokenOK, error)

	UserAccessTokensDeleteUserAccessToken(params *UserAccessTokensDeleteUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensDeleteUserAccessTokenOK, error)

	UserAccessTokensGetUserAccessToken(params *UserAccessTokensGetUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensGetUserAccessTokenOK, error)

	UserAccessTokensListUserAccessToken(params *UserAccessTokensListUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensListUserAccessTokenOK, error)

	UserAccessTokensUpdateUserAccessToken(params *UserAccessTokensUpdateUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensUpdateUserAccessTokenOK, error)

	UserAccessTokensUpdateUserAccessToken2(params *UserAccessTokensUpdateUserAccessToken2Params, opts ...ClientOption) (*UserAccessTokensUpdateUserAccessToken2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UserAccessTokensAddUserAccessToken user access tokens add user access token API
*/

func (a *Client) UserAccessTokensAddUserAccessToken(params *UserAccessTokensAddUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensAddUserAccessTokenOK, error) {
	if params == nil {
		params = NewUserAccessTokensAddUserAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_AddUserAccessToken",
		Method:             "POST",
		PathPattern:        "/users/{token.user.id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensAddUserAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensAddUserAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_AddUserAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserAccessTokensDeleteUserAccessToken user access tokens delete user access token API
*/

func (a *Client) UserAccessTokensDeleteUserAccessToken(params *UserAccessTokensDeleteUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensDeleteUserAccessTokenOK, error) {
	if params == nil {
		params = NewUserAccessTokensDeleteUserAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_DeleteUserAccessToken",
		Method:             "DELETE",
		PathPattern:        "/users/{user.id}/tokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensDeleteUserAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensDeleteUserAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_DeleteUserAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserAccessTokensGetUserAccessToken user access tokens get user access token API
*/

func (a *Client) UserAccessTokensGetUserAccessToken(params *UserAccessTokensGetUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensGetUserAccessTokenOK, error) {
	if params == nil {
		params = NewUserAccessTokensGetUserAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_GetUserAccessToken",
		Method:             "GET",
		PathPattern:        "/users/{user.id}/tokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensGetUserAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensGetUserAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_GetUserAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserAccessTokensListUserAccessToken user access tokens list user access token API
*/

func (a *Client) UserAccessTokensListUserAccessToken(params *UserAccessTokensListUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensListUserAccessTokenOK, error) {
	if params == nil {
		params = NewUserAccessTokensListUserAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_ListUserAccessToken",
		Method:             "GET",
		PathPattern:        "/users/{user.id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensListUserAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensListUserAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_ListUserAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserAccessTokensUpdateUserAccessToken user access tokens update user access token API
*/

func (a *Client) UserAccessTokensUpdateUserAccessToken(params *UserAccessTokensUpdateUserAccessTokenParams, opts ...ClientOption) (*UserAccessTokensUpdateUserAccessTokenOK, error) {
	if params == nil {
		params = NewUserAccessTokensUpdateUserAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_UpdateUserAccessToken",
		Method:             "PUT",
		PathPattern:        "/users/{update.user.id}/tokens/{update.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensUpdateUserAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensUpdateUserAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_UpdateUserAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserAccessTokensUpdateUserAccessToken2 user access tokens update user access token2 API
*/

func (a *Client) UserAccessTokensUpdateUserAccessToken2(params *UserAccessTokensUpdateUserAccessToken2Params, opts ...ClientOption) (*UserAccessTokensUpdateUserAccessToken2OK, error) {
	if params == nil {
		params = NewUserAccessTokensUpdateUserAccessToken2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserAccessTokens_UpdateUserAccessToken2",
		Method:             "PATCH",
		PathPattern:        "/users/{update.user.id}/tokens/{update.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessTokensUpdateUserAccessToken2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserAccessTokensUpdateUserAccessToken2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserAccessTokens_UpdateUserAccessToken2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
