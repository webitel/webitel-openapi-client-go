// Code generated by go-swagger; DO NOT EDIT.

package user_access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// NewUserAccessTokensUpdateUserAccessTokenParams creates a new UserAccessTokensUpdateUserAccessTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUserAccessTokensUpdateUserAccessTokenParams() *UserAccessTokensUpdateUserAccessTokenParams {
	return &UserAccessTokensUpdateUserAccessTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUserAccessTokensUpdateUserAccessTokenParamsWithTimeout creates a new UserAccessTokensUpdateUserAccessTokenParams object
// with the ability to set a timeout on a request.
func NewUserAccessTokensUpdateUserAccessTokenParamsWithTimeout(timeout time.Duration) *UserAccessTokensUpdateUserAccessTokenParams {
	return &UserAccessTokensUpdateUserAccessTokenParams{
		timeout: timeout,
	}
}

// NewUserAccessTokensUpdateUserAccessTokenParamsWithContext creates a new UserAccessTokensUpdateUserAccessTokenParams object
// with the ability to set a context for a request.
func NewUserAccessTokensUpdateUserAccessTokenParamsWithContext(ctx context.Context) *UserAccessTokensUpdateUserAccessTokenParams {
	return &UserAccessTokensUpdateUserAccessTokenParams{
		Context: ctx,
	}
}

// NewUserAccessTokensUpdateUserAccessTokenParamsWithHTTPClient creates a new UserAccessTokensUpdateUserAccessTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewUserAccessTokensUpdateUserAccessTokenParamsWithHTTPClient(client *http.Client) *UserAccessTokensUpdateUserAccessTokenParams {
	return &UserAccessTokensUpdateUserAccessTokenParams{
		HTTPClient: client,
	}
}

/*
UserAccessTokensUpdateUserAccessTokenParams contains all the parameters to send to the API endpoint

	for the user access tokens update user access token operation.

	Typically these are written to a http.Request.
*/
type UserAccessTokensUpdateUserAccessTokenParams struct {

	// Enable.
	Enable *bool

	/* Fields.

	   [optional] PATCH implementation
	*/
	Fields []string

	/* Update.

	   [required] identification + modifications(about)
	*/
	Update *models.UserAccessTokensUpdateUserAccessTokenParamsBody

	/* UpdateID.

	   tokenKey::token_key
	*/
	UpdateID string

	/* UpdateUserID.

	   identifier

	   Format: int64
	*/
	UpdateUserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the user access tokens update user access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithDefaults() *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the user access tokens update user access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithTimeout(timeout time.Duration) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithContext(ctx context.Context) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithHTTPClient(client *http.Client) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithEnable(enable *bool) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetEnable(enable *bool) {
	o.Enable = enable
}

// WithFields adds the fields to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithFields(fields []string) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithUpdate adds the update to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithUpdate(update *models.UserAccessTokensUpdateUserAccessTokenParamsBody) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetUpdate(update)
	return o
}

// SetUpdate adds the update to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetUpdate(update *models.UserAccessTokensUpdateUserAccessTokenParamsBody) {
	o.Update = update
}

// WithUpdateID adds the updateID to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithUpdateID(updateID string) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetUpdateID(updateID)
	return o
}

// SetUpdateID adds the updateId to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetUpdateID(updateID string) {
	o.UpdateID = updateID
}

// WithUpdateUserID adds the updateUserID to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) WithUpdateUserID(updateUserID string) *UserAccessTokensUpdateUserAccessTokenParams {
	o.SetUpdateUserID(updateUserID)
	return o
}

// SetUpdateUserID adds the updateUserId to the user access tokens update user access token params
func (o *UserAccessTokensUpdateUserAccessTokenParams) SetUpdateUserID(updateUserID string) {
	o.UpdateUserID = updateUserID
}

// WriteToRequest writes these params to a swagger request
func (o *UserAccessTokensUpdateUserAccessTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enable != nil {

		// query param enable
		var qrEnable bool

		if o.Enable != nil {
			qrEnable = *o.Enable
		}
		qEnable := swag.FormatBool(qrEnable)
		if qEnable != "" {

			if err := r.SetQueryParam("enable", qEnable); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}
	if o.Update != nil {
		if err := r.SetBodyParam(o.Update); err != nil {
			return err
		}
	}

	// path param update.id
	if err := r.SetPathParam("update.id", o.UpdateID); err != nil {
		return err
	}

	// path param update.user.id
	if err := r.SetPathParam("update.user.id", o.UpdateUserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUserAccessTokensUpdateUserAccessToken binds the parameter fields
func (o *UserAccessTokensUpdateUserAccessTokenParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
