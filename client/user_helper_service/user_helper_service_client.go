// Code generated by go-swagger; DO NOT EDIT.

package user_helper_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user helper service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user helper service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivityWorkspaceWidget(params *ActivityWorkspaceWidgetParams, opts ...ClientOption) (*ActivityWorkspaceWidgetOK, error)

	DefaultDeviceConfig(typeVar string, opts ...ClientOption) (*DefaultDeviceConfigOK, error)
	DefaultDeviceConfigWithParams(params *DefaultDeviceConfigParams, opts ...ClientOption) (*DefaultDeviceConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivityWorkspaceWidget activity workspace widget API
*/

func (a *Client) ActivityWorkspaceWidget(params *ActivityWorkspaceWidgetParams, opts ...ClientOption) (*ActivityWorkspaceWidgetOK, error) {
	if params == nil {
		params = NewActivityWorkspaceWidgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivityWorkspaceWidget",
		Method:             "GET",
		PathPattern:        "/user/widget/activity/today",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityWorkspaceWidgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityWorkspaceWidgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivityWorkspaceWidgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DefaultDeviceConfig default device config API
*/
func (a *Client) DefaultDeviceConfig(typeVar string, opts ...ClientOption) (*DefaultDeviceConfigOK, error) {
	params := NewDefaultDeviceConfigParams().WithType(typeVar)
	return a.DefaultDeviceConfigWithParams(params, opts...)
}

func (a *Client) DefaultDeviceConfigWithParams(params *DefaultDeviceConfigParams, opts ...ClientOption) (*DefaultDeviceConfigOK, error) {
	if params == nil {
		params = NewDefaultDeviceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefaultDeviceConfig",
		Method:             "GET",
		PathPattern:        "/user/device/config/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefaultDeviceConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefaultDeviceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefaultDeviceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
