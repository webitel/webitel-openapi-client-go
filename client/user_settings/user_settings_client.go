// Code generated by go-swagger; DO NOT EDIT.

package user_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UserSettingsGetUserSettings(key string, opts ...ClientOption) (*UserSettingsGetUserSettingsOK, error)
	UserSettingsGetUserSettingsWithParams(params *UserSettingsGetUserSettingsParams, opts ...ClientOption) (*UserSettingsGetUserSettingsOK, error)

	UserSettingsSetUserSettings(value interface{}, key string, opts ...ClientOption) (*UserSettingsSetUserSettingsOK, error)
	UserSettingsSetUserSettingsWithParams(params *UserSettingsSetUserSettingsParams, opts ...ClientOption) (*UserSettingsSetUserSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UserSettingsGetUserSettings gs e t user settings key
*/
func (a *Client) UserSettingsGetUserSettings(key string, opts ...ClientOption) (*UserSettingsGetUserSettingsOK, error) {
	params := NewUserSettingsGetUserSettingsParams().WithKey(key)
	return a.UserSettingsGetUserSettingsWithParams(params, opts...)
}

func (a *Client) UserSettingsGetUserSettingsWithParams(params *UserSettingsGetUserSettingsParams, opts ...ClientOption) (*UserSettingsGetUserSettingsOK, error) {
	if params == nil {
		params = NewUserSettingsGetUserSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserSettings_GetUserSettings",
		Method:             "GET",
		PathPattern:        "/user/settings/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSettingsGetUserSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserSettingsGetUserSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserSettings_GetUserSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserSettingsSetUserSettings creates or update

PUT /user/settings/{key=*}
Content-Type: application/json; charset=utf-8

${value=.body}
*/
func (a *Client) UserSettingsSetUserSettings(value interface{}, key string, opts ...ClientOption) (*UserSettingsSetUserSettingsOK, error) {
	params := NewUserSettingsSetUserSettingsParams().WithKey(key).WithValue(value)
	return a.UserSettingsSetUserSettingsWithParams(params, opts...)
}

func (a *Client) UserSettingsSetUserSettingsWithParams(params *UserSettingsSetUserSettingsParams, opts ...ClientOption) (*UserSettingsSetUserSettingsOK, error) {
	if params == nil {
		params = NewUserSettingsSetUserSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserSettings_SetUserSettings",
		Method:             "PUT",
		PathPattern:        "/user/settings/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSettingsSetUserSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserSettingsSetUserSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserSettings_SetUserSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
