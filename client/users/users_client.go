// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UsersCreateUser(body *models.APICreateUserRequest, opts ...ClientOption) (*UsersCreateUserOK, error)
	UsersCreateUserWithParams(params *UsersCreateUserParams, opts ...ClientOption) (*UsersCreateUserOK, error)

	UsersDeleteUsers(params *UsersDeleteUsersParams, opts ...ClientOption) (*UsersDeleteUsersOK, error)

	UsersDeleteUsers2(params *UsersDeleteUsers2Params, opts ...ClientOption) (*UsersDeleteUsers2OK, error)

	UsersLogoutUser(id string, body models.APIUsersLogoutUserBody, opts ...ClientOption) (*UsersLogoutUserOK, error)
	UsersLogoutUserWithParams(params *UsersLogoutUserParams, opts ...ClientOption) (*UsersLogoutUserOK, error)

	UsersReadUser(params *UsersReadUserParams, opts ...ClientOption) (*UsersReadUserOK, error)

	UsersReadUser2(params *UsersReadUser2Params, opts ...ClientOption) (*UsersReadUser2OK, error)

	UsersSearchUsers(params *UsersSearchUsersParams, opts ...ClientOption) (*UsersSearchUsersOK, error)

	UsersSearchUsers2(body *models.APISearchUsersRequest, opts ...ClientOption) (*UsersSearchUsers2OK, error)
	UsersSearchUsers2WithParams(params *UsersSearchUsers2Params, opts ...ClientOption) (*UsersSearchUsers2OK, error)

	UsersUpdateUser(userID string, body *models.APIUsersUpdateUserBody, opts ...ClientOption) (*UsersUpdateUserOK, error)
	UsersUpdateUserWithParams(params *UsersUpdateUserParams, opts ...ClientOption) (*UsersUpdateUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UsersCreateUser users create user API
*/
func (a *Client) UsersCreateUser(body *models.APICreateUserRequest, opts ...ClientOption) (*UsersCreateUserOK, error) {
	params := NewUsersCreateUserParams().WithBody(body)
	return a.UsersCreateUserWithParams(params, opts...)
}

func (a *Client) UsersCreateUserWithParams(params *UsersCreateUserParams, opts ...ClientOption) (*UsersCreateUserOK, error) {
	if params == nil {
		params = NewUsersCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_CreateUser",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_CreateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDeleteUsers users delete users API
*/

func (a *Client) UsersDeleteUsers(params *UsersDeleteUsersParams, opts ...ClientOption) (*UsersDeleteUsersOK, error) {
	if params == nil {
		params = NewUsersDeleteUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_DeleteUsers",
		Method:             "DELETE",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersDeleteUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersDeleteUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_DeleteUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDeleteUsers2 users delete users2 API
*/

func (a *Client) UsersDeleteUsers2(params *UsersDeleteUsers2Params, opts ...ClientOption) (*UsersDeleteUsers2OK, error) {
	if params == nil {
		params = NewUsersDeleteUsers2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_DeleteUsers2",
		Method:             "DELETE",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersDeleteUsers2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersDeleteUsers2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_DeleteUsers2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersLogoutUser users logout user API
*/
func (a *Client) UsersLogoutUser(id string, body models.APIUsersLogoutUserBody, opts ...ClientOption) (*UsersLogoutUserOK, error) {
	params := NewUsersLogoutUserParams().WithBody(body).WithID(id)
	return a.UsersLogoutUserWithParams(params, opts...)
}

func (a *Client) UsersLogoutUserWithParams(params *UsersLogoutUserParams, opts ...ClientOption) (*UsersLogoutUserOK, error) {
	if params == nil {
		params = NewUsersLogoutUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_LogoutUser",
		Method:             "POST",
		PathPattern:        "/users/{id}/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersLogoutUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersLogoutUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_LogoutUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersReadUser users read user API
*/

func (a *Client) UsersReadUser(params *UsersReadUserParams, opts ...ClientOption) (*UsersReadUserOK, error) {
	if params == nil {
		params = NewUsersReadUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ReadUser",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersReadUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersReadUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ReadUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersReadUser2 users read user2 API
*/

func (a *Client) UsersReadUser2(params *UsersReadUser2Params, opts ...ClientOption) (*UsersReadUser2OK, error) {
	if params == nil {
		params = NewUsersReadUser2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ReadUser2",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersReadUser2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersReadUser2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ReadUser2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersSearchUsers users search users API
*/

func (a *Client) UsersSearchUsers(params *UsersSearchUsersParams, opts ...ClientOption) (*UsersSearchUsersOK, error) {
	if params == nil {
		params = NewUsersSearchUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_SearchUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersSearchUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersSearchUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_SearchUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersSearchUsers2 users search users2 API
*/
func (a *Client) UsersSearchUsers2(body *models.APISearchUsersRequest, opts ...ClientOption) (*UsersSearchUsers2OK, error) {
	params := NewUsersSearchUsers2Params().WithBody(body)
	return a.UsersSearchUsers2WithParams(params, opts...)
}

func (a *Client) UsersSearchUsers2WithParams(params *UsersSearchUsers2Params, opts ...ClientOption) (*UsersSearchUsers2OK, error) {
	if params == nil {
		params = NewUsersSearchUsers2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_SearchUsers2",
		Method:             "POST",
		PathPattern:        "/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersSearchUsers2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersSearchUsers2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_SearchUsers2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersUpdateUser users update user API
*/
func (a *Client) UsersUpdateUser(userID string, body *models.APIUsersUpdateUserBody, opts ...ClientOption) (*UsersUpdateUserOK, error) {
	params := NewUsersUpdateUserParams().WithBody(body).WithUserID(userID)
	return a.UsersUpdateUserWithParams(params, opts...)
}

func (a *Client) UsersUpdateUserWithParams(params *UsersUpdateUserParams, opts ...ClientOption) (*UsersUpdateUserOK, error) {
	if params == nil {
		params = NewUsersUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/users/{user.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersUpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
