// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersDeleteUsersParams creates a new UsersDeleteUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersDeleteUsersParams() *UsersDeleteUsersParams {
	return &UsersDeleteUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersDeleteUsersParamsWithTimeout creates a new UsersDeleteUsersParams object
// with the ability to set a timeout on a request.
func NewUsersDeleteUsersParamsWithTimeout(timeout time.Duration) *UsersDeleteUsersParams {
	return &UsersDeleteUsersParams{
		timeout: timeout,
	}
}

// NewUsersDeleteUsersParamsWithContext creates a new UsersDeleteUsersParams object
// with the ability to set a context for a request.
func NewUsersDeleteUsersParamsWithContext(ctx context.Context) *UsersDeleteUsersParams {
	return &UsersDeleteUsersParams{
		Context: ctx,
	}
}

// NewUsersDeleteUsersParamsWithHTTPClient creates a new UsersDeleteUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsersDeleteUsersParamsWithHTTPClient(client *http.Client) *UsersDeleteUsersParams {
	return &UsersDeleteUsersParams{
		HTTPClient: client,
	}
}

/*
UsersDeleteUsersParams contains all the parameters to send to the API endpoint

	for the users delete users operation.

	Typically these are written to a http.Request.
*/
type UsersDeleteUsersParams struct {

	/* ID.

	   ONE /users/{id}

	   Format: int64
	*/
	ID string

	// Permanent.
	Permanent *bool

	/* Selection.

	   MANY /users .ids=[id,...]
	*/
	Selection []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users delete users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersDeleteUsersParams) WithDefaults() *UsersDeleteUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users delete users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersDeleteUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users delete users params
func (o *UsersDeleteUsersParams) WithTimeout(timeout time.Duration) *UsersDeleteUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users delete users params
func (o *UsersDeleteUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users delete users params
func (o *UsersDeleteUsersParams) WithContext(ctx context.Context) *UsersDeleteUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users delete users params
func (o *UsersDeleteUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users delete users params
func (o *UsersDeleteUsersParams) WithHTTPClient(client *http.Client) *UsersDeleteUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users delete users params
func (o *UsersDeleteUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the users delete users params
func (o *UsersDeleteUsersParams) WithID(id string) *UsersDeleteUsersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the users delete users params
func (o *UsersDeleteUsersParams) SetID(id string) {
	o.ID = id
}

// WithPermanent adds the permanent to the users delete users params
func (o *UsersDeleteUsersParams) WithPermanent(permanent *bool) *UsersDeleteUsersParams {
	o.SetPermanent(permanent)
	return o
}

// SetPermanent adds the permanent to the users delete users params
func (o *UsersDeleteUsersParams) SetPermanent(permanent *bool) {
	o.Permanent = permanent
}

// WithSelection adds the selection to the users delete users params
func (o *UsersDeleteUsersParams) WithSelection(selection []string) *UsersDeleteUsersParams {
	o.SetSelection(selection)
	return o
}

// SetSelection adds the selection to the users delete users params
func (o *UsersDeleteUsersParams) SetSelection(selection []string) {
	o.Selection = selection
}

// WriteToRequest writes these params to a swagger request
func (o *UsersDeleteUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Permanent != nil {

		// query param permanent
		var qrPermanent bool

		if o.Permanent != nil {
			qrPermanent = *o.Permanent
		}
		qPermanent := swag.FormatBool(qrPermanent)
		if qPermanent != "" {

			if err := r.SetQueryParam("permanent", qPermanent); err != nil {
				return err
			}
		}
	}

	if o.Selection != nil {

		// binding items for selection
		joinedSelection := o.bindParamSelection(reg)

		// query array param selection
		if err := r.SetQueryParam("selection", joinedSelection...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUsersDeleteUsers binds the parameter selection
func (o *UsersDeleteUsersParams) bindParamSelection(formats strfmt.Registry) []string {
	selectionIR := o.Selection

	var selectionIC []string
	for _, selectionIIR := range selectionIR { // explode []string

		selectionIIV := selectionIIR // string as string
		selectionIC = append(selectionIC, selectionIIV)
	}

	// items.CollectionFormat: "multi"
	selectionIS := swag.JoinByFormat(selectionIC, "multi")

	return selectionIS
}
