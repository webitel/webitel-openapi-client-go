// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersReadUser2Params creates a new UsersReadUser2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersReadUser2Params() *UsersReadUser2Params {
	return &UsersReadUser2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersReadUser2ParamsWithTimeout creates a new UsersReadUser2Params object
// with the ability to set a timeout on a request.
func NewUsersReadUser2ParamsWithTimeout(timeout time.Duration) *UsersReadUser2Params {
	return &UsersReadUser2Params{
		timeout: timeout,
	}
}

// NewUsersReadUser2ParamsWithContext creates a new UsersReadUser2Params object
// with the ability to set a context for a request.
func NewUsersReadUser2ParamsWithContext(ctx context.Context) *UsersReadUser2Params {
	return &UsersReadUser2Params{
		Context: ctx,
	}
}

// NewUsersReadUser2ParamsWithHTTPClient creates a new UsersReadUser2Params object
// with the ability to set a custom HTTPClient for a request.
func NewUsersReadUser2ParamsWithHTTPClient(client *http.Client) *UsersReadUser2Params {
	return &UsersReadUser2Params{
		HTTPClient: client,
	}
}

/*
UsersReadUser2Params contains all the parameters to send to the API endpoint

	for the users read user2 operation.

	Typically these are written to a http.Request.
*/
type UsersReadUser2Params struct {

	/* Fields.

	   partial output
	*/
	Fields []string

	// ID.
	//
	// Format: int64
	ID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users read user2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersReadUser2Params) WithDefaults() *UsersReadUser2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users read user2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersReadUser2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users read user2 params
func (o *UsersReadUser2Params) WithTimeout(timeout time.Duration) *UsersReadUser2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users read user2 params
func (o *UsersReadUser2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users read user2 params
func (o *UsersReadUser2Params) WithContext(ctx context.Context) *UsersReadUser2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users read user2 params
func (o *UsersReadUser2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users read user2 params
func (o *UsersReadUser2Params) WithHTTPClient(client *http.Client) *UsersReadUser2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users read user2 params
func (o *UsersReadUser2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the users read user2 params
func (o *UsersReadUser2Params) WithFields(fields []string) *UsersReadUser2Params {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the users read user2 params
func (o *UsersReadUser2Params) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the users read user2 params
func (o *UsersReadUser2Params) WithID(id *string) *UsersReadUser2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the users read user2 params
func (o *UsersReadUser2Params) SetID(id *string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UsersReadUser2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUsersReadUser2 binds the parameter fields
func (o *UsersReadUser2Params) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
