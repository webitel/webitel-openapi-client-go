// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersSearchUsersParams creates a new UsersSearchUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersSearchUsersParams() *UsersSearchUsersParams {
	return &UsersSearchUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersSearchUsersParamsWithTimeout creates a new UsersSearchUsersParams object
// with the ability to set a timeout on a request.
func NewUsersSearchUsersParamsWithTimeout(timeout time.Duration) *UsersSearchUsersParams {
	return &UsersSearchUsersParams{
		timeout: timeout,
	}
}

// NewUsersSearchUsersParamsWithContext creates a new UsersSearchUsersParams object
// with the ability to set a context for a request.
func NewUsersSearchUsersParamsWithContext(ctx context.Context) *UsersSearchUsersParams {
	return &UsersSearchUsersParams{
		Context: ctx,
	}
}

// NewUsersSearchUsersParamsWithHTTPClient creates a new UsersSearchUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsersSearchUsersParamsWithHTTPClient(client *http.Client) *UsersSearchUsersParams {
	return &UsersSearchUsersParams{
		HTTPClient: client,
	}
}

/*
UsersSearchUsersParams contains all the parameters to send to the API endpoint

	for the users search users operation.

	Typically these are written to a http.Request.
*/
type UsersSearchUsersParams struct {

	/* Any.

	     ----- View Modes -----------------------------
	NOTE: by default, search NOT 'deleted' objects ONLY

	filter: include 'deleted' ALSO ! (inactive)
	*/
	Any *bool

	/* Deleted.

	   filter: .deleted_at NOTNULL (view: RECYCLE)
	*/
	Deleted *bool

	/* Extension.

	   filter: .extension LIKE '{extension}'
	*/
	Extension *string

	/* Fields.

	     // navigation filter
	repeated int64 roles = 7;
	----- Search Options -------------------------

	select: output (fields,...)
	*/
	Fields []string

	/* ID.

	     ----- Base Filters ---------------------------

	filter: .id = any({id}...)
	*/
	ID []string

	/* Name.

	   filter: .name ILIKE '{name}'
	*/
	Name *string

	/* NotID.

	   filter: .id <> all({not_ids}...)
	*/
	NotID []string

	/* Page.

	   select: offset {page}

	   Format: int32
	*/
	Page *int32

	// PresenceNote.
	PresenceNote *string

	// PresenceStatus.
	PresenceStatus *string

	/* Q.

	     ----- User-specific Filters ------------------

	filter: (.name|.username|.extension|.status) ILIKE '{q}'
	*/
	Q *string

	/* Size.

	   select: limit {size}

	   Format: int32
	*/
	Size *int32

	/* Sort.

	   select: order by (fields,...)
	*/
	Sort []string

	/* Status.

	   filter: .status ILIKE '{status}'
	*/
	Status *string

	/* Username.

	   filter: .username ILIKE '{username}'
	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users search users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersSearchUsersParams) WithDefaults() *UsersSearchUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users search users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersSearchUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users search users params
func (o *UsersSearchUsersParams) WithTimeout(timeout time.Duration) *UsersSearchUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users search users params
func (o *UsersSearchUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users search users params
func (o *UsersSearchUsersParams) WithContext(ctx context.Context) *UsersSearchUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users search users params
func (o *UsersSearchUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users search users params
func (o *UsersSearchUsersParams) WithHTTPClient(client *http.Client) *UsersSearchUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users search users params
func (o *UsersSearchUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAny adds the any to the users search users params
func (o *UsersSearchUsersParams) WithAny(any *bool) *UsersSearchUsersParams {
	o.SetAny(any)
	return o
}

// SetAny adds the any to the users search users params
func (o *UsersSearchUsersParams) SetAny(any *bool) {
	o.Any = any
}

// WithDeleted adds the deleted to the users search users params
func (o *UsersSearchUsersParams) WithDeleted(deleted *bool) *UsersSearchUsersParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the users search users params
func (o *UsersSearchUsersParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithExtension adds the extension to the users search users params
func (o *UsersSearchUsersParams) WithExtension(extension *string) *UsersSearchUsersParams {
	o.SetExtension(extension)
	return o
}

// SetExtension adds the extension to the users search users params
func (o *UsersSearchUsersParams) SetExtension(extension *string) {
	o.Extension = extension
}

// WithFields adds the fields to the users search users params
func (o *UsersSearchUsersParams) WithFields(fields []string) *UsersSearchUsersParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the users search users params
func (o *UsersSearchUsersParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithID adds the id to the users search users params
func (o *UsersSearchUsersParams) WithID(id []string) *UsersSearchUsersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the users search users params
func (o *UsersSearchUsersParams) SetID(id []string) {
	o.ID = id
}

// WithName adds the name to the users search users params
func (o *UsersSearchUsersParams) WithName(name *string) *UsersSearchUsersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the users search users params
func (o *UsersSearchUsersParams) SetName(name *string) {
	o.Name = name
}

// WithNotID adds the notID to the users search users params
func (o *UsersSearchUsersParams) WithNotID(notID []string) *UsersSearchUsersParams {
	o.SetNotID(notID)
	return o
}

// SetNotID adds the notId to the users search users params
func (o *UsersSearchUsersParams) SetNotID(notID []string) {
	o.NotID = notID
}

// WithPage adds the page to the users search users params
func (o *UsersSearchUsersParams) WithPage(page *int32) *UsersSearchUsersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the users search users params
func (o *UsersSearchUsersParams) SetPage(page *int32) {
	o.Page = page
}

// WithPresenceNote adds the presenceNote to the users search users params
func (o *UsersSearchUsersParams) WithPresenceNote(presenceNote *string) *UsersSearchUsersParams {
	o.SetPresenceNote(presenceNote)
	return o
}

// SetPresenceNote adds the presenceNote to the users search users params
func (o *UsersSearchUsersParams) SetPresenceNote(presenceNote *string) {
	o.PresenceNote = presenceNote
}

// WithPresenceStatus adds the presenceStatus to the users search users params
func (o *UsersSearchUsersParams) WithPresenceStatus(presenceStatus *string) *UsersSearchUsersParams {
	o.SetPresenceStatus(presenceStatus)
	return o
}

// SetPresenceStatus adds the presenceStatus to the users search users params
func (o *UsersSearchUsersParams) SetPresenceStatus(presenceStatus *string) {
	o.PresenceStatus = presenceStatus
}

// WithQ adds the q to the users search users params
func (o *UsersSearchUsersParams) WithQ(q *string) *UsersSearchUsersParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the users search users params
func (o *UsersSearchUsersParams) SetQ(q *string) {
	o.Q = q
}

// WithSize adds the size to the users search users params
func (o *UsersSearchUsersParams) WithSize(size *int32) *UsersSearchUsersParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the users search users params
func (o *UsersSearchUsersParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the users search users params
func (o *UsersSearchUsersParams) WithSort(sort []string) *UsersSearchUsersParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the users search users params
func (o *UsersSearchUsersParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithStatus adds the status to the users search users params
func (o *UsersSearchUsersParams) WithStatus(status *string) *UsersSearchUsersParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the users search users params
func (o *UsersSearchUsersParams) SetStatus(status *string) {
	o.Status = status
}

// WithUsername adds the username to the users search users params
func (o *UsersSearchUsersParams) WithUsername(username *string) *UsersSearchUsersParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the users search users params
func (o *UsersSearchUsersParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *UsersSearchUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Any != nil {

		// query param any
		var qrAny bool

		if o.Any != nil {
			qrAny = *o.Any
		}
		qAny := swag.FormatBool(qrAny)
		if qAny != "" {

			if err := r.SetQueryParam("any", qAny); err != nil {
				return err
			}
		}
	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool

		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {

			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}
	}

	if o.Extension != nil {

		// query param extension
		var qrExtension string

		if o.Extension != nil {
			qrExtension = *o.Extension
		}
		qExtension := qrExtension
		if qExtension != "" {

			if err := r.SetQueryParam("extension", qExtension); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NotID != nil {

		// binding items for not_id
		joinedNotID := o.bindParamNotID(reg)

		// query array param not_id
		if err := r.SetQueryParam("not_id", joinedNotID...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PresenceNote != nil {

		// query param presence.note
		var qrPresenceNote string

		if o.PresenceNote != nil {
			qrPresenceNote = *o.PresenceNote
		}
		qPresenceNote := qrPresenceNote
		if qPresenceNote != "" {

			if err := r.SetQueryParam("presence.note", qPresenceNote); err != nil {
				return err
			}
		}
	}

	if o.PresenceStatus != nil {

		// query param presence.status
		var qrPresenceStatus string

		if o.PresenceStatus != nil {
			qrPresenceStatus = *o.PresenceStatus
		}
		qPresenceStatus := qrPresenceStatus
		if qPresenceStatus != "" {

			if err := r.SetQueryParam("presence.status", qPresenceStatus); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// binding items for sort
		joinedSort := o.bindParamSort(reg)

		// query array param sort
		if err := r.SetQueryParam("sort", joinedSort...); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUsersSearchUsers binds the parameter fields
func (o *UsersSearchUsersParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamUsersSearchUsers binds the parameter id
func (o *UsersSearchUsersParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamUsersSearchUsers binds the parameter not_id
func (o *UsersSearchUsersParams) bindParamNotID(formats strfmt.Registry) []string {
	notIDIR := o.NotID

	var notIDIC []string
	for _, notIDIIR := range notIDIR { // explode []string

		notIDIIV := notIDIIR // string as string
		notIDIC = append(notIDIC, notIDIIV)
	}

	// items.CollectionFormat: "multi"
	notIDIS := swag.JoinByFormat(notIDIC, "multi")

	return notIDIS
}

// bindParamUsersSearchUsers binds the parameter sort
func (o *UsersSearchUsersParams) bindParamSort(formats strfmt.Registry) []string {
	sortIR := o.Sort

	var sortIC []string
	for _, sortIIR := range sortIR { // explode []string

		sortIIV := sortIIR // string as string
		sortIC = append(sortIC, sortIIV)
	}

	// items.CollectionFormat: "multi"
	sortIS := swag.JoinByFormat(sortIC, "multi")

	return sortIS
}
