// Code generated by go-swagger; DO NOT EDIT.

package working_condition_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// New creates a new working condition service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for working condition service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WorkingConditionServiceCreateWorkingCondition(body *models.WfmCreateWorkingConditionRequest, opts ...ClientOption) (*WorkingConditionServiceCreateWorkingConditionOK, error)
	WorkingConditionServiceCreateWorkingConditionWithParams(params *WorkingConditionServiceCreateWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceCreateWorkingConditionOK, error)

	WorkingConditionServiceDeleteWorkingCondition(id string, opts ...ClientOption) (*WorkingConditionServiceDeleteWorkingConditionOK, error)
	WorkingConditionServiceDeleteWorkingConditionWithParams(params *WorkingConditionServiceDeleteWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceDeleteWorkingConditionOK, error)

	WorkingConditionServiceReadWorkingCondition(params *WorkingConditionServiceReadWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceReadWorkingConditionOK, error)

	WorkingConditionServiceSearchWorkingCondition(params *WorkingConditionServiceSearchWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceSearchWorkingConditionOK, error)

	WorkingConditionServiceUpdateWorkingCondition(itemID string, body *models.WorkingConditionServiceUpdateWorkingConditionParamsBody, opts ...ClientOption) (*WorkingConditionServiceUpdateWorkingConditionOK, error)
	WorkingConditionServiceUpdateWorkingConditionWithParams(params *WorkingConditionServiceUpdateWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceUpdateWorkingConditionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WorkingConditionServiceCreateWorkingCondition working condition service create working condition API
*/
func (a *Client) WorkingConditionServiceCreateWorkingCondition(body *models.WfmCreateWorkingConditionRequest, opts ...ClientOption) (*WorkingConditionServiceCreateWorkingConditionOK, error) {
	params := NewWorkingConditionServiceCreateWorkingConditionParams().WithBody(body)
	return a.WorkingConditionServiceCreateWorkingConditionWithParams(params, opts...)
}

func (a *Client) WorkingConditionServiceCreateWorkingConditionWithParams(params *WorkingConditionServiceCreateWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceCreateWorkingConditionOK, error) {
	if params == nil {
		params = NewWorkingConditionServiceCreateWorkingConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkingConditionService_CreateWorkingCondition",
		Method:             "POST",
		PathPattern:        "/wfm/lookups/working_conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkingConditionServiceCreateWorkingConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkingConditionServiceCreateWorkingConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkingConditionServiceCreateWorkingConditionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkingConditionServiceDeleteWorkingCondition working condition service delete working condition API
*/
func (a *Client) WorkingConditionServiceDeleteWorkingCondition(id string, opts ...ClientOption) (*WorkingConditionServiceDeleteWorkingConditionOK, error) {
	params := NewWorkingConditionServiceDeleteWorkingConditionParams().WithID(id)
	return a.WorkingConditionServiceDeleteWorkingConditionWithParams(params, opts...)
}

func (a *Client) WorkingConditionServiceDeleteWorkingConditionWithParams(params *WorkingConditionServiceDeleteWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceDeleteWorkingConditionOK, error) {
	if params == nil {
		params = NewWorkingConditionServiceDeleteWorkingConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkingConditionService_DeleteWorkingCondition",
		Method:             "DELETE",
		PathPattern:        "/wfm/lookups/working_conditions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkingConditionServiceDeleteWorkingConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkingConditionServiceDeleteWorkingConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkingConditionServiceDeleteWorkingConditionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkingConditionServiceReadWorkingCondition working condition service read working condition API
*/

func (a *Client) WorkingConditionServiceReadWorkingCondition(params *WorkingConditionServiceReadWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceReadWorkingConditionOK, error) {
	if params == nil {
		params = NewWorkingConditionServiceReadWorkingConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkingConditionService_ReadWorkingCondition",
		Method:             "GET",
		PathPattern:        "/wfm/lookups/working_conditions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkingConditionServiceReadWorkingConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkingConditionServiceReadWorkingConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkingConditionServiceReadWorkingConditionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkingConditionServiceSearchWorkingCondition working condition service search working condition API
*/

func (a *Client) WorkingConditionServiceSearchWorkingCondition(params *WorkingConditionServiceSearchWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceSearchWorkingConditionOK, error) {
	if params == nil {
		params = NewWorkingConditionServiceSearchWorkingConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkingConditionService_SearchWorkingCondition",
		Method:             "GET",
		PathPattern:        "/wfm/lookups/working_conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkingConditionServiceSearchWorkingConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkingConditionServiceSearchWorkingConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkingConditionServiceSearchWorkingConditionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkingConditionServiceUpdateWorkingCondition working condition service update working condition API
*/
func (a *Client) WorkingConditionServiceUpdateWorkingCondition(itemID string, body *models.WorkingConditionServiceUpdateWorkingConditionParamsBody, opts ...ClientOption) (*WorkingConditionServiceUpdateWorkingConditionOK, error) {
	params := NewWorkingConditionServiceUpdateWorkingConditionParams().WithBody(body).WithItemID(itemID)
	return a.WorkingConditionServiceUpdateWorkingConditionWithParams(params, opts...)
}

func (a *Client) WorkingConditionServiceUpdateWorkingConditionWithParams(params *WorkingConditionServiceUpdateWorkingConditionParams, opts ...ClientOption) (*WorkingConditionServiceUpdateWorkingConditionOK, error) {
	if params == nil {
		params = NewWorkingConditionServiceUpdateWorkingConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkingConditionService_UpdateWorkingCondition",
		Method:             "PUT",
		PathPattern:        "/wfm/lookups/working_conditions/{item.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkingConditionServiceUpdateWorkingConditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkingConditionServiceUpdateWorkingConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkingConditionServiceUpdateWorkingConditionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
