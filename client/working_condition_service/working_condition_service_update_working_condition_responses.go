// Code generated by go-swagger; DO NOT EDIT.

package working_condition_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/webitel/webitel-openapi-client-go/models"
)

// WorkingConditionServiceUpdateWorkingConditionReader is a Reader for the WorkingConditionServiceUpdateWorkingCondition structure.
type WorkingConditionServiceUpdateWorkingConditionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkingConditionServiceUpdateWorkingConditionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkingConditionServiceUpdateWorkingConditionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewWorkingConditionServiceUpdateWorkingConditionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWorkingConditionServiceUpdateWorkingConditionOK creates a WorkingConditionServiceUpdateWorkingConditionOK with default headers values
func NewWorkingConditionServiceUpdateWorkingConditionOK() *WorkingConditionServiceUpdateWorkingConditionOK {
	return &WorkingConditionServiceUpdateWorkingConditionOK{}
}

/*
WorkingConditionServiceUpdateWorkingConditionOK describes a response with status code 200, with default header values.

A successful response.
*/
type WorkingConditionServiceUpdateWorkingConditionOK struct {
	Payload *models.WfmUpdateWorkingConditionResponse
}

// IsSuccess returns true when this working condition service update working condition Ok response has a 2xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this working condition service update working condition Ok response has a 3xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this working condition service update working condition Ok response has a 4xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this working condition service update working condition Ok response has a 5xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this working condition service update working condition Ok response a status code equal to that given
func (o *WorkingConditionServiceUpdateWorkingConditionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the working condition service update working condition Ok response
func (o *WorkingConditionServiceUpdateWorkingConditionOK) Code() int {
	return 200
}

func (o *WorkingConditionServiceUpdateWorkingConditionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /wfm/lookups/working_conditions/{item.id}][%d] workingConditionServiceUpdateWorkingConditionOk %s", 200, payload)
}

func (o *WorkingConditionServiceUpdateWorkingConditionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /wfm/lookups/working_conditions/{item.id}][%d] workingConditionServiceUpdateWorkingConditionOk %s", 200, payload)
}

func (o *WorkingConditionServiceUpdateWorkingConditionOK) GetPayload() *models.WfmUpdateWorkingConditionResponse {
	return o.Payload
}

func (o *WorkingConditionServiceUpdateWorkingConditionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WfmUpdateWorkingConditionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkingConditionServiceUpdateWorkingConditionDefault creates a WorkingConditionServiceUpdateWorkingConditionDefault with default headers values
func NewWorkingConditionServiceUpdateWorkingConditionDefault(code int) *WorkingConditionServiceUpdateWorkingConditionDefault {
	return &WorkingConditionServiceUpdateWorkingConditionDefault{
		_statusCode: code,
	}
}

/*
WorkingConditionServiceUpdateWorkingConditionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type WorkingConditionServiceUpdateWorkingConditionDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this working condition service update working condition default response has a 2xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this working condition service update working condition default response has a 3xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this working condition service update working condition default response has a 4xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this working condition service update working condition default response has a 5xx status code
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this working condition service update working condition default response a status code equal to that given
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the working condition service update working condition default response
func (o *WorkingConditionServiceUpdateWorkingConditionDefault) Code() int {
	return o._statusCode
}

func (o *WorkingConditionServiceUpdateWorkingConditionDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /wfm/lookups/working_conditions/{item.id}][%d] WorkingConditionService_UpdateWorkingCondition default %s", o._statusCode, payload)
}

func (o *WorkingConditionServiceUpdateWorkingConditionDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /wfm/lookups/working_conditions/{item.id}][%d] WorkingConditionService_UpdateWorkingCondition default %s", o._statusCode, payload)
}

func (o *WorkingConditionServiceUpdateWorkingConditionDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *WorkingConditionServiceUpdateWorkingConditionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
