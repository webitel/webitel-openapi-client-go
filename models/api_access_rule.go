// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIAccessRule api access rule
//
// swagger:model api.AccessRule
type APIAccessRule struct {

	// [WHAT]: full: [xrwdxrwd]; privileges: [----xrwd]; grantable: [xrwd----]
	Granted string `json:"granted,omitempty"`

	// [WHOM]: required; NEED to be rechecked !!!
	Grantee *APIRoleID `json:"grantee,omitempty"`

	// ObjectId object = 1;
	//
	// [WHO]: operational; current user NEED to be rechecked !!!
	Grantor *APIRoleID `json:"grantor,omitempty"`
}

// Validate validates this api access rule
func (m *APIAccessRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGrantee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIAccessRule) validateGrantee(formats strfmt.Registry) error {
	if swag.IsZero(m.Grantee) { // not required
		return nil
	}

	if m.Grantee != nil {
		if err := m.Grantee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantee")
			}
			return err
		}
	}

	return nil
}

func (m *APIAccessRule) validateGrantor(formats strfmt.Registry) error {
	if swag.IsZero(m.Grantor) { // not required
		return nil
	}

	if m.Grantor != nil {
		if err := m.Grantor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api access rule based on the context it is used
func (m *APIAccessRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGrantee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrantor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIAccessRule) contextValidateGrantee(ctx context.Context, formats strfmt.Registry) error {

	if m.Grantee != nil {

		if swag.IsZero(m.Grantee) { // not required
			return nil
		}

		if err := m.Grantee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantee")
			}
			return err
		}
	}

	return nil
}

func (m *APIAccessRule) contextValidateGrantor(ctx context.Context, formats strfmt.Registry) error {

	if m.Grantor != nil {

		if swag.IsZero(m.Grantor) { // not required
			return nil
		}

		if err := m.Grantor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIAccessRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIAccessRule) UnmarshalBinary(b []byte) error {
	var res APIAccessRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
