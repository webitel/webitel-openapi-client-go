// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APILDAProcess LDAP synchronization process details
//
// swagger:model api.LDAProcess
type APILDAProcess struct {

	// Optional. If not <zero> indicates that this process is completed.
	CompleteAt string `json:"complete_at,omitempty"`

	// Readonly. Process start timestamp
	ExecuteAt string `json:"execute_at,omitempty"`

	// Optional. Start manually by the user or role
	ExecuteBy *APIRoleID `json:"execute_by,omitempty"`

	// Readonly. Process unique identifier
	ID string `json:"id,omitempty"`

	// Readonly. Executed with options
	Options *APILDAProcessOptions `json:"options,omitempty"`

	// Optional. List of entries been already processed
	Progress []*APILDAPObjentry `json:"progress"`

	// Optional. Status description or an error if any occured
	Status string `json:"status,omitempty"`
}

// Validate validates this api l d a process
func (m *APILDAProcess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecuteBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APILDAProcess) validateExecuteBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecuteBy) { // not required
		return nil
	}

	if m.ExecuteBy != nil {
		if err := m.ExecuteBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_by")
			}
			return err
		}
	}

	return nil
}

func (m *APILDAProcess) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *APILDAProcess) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	for i := 0; i < len(m.Progress); i++ {
		if swag.IsZero(m.Progress[i]) { // not required
			continue
		}

		if m.Progress[i] != nil {
			if err := m.Progress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("progress" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("progress" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api l d a process based on the context it is used
func (m *APILDAProcess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecuteBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APILDAProcess) contextValidateExecuteBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecuteBy != nil {

		if swag.IsZero(m.ExecuteBy) { // not required
			return nil
		}

		if err := m.ExecuteBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_by")
			}
			return err
		}
	}

	return nil
}

func (m *APILDAProcess) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *APILDAProcess) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Progress); i++ {

		if m.Progress[i] != nil {

			if swag.IsZero(m.Progress[i]) { // not required
				return nil
			}

			if err := m.Progress[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("progress" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("progress" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APILDAProcess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APILDAProcess) UnmarshalBinary(b []byte) error {
	var res APILDAProcess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
