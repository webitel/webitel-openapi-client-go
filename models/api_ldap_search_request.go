// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APILDAPSearchRequest https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1
//
// swagger:model api.LDAPSearchRequest
type APILDAPSearchRequest struct {

	// AttributeSelection
	Attributes []string `json:"attributes"`

	// ----- SearchRequest -----
	// baseObject [D]istinguished[N]ame
	BaseObject string `json:"baseObject,omitempty"`

	// ----- BIND: Authorization -----
	//
	// authorization method e.g.: SIMPLE, SAML, NTLM, etc.
	Bind string `json:"bind,omitempty"`

	// ----- connection -----
	// Optional. ID of the preconfigured LDAP catalog
	CatalogID string `json:"catalog_id,omitempty"`

	// ----- LDAPMessage -----
	// Controls NOT implemented yet !
	Controls []*APILDAPControl `json:"controls"`

	// neverDerefAliases       (0),
	// derefInSearching        (1),
	// derefFindingBaseObj     (2),
	// derefAlways             (3)
	DerefAliases int32 `json:"derefAliases,omitempty"`

	// Filter,
	Filter string `json:"filter,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// baseObject              (0),
	// singleLevel             (1),
	// wholeSubtree            (2)
	Scope int32 `json:"scope,omitempty"`

	// INTEGER (0 ..  maxInt),
	SizeLimit string `json:"sizeLimit,omitempty"`

	// INTEGER (0 ..  maxInt),
	TimeLimit string `json:"timeLimit,omitempty"`

	// tls
	TLS *APILDAPSearchRequestTLSConfig `json:"tls,omitempty"`

	// BOOLEAN,
	TypesOnly bool `json:"typesOnly,omitempty"`

	// Optional. URL to establish connection to LDAP catalog
	//
	// URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]
	URL string `json:"url,omitempty"`

	// bind_dn
	Username string `json:"username,omitempty"`
}

// Validate validates this api LDAP search request
func (m *APILDAPSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APILDAPSearchRequest) validateControls(formats strfmt.Registry) error {
	if swag.IsZero(m.Controls) { // not required
		return nil
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APILDAPSearchRequest) validateTLS(formats strfmt.Registry) error {
	if swag.IsZero(m.TLS) { // not required
		return nil
	}

	if m.TLS != nil {
		if err := m.TLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api LDAP search request based on the context it is used
func (m *APILDAPSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APILDAPSearchRequest) contextValidateControls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Controls); i++ {

		if m.Controls[i] != nil {

			if swag.IsZero(m.Controls[i]) { // not required
				return nil
			}

			if err := m.Controls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APILDAPSearchRequest) contextValidateTLS(ctx context.Context, formats strfmt.Registry) error {

	if m.TLS != nil {

		if swag.IsZero(m.TLS) { // not required
			return nil
		}

		if err := m.TLS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APILDAPSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APILDAPSearchRequest) UnmarshalBinary(b []byte) error {
	var res APILDAPSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
