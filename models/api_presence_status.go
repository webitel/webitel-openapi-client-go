// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIPresenceStatus PresenceStatus PUBLISH
//
// swagger:model api.PresenceStatus
type APIPresenceStatus struct {

	// [optional] service node identity
	App string `json:"app,omitempty"`

	// [optional] signify <status> tuple gone from user's presence; equls to (open == 0)
	Closed bool `json:"closed,omitempty"`

	// [optional] communication <url>
	Contact string `json:"contact,omitempty"`

	// [hidden] for cluster purpose
	DomainID string `json:"domain_id,omitempty"`

	// NOTE: <dnd> actualy has no expires until user manualy switch it off
	Expires string `json:"expires,omitempty"`

	// basic:latest
	//
	// [required] tuple unique id; <track>
	ID string `json:"id,omitempty"`

	// [optional] human readable comment
	Note string `json:"note,omitempty"`

	// [optional] positive value signify 'active'
	Open int32 `json:"open,omitempty"`

	// detailed: -registered -tracking tuples
	//
	// // FIXME: well-known types ?
	//  repeated Dialog  call = 9;
	//  repeated Sipreg  sip = 9;
	//  repeated Websock wss = 9;
	Presence []*APIPresenceStatus `json:"presence"`

	// [optional] importance level of this within presentity's
	Priority int32 `json:"priority,omitempty"`

	// [optional] this tuple (document) modifications version
	Sequence string `json:"sequence,omitempty"`

	// [optional] unique set of <enum:dnd|call|sip|wss>; assume <offline> if blank; <scope> on request
	Status string `json:"status,omitempty"`

	// [required] opened time
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this api presence status
func (m *APIPresenceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPresenceStatus) validatePresence(formats strfmt.Registry) error {
	if swag.IsZero(m.Presence) { // not required
		return nil
	}

	for i := 0; i < len(m.Presence); i++ {
		if swag.IsZero(m.Presence[i]) { // not required
			continue
		}

		if m.Presence[i] != nil {
			if err := m.Presence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presence" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api presence status based on the context it is used
func (m *APIPresenceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPresenceStatus) contextValidatePresence(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Presence); i++ {

		if m.Presence[i] != nil {

			if swag.IsZero(m.Presence[i]) { // not required
				return nil
			}

			if err := m.Presence[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presence" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIPresenceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIPresenceStatus) UnmarshalBinary(b []byte) error {
	var res APIPresenceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
