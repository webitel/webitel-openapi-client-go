// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineAuditQuestionType engine audit question type
//
// swagger:model engineAuditQuestionType
type EngineAuditQuestionType string

func NewEngineAuditQuestionType(value EngineAuditQuestionType) *EngineAuditQuestionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineAuditQuestionType.
func (m EngineAuditQuestionType) Pointer() *EngineAuditQuestionType {
	return &m
}

const (

	// EngineAuditQuestionTypeQuestionDefault captures enum value "question_default"
	EngineAuditQuestionTypeQuestionDefault EngineAuditQuestionType = "question_default"

	// EngineAuditQuestionTypeQuestionScore captures enum value "question_score"
	EngineAuditQuestionTypeQuestionScore EngineAuditQuestionType = "question_score"

	// EngineAuditQuestionTypeQuestionOption captures enum value "question_option"
	EngineAuditQuestionTypeQuestionOption EngineAuditQuestionType = "question_option"
)

// for schema
var engineAuditQuestionTypeEnum []interface{}

func init() {
	var res []EngineAuditQuestionType
	if err := json.Unmarshal([]byte(`["question_default","question_score","question_option"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineAuditQuestionTypeEnum = append(engineAuditQuestionTypeEnum, v)
	}
}

func (m EngineAuditQuestionType) validateEngineAuditQuestionTypeEnum(path, location string, value EngineAuditQuestionType) error {
	if err := validate.EnumCase(path, location, value, engineAuditQuestionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine audit question type
func (m EngineAuditQuestionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineAuditQuestionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine audit question type based on context it is used
func (m EngineAuditQuestionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
