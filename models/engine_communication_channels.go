// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineCommunicationChannels engine communication channels
//
// swagger:model engineCommunicationChannels
type EngineCommunicationChannels string

func NewEngineCommunicationChannels(value EngineCommunicationChannels) *EngineCommunicationChannels {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineCommunicationChannels.
func (m EngineCommunicationChannels) Pointer() *EngineCommunicationChannels {
	return &m
}

const (

	// EngineCommunicationChannelsUndefined captures enum value "Undefined"
	EngineCommunicationChannelsUndefined EngineCommunicationChannels = "Undefined"

	// EngineCommunicationChannelsPhone captures enum value "Phone"
	EngineCommunicationChannelsPhone EngineCommunicationChannels = "Phone"

	// EngineCommunicationChannelsEmail captures enum value "Email"
	EngineCommunicationChannelsEmail EngineCommunicationChannels = "Email"

	// EngineCommunicationChannelsMessaging captures enum value "Messaging"
	EngineCommunicationChannelsMessaging EngineCommunicationChannels = "Messaging"
)

// for schema
var engineCommunicationChannelsEnum []interface{}

func init() {
	var res []EngineCommunicationChannels
	if err := json.Unmarshal([]byte(`["Undefined","Phone","Email","Messaging"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineCommunicationChannelsEnum = append(engineCommunicationChannelsEnum, v)
	}
}

func (m EngineCommunicationChannels) validateEngineCommunicationChannelsEnum(path, location string, value EngineCommunicationChannels) error {
	if err := validate.EnumCase(path, location, value, engineCommunicationChannelsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine communication channels
func (m EngineCommunicationChannels) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineCommunicationChannelsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine communication channels based on context it is used
func (m EngineCommunicationChannels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
