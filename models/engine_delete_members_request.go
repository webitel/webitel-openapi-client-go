// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineDeleteMembersRequest engine delete members request
//
// swagger:model engineDeleteMembersRequest
type EngineDeleteMembersRequest struct {

	// agent id
	AgentID []int32 `json:"agent_id"`

	// attempts
	Attempts *EngineFilterBetween `json:"attempts,omitempty"`

	// bucket id
	BucketID []int32 `json:"bucket_id"`

	// created at
	CreatedAt *EngineFilterBetween `json:"created_at,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// id
	ID []string `json:"id"`

	// ids
	Ids []string `json:"ids"`

	// name
	Name string `json:"name,omitempty"`

	// numbers
	Numbers []string `json:"numbers"`

	// offering at
	OfferingAt *EngineFilterBetween `json:"offering_at,omitempty"`

	// priority
	Priority *EngineFilterBetween `json:"priority,omitempty"`

	// q
	Q string `json:"q,omitempty"`

	// queue id
	QueueID string `json:"queue_id,omitempty"`

	// size
	Size int32 `json:"size,omitempty"`

	// sort
	Sort string `json:"sort,omitempty"`

	// stop cause
	StopCause []string `json:"stop_cause"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`

	// without members
	WithoutMembers bool `json:"without_members,omitempty"`
}

// Validate validates this engine delete members request
func (m *EngineDeleteMembersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferingAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineDeleteMembersRequest) validateAttempts(formats strfmt.Registry) error {
	if swag.IsZero(m.Attempts) { // not required
		return nil
	}

	if m.Attempts != nil {
		if err := m.Attempts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attempts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attempts")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) validateOfferingAt(formats strfmt.Registry) error {
	if swag.IsZero(m.OfferingAt) { // not required
		return nil
	}

	if m.OfferingAt != nil {
		if err := m.OfferingAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offering_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offering_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if m.Priority != nil {
		if err := m.Priority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine delete members request based on the context it is used
func (m *EngineDeleteMembersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfferingAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineDeleteMembersRequest) contextValidateAttempts(ctx context.Context, formats strfmt.Registry) error {

	if m.Attempts != nil {

		if swag.IsZero(m.Attempts) { // not required
			return nil
		}

		if err := m.Attempts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attempts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attempts")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if swag.IsZero(m.CreatedAt) { // not required
			return nil
		}

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) contextValidateOfferingAt(ctx context.Context, formats strfmt.Registry) error {

	if m.OfferingAt != nil {

		if swag.IsZero(m.OfferingAt) { // not required
			return nil
		}

		if err := m.OfferingAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offering_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offering_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineDeleteMembersRequest) contextValidatePriority(ctx context.Context, formats strfmt.Registry) error {

	if m.Priority != nil {

		if swag.IsZero(m.Priority) { // not required
			return nil
		}

		if err := m.Priority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineDeleteMembersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineDeleteMembersRequest) UnmarshalBinary(b []byte) error {
	var res EngineDeleteMembersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
