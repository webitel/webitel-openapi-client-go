// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineHistoryCall engine history call
//
// swagger:model engineHistoryCall
type EngineHistoryCall struct {

	// agent
	Agent *EngineLookup `json:"agent,omitempty"`

	// agent description
	AgentDescription string `json:"agent_description,omitempty"`

	// allow evaluation
	AllowEvaluation bool `json:"allow_evaluation,omitempty"`

	// amd ai logs
	AmdAiLogs []string `json:"amd_ai_logs"`

	// amd ai result
	AmdAiResult string `json:"amd_ai_result,omitempty"`

	// amd result
	AmdResult string `json:"amd_result,omitempty"`

	// annotations
	Annotations []*EngineCallAnnotation `json:"annotations"`

	// answered at
	AnsweredAt string `json:"answered_at,omitempty"`

	// app id
	AppID string `json:"app_id,omitempty"`

	// attempt id
	AttemptID string `json:"attempt_id,omitempty"`

	// bill sec
	BillSec int32 `json:"bill_sec,omitempty"`

	// blind transfer
	BlindTransfer string `json:"blind_transfer,omitempty"`

	// blind transfers
	BlindTransfers []*HistoryCallBlindTransfer `json:"blind_transfers"`

	// bridged at
	BridgedAt string `json:"bridged_at,omitempty"`

	// bridged id
	BridgedID string `json:"bridged_id,omitempty"`

	// cause
	Cause string `json:"cause,omitempty"`

	// contact
	Contact *EngineLookup `json:"contact,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// duration
	Duration int32 `json:"duration,omitempty"`

	// extension
	Extension string `json:"extension,omitempty"`

	// files
	Files []*EngineCallFile `json:"files"`

	// files job
	FilesJob []*EngineHistoryFileJob `json:"files_job"`

	// form fields
	FormFields interface{} `json:"form_fields,omitempty"`

	// from
	From *EngineEndpoint `json:"from,omitempty"`

	// gateway
	Gateway *EngineLookup `json:"gateway,omitempty"`

	// grantee
	Grantee *EngineLookup `json:"grantee,omitempty"`

	// hangup at
	HangupAt string `json:"hangup_at,omitempty"`

	// hangup by
	HangupBy string `json:"hangup_by,omitempty"`

	// hangup disposition
	HangupDisposition string `json:"hangup_disposition,omitempty"`

	// hangup phrase
	HangupPhrase string `json:"hangup_phrase,omitempty"`

	// has children
	HasChildren bool `json:"has_children,omitempty"`

	// hold
	Hold []*EngineCallHold `json:"hold"`

	// hold sec
	HoldSec int32 `json:"hold_sec,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// joined at
	JoinedAt string `json:"joined_at,omitempty"`

	// leaving at
	LeavingAt string `json:"leaving_at,omitempty"`

	// member
	Member *EngineLookup `json:"member,omitempty"`

	// member id
	MemberID string `json:"member_id,omitempty"`

	// parent id
	ParentID string `json:"parent_id,omitempty"`

	// queue
	Queue *EngineLookup `json:"queue,omitempty"`

	// queue bridged at
	QueueBridgedAt string `json:"queue_bridged_at,omitempty"`

	// queue duration sec
	QueueDurationSec int32 `json:"queue_duration_sec,omitempty"`

	// queue wait sec
	QueueWaitSec int32 `json:"queue_wait_sec,omitempty"`

	// rate id
	RateID string `json:"rate_id,omitempty"`

	// rated by
	RatedBy *EngineLookup `json:"rated_by,omitempty"`

	// rated user
	RatedUser *EngineLookup `json:"rated_user,omitempty"`

	// reporting at
	ReportingAt string `json:"reporting_at,omitempty"`

	// reporting sec
	ReportingSec int32 `json:"reporting_sec,omitempty"`

	// result
	Result string `json:"result,omitempty"`

	// schemas
	Schemas []*EngineLookup `json:"schemas"`

	// score optional
	ScoreOptional float32 `json:"score_optional,omitempty"`

	// score required
	ScoreRequired float32 `json:"score_required,omitempty"`

	// sip code
	SipCode int32 `json:"sip_code,omitempty"`

	// stored at
	StoredAt string `json:"stored_at,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// talk sec
	TalkSec int32 `json:"talk_sec,omitempty"`

	// team
	Team *EngineLookup `json:"team,omitempty"`

	// to
	To *EngineEndpoint `json:"to,omitempty"`

	// transcripts
	Transcripts []*EngineTranscriptLookup `json:"transcripts"`

	// transfer from
	TransferFrom string `json:"transfer_from,omitempty"`

	// transfer to
	TransferTo string `json:"transfer_to,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// user
	User *EngineLookup `json:"user,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`

	// wait sec
	WaitSec int32 `json:"wait_sec,omitempty"`
}

// Validate validates this engine history call
func (m *EngineHistoryCall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlindTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRatedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranscripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineHistoryCall) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateAnnotations(formats strfmt.Registry) error {
	if swag.IsZero(m.Annotations) { // not required
		return nil
	}

	for i := 0; i < len(m.Annotations); i++ {
		if swag.IsZero(m.Annotations[i]) { // not required
			continue
		}

		if m.Annotations[i] != nil {
			if err := m.Annotations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("annotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("annotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateBlindTransfers(formats strfmt.Registry) error {
	if swag.IsZero(m.BlindTransfers) { // not required
		return nil
	}

	for i := 0; i < len(m.BlindTransfers); i++ {
		if swag.IsZero(m.BlindTransfers[i]) { // not required
			continue
		}

		if m.BlindTransfers[i] != nil {
			if err := m.BlindTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blind_transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blind_transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateFilesJob(formats strfmt.Registry) error {
	if swag.IsZero(m.FilesJob) { // not required
		return nil
	}

	for i := 0; i < len(m.FilesJob); i++ {
		if swag.IsZero(m.FilesJob[i]) { // not required
			continue
		}

		if m.FilesJob[i] != nil {
			if err := m.FilesJob[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files_job" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files_job" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateGrantee(formats strfmt.Registry) error {
	if swag.IsZero(m.Grantee) { // not required
		return nil
	}

	if m.Grantee != nil {
		if err := m.Grantee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantee")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateHold(formats strfmt.Registry) error {
	if swag.IsZero(m.Hold) { // not required
		return nil
	}

	for i := 0; i < len(m.Hold); i++ {
		if swag.IsZero(m.Hold[i]) { // not required
			continue
		}

		if m.Hold[i] != nil {
			if err := m.Hold[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hold" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hold" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(m.Member) { // not required
		return nil
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateRatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.RatedBy) { // not required
		return nil
	}

	if m.RatedBy != nil {
		if err := m.RatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rated_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateRatedUser(formats strfmt.Registry) error {
	if swag.IsZero(m.RatedUser) { // not required
		return nil
	}

	if m.RatedUser != nil {
		if err := m.RatedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rated_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rated_user")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateSchemas(formats strfmt.Registry) error {
	if swag.IsZero(m.Schemas) { // not required
		return nil
	}

	for i := 0; i < len(m.Schemas); i++ {
		if swag.IsZero(m.Schemas[i]) { // not required
			continue
		}

		if m.Schemas[i] != nil {
			if err := m.Schemas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	if m.To != nil {
		if err := m.To.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("to")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) validateTranscripts(formats strfmt.Registry) error {
	if swag.IsZero(m.Transcripts) { // not required
		return nil
	}

	for i := 0; i < len(m.Transcripts); i++ {
		if swag.IsZero(m.Transcripts[i]) { // not required
			continue
		}

		if m.Transcripts[i] != nil {
			if err := m.Transcripts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine history call based on the context it is used
func (m *EngineHistoryCall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnnotations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlindTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrantee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRatedUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTranscripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineHistoryCall) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {

		if swag.IsZero(m.Agent) { // not required
			return nil
		}

		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateAnnotations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Annotations); i++ {

		if m.Annotations[i] != nil {

			if swag.IsZero(m.Annotations[i]) { // not required
				return nil
			}

			if err := m.Annotations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("annotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("annotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateBlindTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlindTransfers); i++ {

		if m.BlindTransfers[i] != nil {

			if swag.IsZero(m.BlindTransfers[i]) { // not required
				return nil
			}

			if err := m.BlindTransfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blind_transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("blind_transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {

		if swag.IsZero(m.Contact) { // not required
			return nil
		}

		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {

			if swag.IsZero(m.Files[i]) { // not required
				return nil
			}

			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateFilesJob(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilesJob); i++ {

		if m.FilesJob[i] != nil {

			if swag.IsZero(m.FilesJob[i]) { // not required
				return nil
			}

			if err := m.FilesJob[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files_job" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files_job" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {

		if swag.IsZero(m.From) { // not required
			return nil
		}

		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.Gateway != nil {

		if swag.IsZero(m.Gateway) { // not required
			return nil
		}

		if err := m.Gateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateGrantee(ctx context.Context, formats strfmt.Registry) error {

	if m.Grantee != nil {

		if swag.IsZero(m.Grantee) { // not required
			return nil
		}

		if err := m.Grantee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grantee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grantee")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateHold(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hold); i++ {

		if m.Hold[i] != nil {

			if swag.IsZero(m.Hold[i]) { // not required
				return nil
			}

			if err := m.Hold[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hold" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hold" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if m.Member != nil {

		if swag.IsZero(m.Member) { // not required
			return nil
		}

		if err := m.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {

		if swag.IsZero(m.Queue) { // not required
			return nil
		}

		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateRatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.RatedBy != nil {

		if swag.IsZero(m.RatedBy) { // not required
			return nil
		}

		if err := m.RatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rated_by")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateRatedUser(ctx context.Context, formats strfmt.Registry) error {

	if m.RatedUser != nil {

		if swag.IsZero(m.RatedUser) { // not required
			return nil
		}

		if err := m.RatedUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rated_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rated_user")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateSchemas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schemas); i++ {

		if m.Schemas[i] != nil {

			if swag.IsZero(m.Schemas[i]) { // not required
				return nil
			}

			if err := m.Schemas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {

		if swag.IsZero(m.Team) { // not required
			return nil
		}

		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateTo(ctx context.Context, formats strfmt.Registry) error {

	if m.To != nil {

		if swag.IsZero(m.To) { // not required
			return nil
		}

		if err := m.To.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("to")
			}
			return err
		}
	}

	return nil
}

func (m *EngineHistoryCall) contextValidateTranscripts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transcripts); i++ {

		if m.Transcripts[i] != nil {

			if swag.IsZero(m.Transcripts[i]) { // not required
				return nil
			}

			if err := m.Transcripts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transcripts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transcripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EngineHistoryCall) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineHistoryCall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineHistoryCall) UnmarshalBinary(b []byte) error {
	var res EngineHistoryCall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
