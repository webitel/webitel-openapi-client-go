// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineRoutingSchemaType engine routing schema type
//
// swagger:model engineRoutingSchemaType
type EngineRoutingSchemaType string

func NewEngineRoutingSchemaType(value EngineRoutingSchemaType) *EngineRoutingSchemaType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineRoutingSchemaType.
func (m EngineRoutingSchemaType) Pointer() *EngineRoutingSchemaType {
	return &m
}

const (

	// EngineRoutingSchemaTypeDefault captures enum value "default"
	EngineRoutingSchemaTypeDefault EngineRoutingSchemaType = "default"

	// EngineRoutingSchemaTypeVoice captures enum value "voice"
	EngineRoutingSchemaTypeVoice EngineRoutingSchemaType = "voice"

	// EngineRoutingSchemaTypeChat captures enum value "chat"
	EngineRoutingSchemaTypeChat EngineRoutingSchemaType = "chat"

	// EngineRoutingSchemaTypeProcessing captures enum value "processing"
	EngineRoutingSchemaTypeProcessing EngineRoutingSchemaType = "processing"

	// EngineRoutingSchemaTypeService captures enum value "service"
	EngineRoutingSchemaTypeService EngineRoutingSchemaType = "service"
)

// for schema
var engineRoutingSchemaTypeEnum []interface{}

func init() {
	var res []EngineRoutingSchemaType
	if err := json.Unmarshal([]byte(`["default","voice","chat","processing","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineRoutingSchemaTypeEnum = append(engineRoutingSchemaTypeEnum, v)
	}
}

func (m EngineRoutingSchemaType) validateEngineRoutingSchemaTypeEnum(path, location string, value EngineRoutingSchemaType) error {
	if err := validate.EnumCase(path, location, value, engineRoutingSchemaTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine routing schema type
func (m EngineRoutingSchemaType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineRoutingSchemaTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine routing schema type based on context it is used
func (m EngineRoutingSchemaType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
