// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EngineSearchHistoryCallRequest engine search history call request
//
// swagger:model engineSearchHistoryCallRequest
type EngineSearchHistoryCallRequest struct {

	// agent description
	AgentDescription string `json:"agent_description,omitempty"`

	// agent id
	AgentID []string `json:"agent_id"`

	// amd ai result
	AmdAiResult []string `json:"amd_ai_result"`

	// amd result
	AmdResult []string `json:"amd_result"`

	// answered at
	AnsweredAt *EngineFilterBetween `json:"answered_at,omitempty"`

	// cause
	Cause []string `json:"cause"`

	// contact id
	ContactID []string `json:"contact_id"`

	// created at
	CreatedAt *EngineFilterBetween `json:"created_at,omitempty"`

	// dependency id
	DependencyID string `json:"dependency_id,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// directions
	Directions []string `json:"directions"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// duration
	Duration *EngineFilterBetween `json:"duration,omitempty"`

	// fields
	Fields []string `json:"fields"`

	// fts
	Fts string `json:"fts,omitempty"`

	// gateway id
	GatewayID []string `json:"gateway_id"`

	// grantee id
	GranteeID []string `json:"grantee_id"`

	// has file
	HasFile bool `json:"has_file,omitempty"`

	// has transcript
	HasTranscript bool `json:"has_transcript,omitempty"`

	// has transfer
	HasTransfer bool `json:"has_transfer,omitempty"`

	// id
	ID []string `json:"id"`

	// member id
	MemberID []string `json:"member_id"`

	// missed
	Missed bool `json:"missed,omitempty"`

	// number
	Number string `json:"number,omitempty"`

	// owner id
	OwnerID []string `json:"owner_id"`

	// page
	Page int32 `json:"page,omitempty"`

	// parent id
	ParentID string `json:"parent_id,omitempty"`

	// q
	Q string `json:"q,omitempty"`

	// queue id
	QueueID []string `json:"queue_id"`

	// rated
	Rated bool `json:"rated,omitempty"`

	// rated by
	RatedBy []string `json:"rated_by"`

	// rated user
	RatedUser []string `json:"rated_user"`

	// schema id
	SchemaID []int32 `json:"schema_id"`

	// score optional
	ScoreOptional *EngineFilterBetween `json:"score_optional,omitempty"`

	// score required
	ScoreRequired *EngineFilterBetween `json:"score_required,omitempty"`

	// size
	Size int32 `json:"size,omitempty"`

	// skip parent
	SkipParent bool `json:"skip_parent,omitempty"`

	// sort
	Sort string `json:"sort,omitempty"`

	// stored at
	StoredAt *EngineFilterBetween `json:"stored_at,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// talk
	Talk *EngineFilterBetween `json:"talk,omitempty"`

	// team id
	TeamID []string `json:"team_id"`

	// timeline
	Timeline bool `json:"timeline,omitempty"`

	// transfer from
	TransferFrom []string `json:"transfer_from"`

	// transfer to
	TransferTo []string `json:"transfer_to"`

	// user id
	UserID []string `json:"user_id"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`
}

// Validate validates this engine search history call request
func (m *EngineSearchHistoryCallRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnsweredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreOptional(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTalk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineSearchHistoryCallRequest) validateAnsweredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AnsweredAt) { // not required
		return nil
	}

	if m.AnsweredAt != nil {
		if err := m.AnsweredAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answered_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("answered_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateScoreOptional(formats strfmt.Registry) error {
	if swag.IsZero(m.ScoreOptional) { // not required
		return nil
	}

	if m.ScoreOptional != nil {
		if err := m.ScoreOptional.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score_optional")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score_optional")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateScoreRequired(formats strfmt.Registry) error {
	if swag.IsZero(m.ScoreRequired) { // not required
		return nil
	}

	if m.ScoreRequired != nil {
		if err := m.ScoreRequired.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score_required")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score_required")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateStoredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StoredAt) { // not required
		return nil
	}

	if m.StoredAt != nil {
		if err := m.StoredAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stored_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) validateTalk(formats strfmt.Registry) error {
	if swag.IsZero(m.Talk) { // not required
		return nil
	}

	if m.Talk != nil {
		if err := m.Talk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("talk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("talk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this engine search history call request based on the context it is used
func (m *EngineSearchHistoryCallRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnsweredAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScoreOptional(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScoreRequired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoredAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTalk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateAnsweredAt(ctx context.Context, formats strfmt.Registry) error {

	if m.AnsweredAt != nil {

		if swag.IsZero(m.AnsweredAt) { // not required
			return nil
		}

		if err := m.AnsweredAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answered_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("answered_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if swag.IsZero(m.CreatedAt) { // not required
			return nil
		}

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if m.Duration != nil {

		if swag.IsZero(m.Duration) { // not required
			return nil
		}

		if err := m.Duration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateScoreOptional(ctx context.Context, formats strfmt.Registry) error {

	if m.ScoreOptional != nil {

		if swag.IsZero(m.ScoreOptional) { // not required
			return nil
		}

		if err := m.ScoreOptional.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score_optional")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score_optional")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateScoreRequired(ctx context.Context, formats strfmt.Registry) error {

	if m.ScoreRequired != nil {

		if swag.IsZero(m.ScoreRequired) { // not required
			return nil
		}

		if err := m.ScoreRequired.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("score_required")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("score_required")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateStoredAt(ctx context.Context, formats strfmt.Registry) error {

	if m.StoredAt != nil {

		if swag.IsZero(m.StoredAt) { // not required
			return nil
		}

		if err := m.StoredAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stored_at")
			}
			return err
		}
	}

	return nil
}

func (m *EngineSearchHistoryCallRequest) contextValidateTalk(ctx context.Context, formats strfmt.Registry) error {

	if m.Talk != nil {

		if swag.IsZero(m.Talk) { // not required
			return nil
		}

		if err := m.Talk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("talk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("talk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EngineSearchHistoryCallRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EngineSearchHistoryCallRequest) UnmarshalBinary(b []byte) error {
	var res EngineSearchHistoryCallRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
