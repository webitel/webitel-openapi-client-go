// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineSystemSettingName engine system setting name
//
// swagger:model engineSystemSettingName
type EngineSystemSettingName string

func NewEngineSystemSettingName(value EngineSystemSettingName) *EngineSystemSettingName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineSystemSettingName.
func (m EngineSystemSettingName) Pointer() *EngineSystemSettingName {
	return &m
}

const (

	// EngineSystemSettingNameEmptySystemSettingsName captures enum value "empty_system_settings_name"
	EngineSystemSettingNameEmptySystemSettingsName EngineSystemSettingName = "empty_system_settings_name"

	// EngineSystemSettingNameEnableOmnichannel captures enum value "enable_omnichannel"
	EngineSystemSettingNameEnableOmnichannel EngineSystemSettingName = "enable_omnichannel"

	// EngineSystemSettingNameMemberChunkSize captures enum value "member_chunk_size"
	EngineSystemSettingNameMemberChunkSize EngineSystemSettingName = "member_chunk_size"

	// EngineSystemSettingNameAmdCancelNotHuman captures enum value "amd_cancel_not_human"
	EngineSystemSettingNameAmdCancelNotHuman EngineSystemSettingName = "amd_cancel_not_human"

	// EngineSystemSettingNameSchemeVersionLimit captures enum value "scheme_version_limit"
	EngineSystemSettingNameSchemeVersionLimit EngineSystemSettingName = "scheme_version_limit"

	// EngineSystemSettingNameEnable2fa captures enum value "enable_2fa"
	EngineSystemSettingNameEnable2fa EngineSystemSettingName = "enable_2fa"

	// EngineSystemSettingNameExportSettings captures enum value "export_settings"
	EngineSystemSettingNameExportSettings EngineSystemSettingName = "export_settings"

	// EngineSystemSettingNameSearchNumberLength captures enum value "search_number_length"
	EngineSystemSettingNameSearchNumberLength EngineSystemSettingName = "search_number_length"

	// EngineSystemSettingNameChatAiConnection captures enum value "chat_ai_connection"
	EngineSystemSettingNameChatAiConnection EngineSystemSettingName = "chat_ai_connection"

	// EngineSystemSettingNamePasswordRegExp captures enum value "password_reg_exp"
	EngineSystemSettingNamePasswordRegExp EngineSystemSettingName = "password_reg_exp"

	// EngineSystemSettingNamePasswordValidationText captures enum value "password_validation_text"
	EngineSystemSettingNamePasswordValidationText EngineSystemSettingName = "password_validation_text"

	// EngineSystemSettingNameAutolinkCallToContact captures enum value "autolink_call_to_contact"
	EngineSystemSettingNameAutolinkCallToContact EngineSystemSettingName = "autolink_call_to_contact"
)

// for schema
var engineSystemSettingNameEnum []interface{}

func init() {
	var res []EngineSystemSettingName
	if err := json.Unmarshal([]byte(`["empty_system_settings_name","enable_omnichannel","member_chunk_size","amd_cancel_not_human","scheme_version_limit","enable_2fa","export_settings","search_number_length","chat_ai_connection","password_reg_exp","password_validation_text","autolink_call_to_contact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineSystemSettingNameEnum = append(engineSystemSettingNameEnum, v)
	}
}

func (m EngineSystemSettingName) validateEngineSystemSettingNameEnum(path, location string, value EngineSystemSettingName) error {
	if err := validate.EnumCase(path, location, value, engineSystemSettingNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine system setting name
func (m EngineSystemSettingName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineSystemSettingNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine system setting name based on context it is used
func (m EngineSystemSettingName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
