// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineTeamHookEvent engine team hook event
//
// swagger:model engineTeamHookEvent
type EngineTeamHookEvent string

func NewEngineTeamHookEvent(value EngineTeamHookEvent) *EngineTeamHookEvent {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineTeamHookEvent.
func (m EngineTeamHookEvent) Pointer() *EngineTeamHookEvent {
	return &m
}

const (

	// EngineTeamHookEventTeamHookEventUndefined captures enum value "teamHookEventUndefined"
	EngineTeamHookEventTeamHookEventUndefined EngineTeamHookEvent = "teamHookEventUndefined"

	// EngineTeamHookEventAgentStatus captures enum value "agent_status"
	EngineTeamHookEventAgentStatus EngineTeamHookEvent = "agent_status"
)

// for schema
var engineTeamHookEventEnum []interface{}

func init() {
	var res []EngineTeamHookEvent
	if err := json.Unmarshal([]byte(`["teamHookEventUndefined","agent_status"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineTeamHookEventEnum = append(engineTeamHookEventEnum, v)
	}
}

func (m EngineTeamHookEvent) validateEngineTeamHookEventEnum(path, location string, value EngineTeamHookEvent) error {
	if err := validate.EnumCase(path, location, value, engineTeamHookEventEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine team hook event
func (m EngineTeamHookEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineTeamHookEventEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine team hook event based on context it is used
func (m EngineTeamHookEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
