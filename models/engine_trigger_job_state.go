// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EngineTriggerJobState engine trigger job state
//
// swagger:model engineTriggerJobState
type EngineTriggerJobState string

func NewEngineTriggerJobState(value EngineTriggerJobState) *EngineTriggerJobState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EngineTriggerJobState.
func (m EngineTriggerJobState) Pointer() *EngineTriggerJobState {
	return &m
}

const (

	// EngineTriggerJobStateIdle captures enum value "idle"
	EngineTriggerJobStateIdle EngineTriggerJobState = "idle"

	// EngineTriggerJobStateActive captures enum value "active"
	EngineTriggerJobStateActive EngineTriggerJobState = "active"

	// EngineTriggerJobStateDone captures enum value "done"
	EngineTriggerJobStateDone EngineTriggerJobState = "done"

	// EngineTriggerJobStateError captures enum value "error"
	EngineTriggerJobStateError EngineTriggerJobState = "error"
)

// for schema
var engineTriggerJobStateEnum []interface{}

func init() {
	var res []EngineTriggerJobState
	if err := json.Unmarshal([]byte(`["idle","active","done","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		engineTriggerJobStateEnum = append(engineTriggerJobStateEnum, v)
	}
}

func (m EngineTriggerJobState) validateEngineTriggerJobStateEnum(path, location string, value EngineTriggerJobState) error {
	if err := validate.EnumCase(path, location, value, engineTriggerJobStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this engine trigger job state
func (m EngineTriggerJobState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEngineTriggerJobStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this engine trigger job state based on context it is used
func (m EngineTriggerJobState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
