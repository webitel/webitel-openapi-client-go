// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageCreateImportTemplateRequest Create import template request body
//
// # Create import template for CSV
//
// swagger:model storageCreateImportTemplateRequest
type StorageCreateImportTemplateRequest struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parameters
	// Required: true
	Parameters interface{} `json:"parameters"`

	// source
	Source *EngineLookup `json:"source,omitempty"`

	// source id
	// Required: true
	SourceID *string `json:"source_id"`

	// source type
	SourceType *StorageImportSourceType `json:"source_type,omitempty"`
}

// Validate validates this storage create import template request
func (m *StorageCreateImportTemplateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageCreateImportTemplateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StorageCreateImportTemplateRequest) validateParameters(formats strfmt.Registry) error {

	if m.Parameters == nil {
		return errors.Required("parameters", "body", nil)
	}

	return nil
}

func (m *StorageCreateImportTemplateRequest) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *StorageCreateImportTemplateRequest) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("source_id", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *StorageCreateImportTemplateRequest) validateSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if m.SourceType != nil {
		if err := m.SourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage create import template request based on the context it is used
func (m *StorageCreateImportTemplateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageCreateImportTemplateRequest) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *StorageCreateImportTemplateRequest) contextValidateSourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceType != nil {

		if swag.IsZero(m.SourceType) { // not required
			return nil
		}

		if err := m.SourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageCreateImportTemplateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageCreateImportTemplateRequest) UnmarshalBinary(b []byte) error {
	var res StorageCreateImportTemplateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
