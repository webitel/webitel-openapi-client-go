// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageImportSourceType storage import source type
//
// swagger:model storageImportSourceType
type StorageImportSourceType string

func NewStorageImportSourceType(value StorageImportSourceType) *StorageImportSourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StorageImportSourceType.
func (m StorageImportSourceType) Pointer() *StorageImportSourceType {
	return &m
}

const (

	// StorageImportSourceTypeDefaultSourceType captures enum value "DefaultSourceType"
	StorageImportSourceTypeDefaultSourceType StorageImportSourceType = "DefaultSourceType"

	// StorageImportSourceTypeDialer captures enum value "Dialer"
	StorageImportSourceTypeDialer StorageImportSourceType = "Dialer"
)

// for schema
var storageImportSourceTypeEnum []interface{}

func init() {
	var res []StorageImportSourceType
	if err := json.Unmarshal([]byte(`["DefaultSourceType","Dialer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageImportSourceTypeEnum = append(storageImportSourceTypeEnum, v)
	}
}

func (m StorageImportSourceType) validateStorageImportSourceTypeEnum(path, location string, value StorageImportSourceType) error {
	if err := validate.EnumCase(path, location, value, storageImportSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage import source type
func (m StorageImportSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageImportSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage import source type based on context it is used
func (m StorageImportSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
