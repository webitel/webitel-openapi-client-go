// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageProviderType storage provider type
//
// swagger:model storageProviderType
type StorageProviderType string

func NewStorageProviderType(value StorageProviderType) *StorageProviderType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StorageProviderType.
func (m StorageProviderType) Pointer() *StorageProviderType {
	return &m
}

const (

	// StorageProviderTypeDefaultProvider captures enum value "DefaultProvider"
	StorageProviderTypeDefaultProvider StorageProviderType = "DefaultProvider"

	// StorageProviderTypeMicrosoft captures enum value "Microsoft"
	StorageProviderTypeMicrosoft StorageProviderType = "Microsoft"

	// StorageProviderTypeGoogle captures enum value "Google"
	StorageProviderTypeGoogle StorageProviderType = "Google"

	// StorageProviderTypeElevenLabs captures enum value "ElevenLabs"
	StorageProviderTypeElevenLabs StorageProviderType = "ElevenLabs"
)

// for schema
var storageProviderTypeEnum []interface{}

func init() {
	var res []StorageProviderType
	if err := json.Unmarshal([]byte(`["DefaultProvider","Microsoft","Google","ElevenLabs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageProviderTypeEnum = append(storageProviderTypeEnum, v)
	}
}

func (m StorageProviderType) validateStorageProviderTypeEnum(path, location string, value StorageProviderType) error {
	if err := validate.EnumCase(path, location, value, storageProviderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage provider type
func (m StorageProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageProviderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage provider type based on context it is used
func (m StorageProviderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
