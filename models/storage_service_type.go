// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageServiceType storage service type
//
// swagger:model storageServiceType
type StorageServiceType string

func NewStorageServiceType(value StorageServiceType) *StorageServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StorageServiceType.
func (m StorageServiceType) Pointer() *StorageServiceType {
	return &m
}

const (

	// StorageServiceTypeDefaultService captures enum value "DefaultService"
	StorageServiceTypeDefaultService StorageServiceType = "DefaultService"

	// StorageServiceTypeSTT captures enum value "STT"
	StorageServiceTypeSTT StorageServiceType = "STT"

	// StorageServiceTypeTTS captures enum value "TTS"
	StorageServiceTypeTTS StorageServiceType = "TTS"
)

// for schema
var storageServiceTypeEnum []interface{}

func init() {
	var res []StorageServiceType
	if err := json.Unmarshal([]byte(`["DefaultService","STT","TTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageServiceTypeEnum = append(storageServiceTypeEnum, v)
	}
}

func (m StorageServiceType) validateStorageServiceTypeEnum(path, location string, value StorageServiceType) error {
	if err := validate.EnumCase(path, location, value, storageServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage service type
func (m StorageServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage service type based on context it is used
func (m StorageServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
