// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelChatAgentChat webitel chat agent chat
//
// swagger:model webitel.chat.AgentChat
type WebitelChatAgentChat struct {

	// Close reason (from agent perspective)
	CloseReason string `json:"close_reason,omitempty"`

	// closed at
	ClosedAt string `json:"closed_at,omitempty"`

	// Chat gateway
	Gateway *WebitelChatPeer `json:"gateway,omitempty"`

	// Chat id
	ID string `json:"id,omitempty"`

	// Chat first message
	LastMessage *WebitelChatMessage `json:"last_message,omitempty"`

	// Queue name (unreal)
	Queue *WebitelChatPeer `json:"queue,omitempty"`

	// Chat time length
	StartedAt string `json:"started_at,omitempty"`

	// Chat title
	Title string `json:"title,omitempty"`
}

// Validate validates this webitel chat agent chat
func (m *WebitelChatAgentChat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatAgentChat) validateGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatAgentChat) validateLastMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.LastMessage) { // not required
		return nil
	}

	if m.LastMessage != nil {
		if err := m.LastMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_message")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatAgentChat) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel chat agent chat based on the context it is used
func (m *WebitelChatAgentChat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatAgentChat) contextValidateGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.Gateway != nil {

		if swag.IsZero(m.Gateway) { // not required
			return nil
		}

		if err := m.Gateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatAgentChat) contextValidateLastMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.LastMessage != nil {

		if swag.IsZero(m.LastMessage) { // not required
			return nil
		}

		if err := m.LastMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_message")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatAgentChat) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {

		if swag.IsZero(m.Queue) { // not required
			return nil
		}

		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelChatAgentChat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelChatAgentChat) UnmarshalBinary(b []byte) error {
	var res WebitelChatAgentChat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
