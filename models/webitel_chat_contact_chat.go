// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelChatContactChat The Chat info.
// Alias: participant, subscriber, member, peer, leg.
//
// swagger:model webitel.chat.ContactChat
type WebitelChatContactChat struct {

	// Context. Variables.
	Context map[string]string `json:"context,omitempty"`

	// [D]omain[C]omponent primary ID.
	Dc string `json:"dc,omitempty"`

	// Unique identifier for this chat.
	// [FROM] Member / Channel ID.
	//
	// // [TO] Group. Conversation ID.
	//  string chat_id = 2;
	ID string `json:"id,omitempty"`

	// OPTIONAL. Invite[d] BY member info.
	Invite *WebitelChatContactChatInvite `json:"invite,omitempty"`

	// OPTIONAL. A non-zero value indicates that
	// the participant has joined the chat.
	Join string `json:"join,omitempty"`

	// OPTIONAL. A non-zero value indicates that
	// the participant has left the chat. OFFLINE(!)
	Left string `json:"left,omitempty"`

	// [FROM]: User identity. Seed.
	Peer *WebitelChatChatPeer `json:"peer,omitempty"`

	// [TO]: Chat title.
	Title string `json:"title,omitempty"`

	// [FROM] VIA text gateway profile.
	Via *WebitelChatChatPeer `json:"via,omitempty"`
}

// Validate validates this webitel chat contact chat
func (m *WebitelChatContactChat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatContactChat) validateInvite(formats strfmt.Registry) error {
	if swag.IsZero(m.Invite) { // not required
		return nil
	}

	if m.Invite != nil {
		if err := m.Invite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invite")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatContactChat) validatePeer(formats strfmt.Registry) error {
	if swag.IsZero(m.Peer) { // not required
		return nil
	}

	if m.Peer != nil {
		if err := m.Peer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peer")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatContactChat) validateVia(formats strfmt.Registry) error {
	if swag.IsZero(m.Via) { // not required
		return nil
	}

	if m.Via != nil {
		if err := m.Via.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("via")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("via")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel chat contact chat based on the context it is used
func (m *WebitelChatContactChat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatContactChat) contextValidateInvite(ctx context.Context, formats strfmt.Registry) error {

	if m.Invite != nil {

		if swag.IsZero(m.Invite) { // not required
			return nil
		}

		if err := m.Invite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invite")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatContactChat) contextValidatePeer(ctx context.Context, formats strfmt.Registry) error {

	if m.Peer != nil {

		if swag.IsZero(m.Peer) { // not required
			return nil
		}

		if err := m.Peer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peer")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatContactChat) contextValidateVia(ctx context.Context, formats strfmt.Registry) error {

	if m.Via != nil {

		if swag.IsZero(m.Via) { // not required
			return nil
		}

		if err := m.Via.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("via")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("via")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelChatContactChat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelChatContactChat) UnmarshalBinary(b []byte) error {
	var res WebitelChatContactChat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
