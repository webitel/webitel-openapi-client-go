// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelChatMessage Chat Message.
//
// swagger:model webitel.chat.Message
type WebitelChatMessage struct {

	// Conversation the message belongs to ..
	Chat *WebitelChatChat `json:"chat,omitempty"`

	// Context. Variables. Environment.
	Context map[string]string `json:"context,omitempty"`

	// Timestamp when this message was sent (published).
	Date string `json:"date,omitempty"`

	// Timestamp when this message was last edited.
	Edit string `json:"edit,omitempty"`

	// Message Media. Attachment.
	File *WebitelChatFile `json:"file,omitempty"`

	// Sender of the message.
	From *WebitelChatPeer `json:"from,omitempty"`

	// Unique message identifier inside this chat.
	ID string `json:"id,omitempty"`

	// Keyboard. Buttons. Quick Replies.
	Keyboard *WebitelChatReplyMarkup `json:"keyboard,omitempty"`

	// Postback. Reply Button Click[ed].
	Postback *WebitelChatPostback `json:"postback,omitempty"`

	// Chat Sender of the message, sent on behalf of a chat (member).
	Sender *WebitelChatChat `json:"sender,omitempty"`

	// Message Text.
	Text string `json:"text,omitempty"`
}

// Validate validates this webitel chat message
func (m *WebitelChatMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatMessage) validateChat(formats strfmt.Registry) error {
	if swag.IsZero(m.Chat) { // not required
		return nil
	}

	if m.Chat != nil {
		if err := m.Chat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) validateKeyboard(formats strfmt.Registry) error {
	if swag.IsZero(m.Keyboard) { // not required
		return nil
	}

	if m.Keyboard != nil {
		if err := m.Keyboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyboard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyboard")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) validatePostback(formats strfmt.Registry) error {
	if swag.IsZero(m.Postback) { // not required
		return nil
	}

	if m.Postback != nil {
		if err := m.Postback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postback")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) validateSender(formats strfmt.Registry) error {
	if swag.IsZero(m.Sender) { // not required
		return nil
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel chat message based on the context it is used
func (m *WebitelChatMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyboard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostback(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelChatMessage) contextValidateChat(ctx context.Context, formats strfmt.Registry) error {

	if m.Chat != nil {

		if swag.IsZero(m.Chat) { // not required
			return nil
		}

		if err := m.Chat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {

		if swag.IsZero(m.File) { // not required
			return nil
		}

		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {

		if swag.IsZero(m.From) { // not required
			return nil
		}

		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) contextValidateKeyboard(ctx context.Context, formats strfmt.Registry) error {

	if m.Keyboard != nil {

		if swag.IsZero(m.Keyboard) { // not required
			return nil
		}

		if err := m.Keyboard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyboard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyboard")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) contextValidatePostback(ctx context.Context, formats strfmt.Registry) error {

	if m.Postback != nil {

		if swag.IsZero(m.Postback) { // not required
			return nil
		}

		if err := m.Postback.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postback")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelChatMessage) contextValidateSender(ctx context.Context, formats strfmt.Registry) error {

	if m.Sender != nil {

		if swag.IsZero(m.Sender) { // not required
			return nil
		}

		if err := m.Sender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelChatMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelChatMessage) UnmarshalBinary(b []byte) error {
	var res WebitelChatMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
