// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelContactsChatEvent webitel contacts chat event
//
// swagger:model webitel.contacts.ChatEvent
type WebitelContactsChatEvent struct {

	// closed at
	ClosedAt string `json:"closed_at,omitempty"`

	// duration
	Duration string `json:"duration,omitempty"`

	// flow scheme
	FlowScheme *WebitelContactsLookup `json:"flow_scheme,omitempty"`

	// gateway
	Gateway *WebitelContactsLookup `json:"gateway,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is detailed
	IsDetailed bool `json:"is_detailed,omitempty"`

	// is inbound
	IsInbound bool `json:"is_inbound,omitempty"`

	// is missed
	IsMissed bool `json:"is_missed,omitempty"`

	// participants
	Participants []*WebitelContactsLookup `json:"participants"`

	// queue
	Queue *WebitelContactsLookup `json:"queue,omitempty"`
}

// Validate validates this webitel contacts chat event
func (m *WebitelContactsChatEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlowScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsChatEvent) validateFlowScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowScheme) { // not required
		return nil
	}

	if m.FlowScheme != nil {
		if err := m.FlowScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_scheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow_scheme")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsChatEvent) validateGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsChatEvent) validateParticipants(formats strfmt.Registry) error {
	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {
		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {
			if err := m.Participants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebitelContactsChatEvent) validateQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel contacts chat event based on the context it is used
func (m *WebitelContactsChatEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlowScheme(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParticipants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsChatEvent) contextValidateFlowScheme(ctx context.Context, formats strfmt.Registry) error {

	if m.FlowScheme != nil {

		if swag.IsZero(m.FlowScheme) { // not required
			return nil
		}

		if err := m.FlowScheme.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow_scheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flow_scheme")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsChatEvent) contextValidateGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.Gateway != nil {

		if swag.IsZero(m.Gateway) { // not required
			return nil
		}

		if err := m.Gateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsChatEvent) contextValidateParticipants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Participants); i++ {

		if m.Participants[i] != nil {

			if swag.IsZero(m.Participants[i]) { // not required
				return nil
			}

			if err := m.Participants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebitelContactsChatEvent) contextValidateQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.Queue != nil {

		if swag.IsZero(m.Queue) { // not required
			return nil
		}

		if err := m.Queue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsChatEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsChatEvent) UnmarshalBinary(b []byte) error {
	var res WebitelContactsChatEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
