// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelContactsComment The Contact's internal Comment.
// Output purpose only
// Example: {"created_at":"1680268507698","created_by":{"id":"34","name":"John Doe"},"etag":"FqaTCDLbhpaoUreL","id":"354","text":"This is a new note about the contact's recent activity. So ...","updated_at":"1680268507698","updated_by":{"id":"34","name":"John Doe"}}
//
// swagger:model webitel.contacts.Comment
type WebitelContactsComment struct {

	// The user who created this Field.
	CreatedAt string `json:"created_at,omitempty"`

	// Timestamp(milli) of the Field creation.
	CreatedBy *WebitelContactsLookup `json:"created_by,omitempty"`

	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `json:"etag,omitempty"`

	// Styles of the text components.
	Format []*WebitelContactsCommentFormat `json:"format"`

	// The unique ID of the Comment. Never changes.
	ID string `json:"id,omitempty"`

	// Rich Text, multi-line[d] string value.
	Text string `json:"text,omitempty"`

	// Timestamp(milli) of the last Field update.
	// Take part in Etag generation.
	UpdatedAt string `json:"updated_at,omitempty"`

	// The user who performed last Update.
	UpdatedBy *WebitelContactsLookup `json:"updated_by,omitempty"`

	// Version of the latest update. Numeric sequence.
	Ver int32 `json:"ver,omitempty"`
}

// Validate validates this webitel contacts comment
func (m *WebitelContactsComment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsComment) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsComment) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	for i := 0; i < len(m.Format); i++ {
		if swag.IsZero(m.Format[i]) { // not required
			continue
		}

		if m.Format[i] != nil {
			if err := m.Format[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("format" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("format" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebitelContactsComment) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel contacts comment based on the context it is used
func (m *WebitelContactsComment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsComment) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsComment) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Format); i++ {

		if m.Format[i] != nil {

			if swag.IsZero(m.Format[i]) { // not required
				return nil
			}

			if err := m.Format[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("format" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("format" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebitelContactsComment) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {

		if swag.IsZero(m.UpdatedBy) { // not required
			return nil
		}

		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsComment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsComment) UnmarshalBinary(b []byte) error {
	var res WebitelContactsComment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
