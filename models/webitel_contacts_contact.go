// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelContactsContact The Contact principal source.
// OUTPUT purpose only.
//
// swagger:model webitel.contacts.Contact
type WebitelContactsContact struct {

	// BIO. Short description about the Contact person.
	// OPTIONAL. Multi-lined text.
	About string `json:"about,omitempty"`

	// The Contact's internal comment(s).
	Comments *WebitelContactsCommentList `json:"comments,omitempty"`

	// unix
	CreatedAt string `json:"created_at,omitempty"`

	// user
	CreatedBy *WebitelContactsLookup `json:"created_by,omitempty"`

	// READONLY. The contact's metadata.
	Domain *WebitelContactsLookup `json:"domain,omitempty"`

	// The Contact's email address(es).
	Emails *WebitelContactsEmailList `json:"emails,omitempty"`

	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `json:"etag,omitempty"`

	// The Contact's associated group(s).
	Groups *WebitelContactsContactGroupList `json:"groups,omitempty"`

	// The unique ID of the association. Never changes.
	ID string `json:"id,omitempty"`

	// The contact's [I]nstant[M]essaging clients.
	Imclients *WebitelContactsIMClientList `json:"imclients,omitempty"`

	// The Contact's associated tag(s).
	Labels *WebitelContactsLabelList `json:"labels,omitempty"`

	// A Contact's locale preference(s).
	Languages *WebitelContactsLanguageList `json:"languages,omitempty"`

	// The Contact's internal manager(s).
	Managers *WebitelContactsManagerList `json:"managers,omitempty"`

	// [R]ecord[b]ased[A]ccess[C]ontrol mode granted.
	Mode string `json:"mode,omitempty"`

	// The Contact's name.
	// This field is a singleton for Contact sources.
	Name *WebitelContactsName `json:"name,omitempty"`

	// The Contact's phone numbers.
	Phones *WebitelContactsPhoneList `json:"phones,omitempty"`

	// Output only. The Contact's photo(s).
	// Read Only: true
	Photos *WebitelContactsPhotoList `json:"photos,omitempty"`

	// The Contact's timezone preference(s).
	Timezones *WebitelContactsTimezoneList `json:"timezones,omitempty"`

	// unix
	UpdatedAt string `json:"updated_at,omitempty"`

	// user
	UpdatedBy *WebitelContactsLookup `json:"updated_by,omitempty"`

	// user connected to the contact
	User *WebitelContactsLookup `json:"user,omitempty"`

	// Arbitrary client data that is populated by clients.
	// Duplicate keys and values are allowed.
	Variables *WebitelContactsVariableList `json:"variables,omitempty"`

	// READONLY. Operational attributes
	// Version of the latest update. Numeric sequence.
	Ver int32 `json:"ver,omitempty"`
}

// Validate validates this webitel contacts contact
func (m *WebitelContactsContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImclients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsContact) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	if m.Comments != nil {
		if err := m.Comments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comments")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	if m.Emails != nil {
		if err := m.Emails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emails")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if m.Groups != nil {
		if err := m.Groups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateImclients(formats strfmt.Registry) error {
	if swag.IsZero(m.Imclients) { // not required
		return nil
	}

	if m.Imclients != nil {
		if err := m.Imclients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imclients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imclients")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateLanguages(formats strfmt.Registry) error {
	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	if m.Languages != nil {
		if err := m.Languages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("languages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("languages")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateManagers(formats strfmt.Registry) error {
	if swag.IsZero(m.Managers) { // not required
		return nil
	}

	if m.Managers != nil {
		if err := m.Managers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managers")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validatePhones(formats strfmt.Registry) error {
	if swag.IsZero(m.Phones) { // not required
		return nil
	}

	if m.Phones != nil {
		if err := m.Phones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phones")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validatePhotos(formats strfmt.Registry) error {
	if swag.IsZero(m.Photos) { // not required
		return nil
	}

	if m.Photos != nil {
		if err := m.Photos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photos")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateTimezones(formats strfmt.Registry) error {
	if swag.IsZero(m.Timezones) { // not required
		return nil
	}

	if m.Timezones != nil {
		if err := m.Timezones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timezones")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	if m.Variables != nil {
		if err := m.Variables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel contacts contact based on the context it is used
func (m *WebitelContactsContact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImclients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhotos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsContact) contextValidateComments(ctx context.Context, formats strfmt.Registry) error {

	if m.Comments != nil {

		if swag.IsZero(m.Comments) { // not required
			return nil
		}

		if err := m.Comments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comments")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateEmails(ctx context.Context, formats strfmt.Registry) error {

	if m.Emails != nil {

		if swag.IsZero(m.Emails) { // not required
			return nil
		}

		if err := m.Emails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emails")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.Groups != nil {

		if swag.IsZero(m.Groups) { // not required
			return nil
		}

		if err := m.Groups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateImclients(ctx context.Context, formats strfmt.Registry) error {

	if m.Imclients != nil {

		if swag.IsZero(m.Imclients) { // not required
			return nil
		}

		if err := m.Imclients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imclients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imclients")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	if m.Labels != nil {

		if swag.IsZero(m.Labels) { // not required
			return nil
		}

		if err := m.Labels.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateLanguages(ctx context.Context, formats strfmt.Registry) error {

	if m.Languages != nil {

		if swag.IsZero(m.Languages) { // not required
			return nil
		}

		if err := m.Languages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("languages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("languages")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateManagers(ctx context.Context, formats strfmt.Registry) error {

	if m.Managers != nil {

		if swag.IsZero(m.Managers) { // not required
			return nil
		}

		if err := m.Managers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managers")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {

		if swag.IsZero(m.Name) { // not required
			return nil
		}

		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidatePhones(ctx context.Context, formats strfmt.Registry) error {

	if m.Phones != nil {

		if swag.IsZero(m.Phones) { // not required
			return nil
		}

		if err := m.Phones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phones")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidatePhotos(ctx context.Context, formats strfmt.Registry) error {

	if m.Photos != nil {

		if swag.IsZero(m.Photos) { // not required
			return nil
		}

		if err := m.Photos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photos")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateTimezones(ctx context.Context, formats strfmt.Registry) error {

	if m.Timezones != nil {

		if swag.IsZero(m.Timezones) { // not required
			return nil
		}

		if err := m.Timezones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timezones")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {

		if swag.IsZero(m.UpdatedBy) { // not required
			return nil
		}

		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsContact) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	if m.Variables != nil {

		if swag.IsZero(m.Variables) { // not required
			return nil
		}

		if err := m.Variables.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsContact) UnmarshalBinary(b []byte) error {
	var res WebitelContactsContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
