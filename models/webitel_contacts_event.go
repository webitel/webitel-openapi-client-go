// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelContactsEvent webitel contacts event
//
// swagger:model webitel.contacts.Event
type WebitelContactsEvent struct {

	// call
	Call *WebitelContactsCallEvent `json:"call,omitempty"`

	// chat
	Chat *WebitelContactsChatEvent `json:"chat,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// email
	Email *WebitelContactsEmailEvent `json:"email,omitempty"`

	// type
	Type *WebitelContactsTimelineEventType `json:"type,omitempty"`
}

// Validate validates this webitel contacts event
func (m *WebitelContactsEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsEvent) validateCall(formats strfmt.Registry) error {
	if swag.IsZero(m.Call) { // not required
		return nil
	}

	if m.Call != nil {
		if err := m.Call.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("call")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) validateChat(formats strfmt.Registry) error {
	if swag.IsZero(m.Chat) { // not required
		return nil
	}

	if m.Chat != nil {
		if err := m.Chat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel contacts event based on the context it is used
func (m *WebitelContactsEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsEvent) contextValidateCall(ctx context.Context, formats strfmt.Registry) error {

	if m.Call != nil {

		if swag.IsZero(m.Call) { // not required
			return nil
		}

		if err := m.Call.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("call")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) contextValidateChat(ctx context.Context, formats strfmt.Registry) error {

	if m.Chat != nil {

		if swag.IsZero(m.Chat) { // not required
			return nil
		}

		if err := m.Chat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chat")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *WebitelContactsEvent) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsEvent) UnmarshalBinary(b []byte) error {
	var res WebitelContactsEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
