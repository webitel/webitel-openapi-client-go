// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebitelContactsInputTimezone An input of the Contact's timezones.
//
// swagger:model webitel.contacts.InputTimezone
type WebitelContactsInputTimezone struct {

	// Unique ID of the latest version of an existing resource.
	// Required: true
	Etag *string `json:"etag"`

	// Indicates whether this association must be default among others.
	Primary bool `json:"primary,omitempty"`

	// Timezone dictionary reference value associated.
	Timezone *WebitelContactsLookup `json:"timezone,omitempty"`
}

// Validate validates this webitel contacts input timezone
func (m *WebitelContactsInputTimezone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEtag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsInputTimezone) validateEtag(formats strfmt.Registry) error {

	if err := validate.Required("etag", "body", m.Etag); err != nil {
		return err
	}

	return nil
}

func (m *WebitelContactsInputTimezone) validateTimezone(formats strfmt.Registry) error {
	if swag.IsZero(m.Timezone) { // not required
		return nil
	}

	if m.Timezone != nil {
		if err := m.Timezone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webitel contacts input timezone based on the context it is used
func (m *WebitelContactsInputTimezone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsInputTimezone) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if m.Timezone != nil {

		if swag.IsZero(m.Timezone) { // not required
			return nil
		}

		if err := m.Timezone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timezone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsInputTimezone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsInputTimezone) UnmarshalBinary(b []byte) error {
	var res WebitelContactsInputTimezone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
