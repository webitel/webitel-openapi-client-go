// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebitelContactsLanguageList LabelsData
// NOTE: Edge represents connection between two nodes.
// So this ContactLabels.data are always subordinate to some contact.id.
// Example: {"data":[{"code":"uk","created_at":"1680268507698","created_by":{"id":"34","name":"John Doe"},"etag":"FqaTCDLbhpaoUreL","id":"7","lang":"Ukrainian","name":"українська","primary":true,"region":"UA","script":"Cyrl","tag":"uk-UA","updated_at":"1680516785357","updated_by":{"name":"Jane Lee (deleted)"},"ver":"3"}],"next":true,"page":1}
//
// swagger:model webitel.contacts.LanguageList
type WebitelContactsLanguageList struct {

	// Page of the Contact's Language(s) dataset.
	Data []*WebitelContactsLanguage `json:"data"`

	// Next indicate whether there are more result records(page+) available.
	// If set - next page is available with query ?size=$(data.length)&page=$(page++)
	Next bool `json:"next,omitempty"`

	// Page number of partial result dataset records.
	Page int32 `json:"page,omitempty"`
}

// Validate validates this webitel contacts language list
func (m *WebitelContactsLanguageList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsLanguageList) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this webitel contacts language list based on the context it is used
func (m *WebitelContactsLanguageList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebitelContactsLanguageList) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {

			if swag.IsZero(m.Data[i]) { // not required
				return nil
			}

			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebitelContactsLanguageList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebitelContactsLanguageList) UnmarshalBinary(b []byte) error {
	var res WebitelContactsLanguageList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
