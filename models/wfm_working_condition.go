// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WfmWorkingCondition wfm working condition
//
// swagger:model wfmWorkingCondition
type WfmWorkingCondition struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy *WfmLookupEntity `json:"created_by,omitempty"`

	// days off
	DaysOff int32 `json:"days_off,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pause duration
	PauseDuration int32 `json:"pause_duration,omitempty"`

	// pause template
	PauseTemplate *WfmLookupEntity `json:"pause_template,omitempty"`

	// shift template
	ShiftTemplate *WfmLookupEntity `json:"shift_template,omitempty"`

	// sick leaves
	SickLeaves int32 `json:"sick_leaves,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy *WfmLookupEntity `json:"updated_by,omitempty"`

	// vacation
	Vacation int32 `json:"vacation,omitempty"`

	// workday hours
	WorkdayHours int32 `json:"workday_hours,omitempty"`

	// workdays per month
	WorkdaysPerMonth int32 `json:"workdays_per_month,omitempty"`
}

// Validate validates this wfm working condition
func (m *WfmWorkingCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShiftTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmWorkingCondition) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) validatePauseTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseTemplate) { // not required
		return nil
	}

	if m.PauseTemplate != nil {
		if err := m.PauseTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pause_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pause_template")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) validateShiftTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShiftTemplate) { // not required
		return nil
	}

	if m.ShiftTemplate != nil {
		if err := m.ShiftTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shift_template")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wfm working condition based on the context it is used
func (m *WfmWorkingCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePauseTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShiftTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WfmWorkingCondition) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) contextValidatePauseTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.PauseTemplate != nil {

		if swag.IsZero(m.PauseTemplate) { // not required
			return nil
		}

		if err := m.PauseTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pause_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pause_template")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) contextValidateShiftTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ShiftTemplate != nil {

		if swag.IsZero(m.ShiftTemplate) { // not required
			return nil
		}

		if err := m.ShiftTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shift_template")
			}
			return err
		}
	}

	return nil
}

func (m *WfmWorkingCondition) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {

		if swag.IsZero(m.UpdatedBy) { // not required
			return nil
		}

		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WfmWorkingCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WfmWorkingCondition) UnmarshalBinary(b []byte) error {
	var res WfmWorkingCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
